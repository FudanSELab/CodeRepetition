{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t\treturn lst[0] + lst[-1]\n\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  "}
{"ID": 16, "source": "MBPP:617", "prompt": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t", "predict": "\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\ndef min_Jumps(a, b, d): \n\t\n    # If d is 0, then we have reached the destination \n    if d == 0: \n        return 0\n  \n    # If d is negative, then we cannot reach the destination \n    if d < 0: \n        return float('inf')\n  \n    # If we can reach the destination from (a, b) in 1 step, then return 1 \n    if (a == 0 and b == 0) or (a!= 0 and b!= 0): \n        return 1\n  \n    # If we can reach the destination from (a, b) in 2 steps, then return 2 \n    if (a!= 0 and b == 0) or (a == 0 and b!= 0): \n        return 2\n  \n    # If we can reach the destination from (a, b) in 3 steps, then return 3 \n    if (a > 0 and b > 0): \n        return 3\n  \n    # If we can reach the destination from (a, b) in 4 steps, then return 4 \n    if (a > 0 and b < 0) or (a < 0 and b > 0): \n        return 4\n  \n    # If we can reach the destination from (a, b) in 5 steps, then return 5 \n    if (a < 0 and b < 0): \n        return 5\n  \n    # If we can reach the destination from (a, b) in 6 steps, then return 6 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 6\n  \n    # If we can reach the destination from (a, b) in 7 steps, then return 7 \n    if (a > 0 and b < 0) or (a < 0 and b > 0): \n        return 7\n  \n    # If we can reach the destination from (a, b) in 8 steps, then return 8 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 8\n  \n    # If we can reach the destination from (a, b) in 9 steps, then return 9 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 9\n  \n    # If we can reach the destination from (a, b) in 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    if d < 0: \n        return float('inf')\n  \n    # If we can reach the destination from (a, b) in 1 step, then return 1 \n    if (a == 0 and b == 0) or (a!= 0 and b!= 0): \n        return 1\n  \n    # If we can reach the destination from (a, b) in 2 steps, then return 2 \n    if (a!= 0 and b == 0) or (a == 0 and b!= 0): \n        return 2\n  \n    # If we can reach the destination from (a, b) in 3 steps, then return 3 \n    if (a > 0 and b > 0): \n        return 3\n  \n    # If we can reach the destination from (a, b) in 4 steps, then return 4 \n    if (a > 0 and b < 0) or (a < 0 and b > 0): \n        return 4\n  \n    # If we can reach the destination from (a, b) in 5 steps, then return 5 \n    if (a < 0 and b < 0): \n        return 5\n  \n    # If we can reach the destination from (a, b) in 6 steps, then return 6 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 6\n  \n    # If we can reach the destination from (a, b) in 7 steps, then return 7 \n    if (a > 0 and b < 0) or (a < 0 and b > 0): \n        return 7\n  \n    # If we can reach the destination from (a, b) in 8 steps, then return 8 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 8\n  \n    # If we can reach the destination from (a, b) in 9 steps, then return 9 \n    if (a > 0 and b > 0) or (a < 0 and b < 0): \n        return 9\n  \n    # If we can reach the destination from (a, b) in 1"}
{"ID": 24, "source": "MBPP:625", "prompt": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0] \n\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum element in a given list.\n\"\"\""}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and no loss\n\"\"\"\ndef profit_noloss(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\n\"\"\"\ndef profit_loss(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and no loss\n\"\"\"\ndef profit_noloss(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has profit and loss\n\"\"\"\ndef profit_loss(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\"\ndef noprofit_loss(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given amount has no profit and loss\n\"\"\""}
{"ID": 59, "source": "MBPP:660", "prompt": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t", "predict": "\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \n\t\n    # Your code here\n    # return a list of points\n    # l1,r1,l2,r2 are the lower and upper limits of the two ranges\n    # return a list of points\n    # points should be in the form of a list of tuples\n    # [(x1,y1),(x2,y2),...]\n    # x1,y1,x2,y2 are the coordinates of the points\n    # return an empty list if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    # return an empty list if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no points are possible\n    # return None if no"}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t\n    # Initialize result \n    res = 0\n    while (res < n): \n        if (res % x == y): \n            return res \n        res += 1\n    return -1\n\nprint(find_max_val(10, 2, 0))\nprint(find_max_val(10, 2, 1))\nprint(find_max_val(10, 2, 2))\nprint(find_max_val(10, 2, 3))\nprint(find_max_val(10, 2, 4))\nprint(find_max_val(10, 2, 5))\nprint(find_max_val(10, 2, 6))\nprint(find_max_val(10, 2, 7))\nprint(find_max_val(10, 2, 8))\nprint(find_max_val(10, 2, 9))\nprint(find_max_val(10, 2, 10))\nprint(find_max_val(10, 2, 11))\nprint(find_max_val(10, 2, 12))\nprint(find_max_val(10, 2, 13))\nprint(find_max_val(10, 2, 14))\nprint(find_max_val(10, 2, 15))\nprint(find_max_val(10, 2, 16))\nprint(find_max_val(10, 2, 17))\nprint(find_max_val(10, 2, 18))\nprint(find_max_val(10, 2, 19))\nprint(find_max_val(10, 2, 20))\nprint(find_max_val(10, 2, 21))\nprint(find_max_val(10, 2, 22))\nprint(find_max_val(10, 2, 23))\nprint(find_max_val(10, 2, 24))\nprint(find_max_val(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_max_val(10, 2, 0))\nprint(find_max_val(10, 2, 1))\nprint(find_max_val(10, 2, 2))\nprint(find_max_val(10, 2, 3))\nprint(find_max_val(10, 2, 4))\nprint(find_max_val(10, 2, 5))\nprint(find_max_val(10, 2, 6))\nprint(find_max_val(10, 2, 7))\nprint(find_max_val(10, 2, 8))\nprint(find_max_val(10, 2, 9))\nprint(find_max_val(10, 2, 10))\nprint(find_max_val(10, 2, 11))\nprint(find_max_val(10, 2, 12))\nprint(find_max_val(10, 2, 13))\nprint(find_max_val(10, 2, 14))\nprint(find_max_val(10, 2, 15))\nprint(find_max_val(10, 2, 16))\nprint(find_max_val(10, 2, 17))\nprint(find_max_val(10, 2, 18))\nprint(find_max_val(10, 2, 19))\nprint(find_max_val(10, 2, 20))\nprint(find_max_val(10, 2, 21))\nprint(find_max_val(10, 2, 22))\nprint(find_max_val(10, 2, 23))\nprint(find_max_val(10, 2, 24))\nprint(find_max_val("}
{"ID": 63, "source": "MBPP:664", "prompt": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) : \n\t\tsum = 0\n\t\tfor i in range(0,n,2) : \n\t\t\tsum = sum + i\n\t\treturn sum/n\n\nprint(average_Even(10))\nprint(average_Even(100))\nprint(average_Even(1000))\nprint(average_Even(10000))\nprint(average_Even(100000))\nprint(average_Even(1000000))\nprint(average_Even(10000000))\nprint(average_Even(100000000))\nprint(average_Even(1000000000))\nprint(average_Even(10000000000))\nprint(average_Even(100000000000))\nprint(average_Even(1000000000000))\nprint(average_Even(10000000000000))\nprint(average_Even(100000000000000))\nprint(average_Even(1000000000000000))\nprint(average_Even(10000000000000000))\nprint(average_Even(100000000000000000))\nprint(average_Even(1000000000000000000))\nprint(average_Even(10000000000000000000))\nprint(average_Even(100000000000000000000))\nprint(average_Even(1000000000000000000000))\nprint(average_Even(10000000000000000000000))\nprint(average_Even(100000000000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(average_Even(10))\nprint(average_Even(100))\nprint(average_Even(1000))\nprint(average_Even(10000))\nprint(average_Even(100000))\nprint(average_Even(1000000))\nprint(average_Even(10000000))\nprint(average_Even(100000000))\nprint(average_Even(1000000000))\nprint(average_Even(10000000000))\nprint(average_Even(100000000000))\nprint(average_Even(1000000000000))\nprint(average_Even(10000000000000))\nprint(average_Even(100000000000000))\nprint(average_Even(1000000000000000))\nprint(average_Even(10000000000000000))\nprint(average_Even(100000000000000000))\nprint(average_Even(1000000000000000000))\nprint(average_Even(10000000000000000000))\nprint(average_Even(100000000000000000000))\nprint(average_Even(1000000000000000000000))\nprint(average_Even(10000000000000000000000))\nprint(average_Even(100000000000000000000"}
{"ID": 66, "source": "MBPP:667", "prompt": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t", "predict": "\"\"\"\nWrite a python function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels): \n\t\tcount = 0\n\t\tfor i in string: \n\t\t\tif i in vowels: \n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Check_Vow(\"Hello\", \"aeiou\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\nprint(Check_Vow(\"Hello\", \"aeiouy\"))\n"}
{"ID": 67, "source": "MBPP:668", "prompt": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t", "predict": "\"\"\"\nWrite a python function to replace multiple occurence of character by single.\n\"\"\"\ndef replace(string, char): \n\t\treturn string.replace(char, '')\n\n\"\"\"\nWrite a python function to remove all occurences of a character from a string.\n\"\"\"\ndef remove(string, char): \n\t\treturn string.replace(char, '')\n\n\"\"\"\nWrite a python function to split a string at a specified character.\n\"\"\"\ndef split(string, char): \n\t\treturn string.split(char)\n\n\"\"\"\nWrite a python function to remove leading and trailing characters from a string.\n\"\"\"\ndef strip(string, char): \n\t\treturn string.strip(char)\n\n\"\"\"\nWrite a python function to remove leading characters from a string.\n\"\"\"\ndef lstrip(string, char): \n\t\treturn string.lstrip(char)\n\n\"\"\"\nWrite a python function to remove trailing characters from a string.\n\"\"\"\ndef rstrip(string, char): \n\t\treturn string.rstrip(char)\n\n\"\"\"\nWrite a python function to find the length of a string.\n\"\"\"\ndef length(string): \n\t\treturn len(string)\n\n\"\"\"\nWrite a python function to find the maximum occurring character in a string.\n\"\"\"\ndef max(string): \n\t\treturn max(string)\n\n\"\"\"\nWrite a python function to find the minimum occurring character in a string.\n\"\"\"\ndef min(string): \n\t\treturn min(string)\n\n\"\"\"\nWrite a python function to find the first index of a character in a string.\n\"\"\"\ndef find(string, char): \n\t\treturn string.find(char)\n\n\"\"\"\nWrite a python function to find the last index of a character in a string.\n\"\"\"\ndef rfind(string, char): \n\t\treturn string.rfind(char)\n\n\"\"\"\nWrite a python function to count the number of occurences of a character in a string.\n\"\"\"\ndef count(string, char): \n\t\treturn string.count(char)\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(string): \n\t\treturn string == string[::-1]\n\n\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef to_list(string): \n\t\treturn list(string)\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn string.replace(char, '')\n\n\"\"\"\nWrite a python function to remove all occurences of a character from a string.\n\"\"\"\ndef remove(string, char): \n\t\treturn string.replace(char, '')\n\n\"\"\"\nWrite a python function to split a string at a specified character.\n\"\"\"\ndef split(string, char): \n\t\treturn string.split(char)\n\n\"\"\"\nWrite a python function to remove leading and trailing characters from a string.\n\"\"\"\ndef strip(string, char): \n\t\treturn string.strip(char)\n\n\"\"\"\nWrite a python function to remove leading characters from a string.\n\"\"\"\ndef lstrip(string, char): \n\t\treturn string.lstrip(char)\n\n\"\"\"\nWrite a python function to remove trailing characters from a string.\n\"\"\"\ndef rstrip(string, char): \n\t\treturn string.rstrip(char)\n\n\"\"\"\nWrite a python function to find the length of a string.\n\"\"\"\ndef length(string): \n\t\treturn len(string)\n\n\"\"\"\nWrite a python function to find the maximum occurring character in a string.\n\"\"\"\ndef max(string): \n\t\treturn max(string)\n\n\"\"\"\nWrite a python function to find the minimum occurring character in a string.\n\"\"\"\ndef min(string): \n\t\treturn min(string)\n\n\"\"\"\nWrite a python function to find the first index of a character in a string.\n\"\"\"\ndef find(string, char): \n\t\treturn string.find(char)\n\n\"\"\"\nWrite a python function to find the last index of a character in a string.\n\"\"\"\ndef rfind(string, char): \n\t\treturn string.rfind(char)\n\n\"\"\"\nWrite a python function to count the number of occurences of a character in a string.\n\"\"\"\ndef count(string, char): "}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_Right_most_Set_Bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer.\n\"\"\"\ndef set_All_Bits(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the right most set bit.\n\"\"\"\ndef set_All_Bits_Except_Right_most_Set_Bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the right most unset bit.\n\"\"\"\ndef set_All_Bits_Except_Right_most_Unset_Bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the kth right most set bit.\n\"\"\"\ndef set_All_Bits_Except_Kth_Right_most_Set_Bit(n, k): \n\t\treturn n | (n - (1 << k))\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the kth right most unset bit.\n\"\"\"\ndef set_All_Bits_Except_Kth_Right_most_Unset_Bit(n, k): \n\t\treturn n | (n + (1 << k))\n\n\"\"\"\nWrite a python function to set the kth right most set bit.\n\"\"\"\ndef set_Kth_Right_most_Set_Bit(n, k): \n\t\treturn n | (1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most unset bit.\n\"\"\"\ndef set_Kth_Right_most_Unset_Bit(n, k): \n\t\treturn n | (1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most set bit to 0.\n\"\"\"\ndef set_Kth_Right_most_Set_Bit_to_0(n, k): \n\t\treturn n & ~(1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most unset bit to 0.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to set the right most set bit.\n\"\"\"\ndef set_Right_most_Set_Bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer.\n\"\"\"\ndef set_All_Bits(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the right most set bit.\n\"\"\"\ndef set_All_Bits_Except_Right_most_Set_Bit(n): \n\t\treturn n | (n + 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the right most unset bit.\n\"\"\"\ndef set_All_Bits_Except_Right_most_Unset_Bit(n): \n\t\treturn n | (n - 1)\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the kth right most set bit.\n\"\"\"\ndef set_All_Bits_Except_Kth_Right_most_Set_Bit(n, k): \n\t\treturn n | (n - (1 << k))\n\n\"\"\"\nWrite a python function to set all bits of a given integer except the kth right most unset bit.\n\"\"\"\ndef set_All_Bits_Except_Kth_Right_most_Unset_Bit(n, k): \n\t\treturn n | (n + (1 << k))\n\n\"\"\"\nWrite a python function to set the kth right most set bit.\n\"\"\"\ndef set_Kth_Right_most_Set_Bit(n, k): \n\t\treturn n | (1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most unset bit.\n\"\"\"\ndef set_Kth_Right_most_Unset_Bit(n, k): \n\t\treturn n | (1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most set bit to 0.\n\"\"\"\ndef set_Kth_Right_most_Set_Bit_to_0(n, k): \n\t\treturn n & ~(1 << k)\n\n\"\"\"\nWrite a python function to set the kth right most unset bit to 0.\n\"\"\""}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t\tif num1 > num2 and num1 > num3: \n\t\t\treturn num1 \n\t\telif num2 > num1 and num2 > num3: \n\t\t\treturn num2 \n\t\telse: \n\t\t\treturn num3 \n\nprint(max_of_three(1,2,3))\nprint(max_of_three(10,20,30))\nprint(max_of_three(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_three_without_conditional(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional(1,2,3))\nprint(max_of_three_without_conditional(10,20,30))\nprint(max_of_three_without_conditional(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_three_without_conditional_or_loops(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional_or_loops(1,2,3))\nprint(max_of_three_without_conditional_or_loops(10,20,30))\nprint(max_of_three_without_conditional_or_loops(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_three_without_conditional_or_loops(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional_or_loops(1,2,3))\nprint(max_of_three_without_conditional_or_loops(10,20,30))\nprint(max_of_three_without_conditional_or_loops(100,200,300))\n\n\"\"\"\nWrite", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(max_of_three_without_conditional(1,2,3))\nprint(max_of_three_without_conditional(10,20,30))\nprint(max_of_three_without_conditional(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_three_without_conditional_or_loops(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional_or_loops(1,2,3))\nprint(max_of_three_without_conditional_or_loops(10,20,30))\nprint(max_of_three_without_conditional_or_loops(100,200,300))\n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_three_without_conditional_or_loops(num1,num2,num3): \n\t\treturn max(num1,num2,num3) \n\nprint(max_of_three_without_conditional_or_loops(1,2,3))\nprint(max_of_three_without_conditional_or_loops(10,20,30))\nprint(max_of_three_without_conditional_or_loops(100,200,300))\n\n\"\"\"\nWrite"}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t\treturn int(\"\".join(str(x) for x in list))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(list):\n\t\treturn max(list), min(list)\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in"}
{"ID": 80, "source": "MBPP:681", "prompt": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n): \n\t\tfor i in range(2, n): \n\t\t\tif (n % i) == 0: \n\t\t\t\treturn i \n\t\treturn n \n\n\"\"\"\nWrite a python function to find the largest prime divisor of a number.\n\"\"\"\ndef largest_Divisor(n): \n\t\tfor i in range(n, 1, -1): \n\t\t\tif (n % i) == 0: \n\t\t\t\treturn i \n\t\treturn 1\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\treturn i \n\t\treturn 1\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\"\nWrite a python function to find the prime factors of a number.\n\"\"\"\ndef prime_factors(n): \n\t\tfactors = [] \n\t\twhile n % 2 == 0: \n\t\t\tfactors.append(2) \n\t\t\tn = n / 2 \n\t\tfor i in range(3, int(n**0.5)+1, 2): \n\t\t\twhile n % i == 0: \n\t\t\t\tfactors.append(i) \n\t\t\t\tn = n / i \n\t\tif n > 2: \n\t\t\tfactors.append(n) \n\t\treturn factors\n\n\"\"\""}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t\treturn list(zip(list1,list2))\n\n\"\"\"\nWrite a function to zip two given lists of lists."}
{"ID": 98, "source": "MBPP:699", "prompt": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t", "predict": "\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) : \n\t\t# code here \n\t\tcount = 0\n\t\tfor i in range(len(str1)) : \n\t\t\tif str1[i]!= str2[i] : \n\t\t\t\tcount += 1\n\t\treturn count\n\n# Driver code \nif __name__ == '__main__': \n\tstr1 = \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tstr1 = \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t\treturn list(string)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) == 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first repeating character in a string.\n\"\"\"\ndef FirstRepeating(string):\n\t\tfor i in string:\n\t\t\t\tif string.count(i) > 1:\n\t\t\t\t\t\treturn i\n\t\treturn None\n\n\"\"\"\nWrite a python function to find the first non-repeating character in a string.\n\"\"\"\ndef FirstNonRepeating(string):\n\t\tfor i in string"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t\tcount = 0\n\t\tfor i in range(2,n+1):\n\t\t\tif(isPrime(i)):\n\t\t\t\tcount += n/i\n\t\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\t\tfor i in range(2,n+1):\n\t\t\tif(isPrime(i)):\n\t\t\t\tcount += n/i\n\t\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0\n\twhile(n>0):\n\t\tn = n//10\n\t\tcount += 1\n\treturn count\n\n\"\"\"\nWrite a python function to find the number of digits in a given number.\n\"\"\"\ndef count_digits(n):\n\tcount = 0"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t\t\"\"\"\n\t\tCalculate the standard deviation of a list of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean\n\t\tmean = mean_calc(data)\n\t\t# Calculate the sum of the squared differences from the mean\n\t\tsum_squared_differences = 0\n\t\tfor number in data:\n\t\t\tsum_squared_differences += (number - mean)**2\n\t\t# Calculate the standard deviation\n\t\tsd = (sum_squared_differences / len(data))**0.5\n\t\treturn sd\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef variance_calc(data):\n\t\t\"\"\"\n\t\tCalculate the variance of a list of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean\n\t\tmean = mean_calc(data)\n\t\t# Calculate the sum of the squared differences from the mean\n\t\tsum_squared_differences = 0\n\t\tfor number in data:\n\t\t\tsum_squared_differences += (number - mean)**2\n\t\t# Calculate the variance\n\t\tvariance = sum_squared_differences / len(data)\n\t\treturn variance\n\n\"\"\"\nWrite a function to calculate the covariance.\n\"\"\"\ndef covariance_calc(data1, data2):\n\t\t\"\"\"\n\t\tCalculate the covariance of two lists of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean of each list\n\t\tmean1 = mean_calc(data1)\n\t\tmean2 = mean_calc(data2)\n\t\t# Calculate the sum of the products of the differences from the mean\n\t\tsum_product_differences = 0\n\t\tfor i in range(len(data1)):\n\t\t\tsum_product_differences += (data1[i] - mean1) * (data2[i] - mean2)\n\t\t# Calculate the covariance\n\t\tcovariance = sum_product_differences / len(data1)\n\t\treturn covariance\n\n\"\"\"\nWrite a function to calculate the correlation coefficient.\n\"\"\"\ndef correlation_calc(data1, data2):\n\t\t\"\"\"\n\t\tCalculate the correlation coefficient of two lists of numbers.\n\t\t\"\"\"\n\t\t# Calculate the standard deviation of each list\n\t\tsd1 = sd_calc(data1)\n\t\tsd2 = sd_calc(data2)\n\t\t# Calculate the covariance\n\t\tcovariance = covariance_calc(data1, data2)\n\t\t# Calculate the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn sd\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef variance_calc(data):\n\t\t\"\"\"\n\t\tCalculate the variance of a list of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean\n\t\tmean = mean_calc(data)\n\t\t# Calculate the sum of the squared differences from the mean\n\t\tsum_squared_differences = 0\n\t\tfor number in data:\n\t\t\tsum_squared_differences += (number - mean)**2\n\t\t# Calculate the variance\n\t\tvariance = sum_squared_differences / len(data)\n\t\treturn variance\n\n\"\"\"\nWrite a function to calculate the covariance.\n\"\"\"\ndef covariance_calc(data1, data2):\n\t\t\"\"\"\n\t\tCalculate the covariance of two lists of numbers.\n\t\t\"\"\"\n\t\t# Calculate the mean of each list\n\t\tmean1 = mean_calc(data1)\n\t\tmean2 = mean_calc(data2)\n\t\t# Calculate the sum of the products of the differences from the mean\n\t\tsum_product_differences = 0\n\t\tfor i in range(len(data1)):\n\t\t\tsum_product_differences += (data1[i] - mean1) * (data2[i] - mean2)\n\t\t# Calculate the covariance\n\t\tcovariance = sum_product_differences / len(data1)\n\t\treturn covariance\n\n\"\"\""}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t\treturn n ^ (n >> 1)\n\n\"\"\"\nWrite a python function to find the maximum of two numbers without if-else.\n\"\"\"\ndef max_of_two(a, b):\n\t\treturn a if a > b else b\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without if-else.\n\"\"\"\ndef max_of_three(a, b, c):\n\t\treturn max(a, max(b, c))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers without if-else.\n\"\"\"\ndef max_of_four(a, b, c, d):\n\t\treturn max(a, max(b, max(c, d)))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers without if-else.\n\"\"\"\ndef max_of_five(a, b, c, d, e):\n\t\treturn max(a, max(b, max(c, max(d, e))))\n\n\"\"\"\nWrite a python function to find the maximum of six numbers without if-else.\n\"\"\"\ndef max_of_six(a, b, c, d, e, f):\n\t\treturn max(a, max(b, max(c, max(d, max(e, f)))))\n\n\"\"\"\nWrite a python function to find the maximum of seven numbers without if-else.\n\"\"\"\ndef max_of_seven(a, b, c, d, e, f, g):\n\t\treturn max(a, max(b, max(c, max(d, max(e, max(f, g))))))\n\n\"\"\"\nWrite a python function to find the maximum of eight numbers without if-else.\n\"\"\"\ndef max_of_eight(a, b, c, d, e, f, g, h):\n\t\treturn max(a, max(b, max(c, max(d, max(e, max(f, max(g, h)))))))\n\n\"\"\"\nWrite a python function to find the maximum of nine numbers without if-else.\n\"\"\"\ndef max_of_nine(a, b, c, d, e, f, g, h, i):\n\t\treturn max(a, max(b, max(c, max(d, max(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn n ^ (n >> 1)\n\n\"\"\"\nWrite a python function to find the maximum of two numbers without if-else.\n\"\"\"\ndef max_of_two(a, b):\n\t\treturn a if a > b else b\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without if-else.\n\"\"\"\ndef max_of_three(a, b, c):\n\t\treturn max(a, max(b, c))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers without if-else.\n\"\"\"\ndef max_of_four(a, b, c, d):\n\t\treturn max(a, max(b, max(c, d)))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers without if-else.\n\"\"\"\ndef max_of_five(a, b, c, d, e):\n\t\treturn max(a, max(b, max(c, max(d, e))))\n\n\"\"\"\nWrite a python function to find the maximum of six numbers without if-else.\n\"\"\"\ndef max_of_six(a, b, c, d, e, f):\n\t\treturn max(a, max(b, max(c, max(d, max(e, f)))))\n\n\"\"\"\nWrite a python function to find the maximum of seven numbers without if-else.\n\"\"\"\ndef max_of_seven(a, b, c, d, e, f, g):\n\t\treturn max(a, max(b, max(c, max(d, max(e, max(f, g))))))\n\n\"\"\"\nWrite a python function to find the maximum of eight numbers without if-else.\n\"\"\"\ndef max_of_eight(a, b, c, d, e, f, g, h):\n\t\treturn max(a, max(b, max(c, max(d, max(e, max(f, max(g, h)))))))\n\n\"\"\"\nWrite a python function to find the maximum of nine numbers without if-else.\n\"\"\"\ndef max_of_nine(a, b, c, d, e, f, g, h, i):"}
{"ID": 136, "source": "MBPP:737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\ndef check_str(string): \n\t\treturn bool(re.search(r'^[aeiouAEIOU]', string))\n\nprint(check_str(\"hello\"))\nprint(check_str(\"how are you\"))\nprint(check_str(\"programming\"))\nprint(check_str(\"Python\"))\nprint(check_str(\"java\"))\nprint(check_str(\"C++\"))\nprint(check_str(\"C\"))\nprint(check_str(\"c\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c++\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_str(\"hello\"))\nprint(check_str(\"how are you\"))\nprint(check_str(\"programming\"))\nprint(check_str(\"Python\"))\nprint(check_str(\"java\"))\nprint(check_str(\"C++\"))\nprint(check_str(\"C\"))\nprint(check_str(\"c\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c++\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\"c#\"))\nprint(check_str(\""}
{"ID": 151, "source": "MBPP:752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n): \n\t\tif n == 0: \n\t\t\treturn 0\n\t\telif n == 1: \n\t\t\treturn 1\n\t\telse: \n\t\t\treturn jacobsthal_num(n-1) + jacobsthal_num(n-2) \n\n\"\"\"\nWrite a function to find the nth fibonacci number.\n\"\"\"\ndef fibonacci_num(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_num(n-1) + fibonacci_num(n-2) \n\n\"\"\"\nWrite a function to find the nth tribonacci number.\n\"\"\"\ndef tribonacci_num(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn tribonacci_num(n-1) + tribonacci_num(n-2) + tribonacci_num(n-3) \n\n\"\"\"\nWrite a function to find the nth lucas number.\n\"\"\"\ndef lucas_num(n): \n\tif n == 0: \n\t\treturn 2\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn lucas_num(n-1) + lucas_num(n-2) \n\n\"\"\"\nWrite a function to find the nth number in the fibonacci sequence.\n\"\"\"\ndef fibonacci_num_2(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_num_2(n-1) + fibonacci_num_2(n-2) \n\n\"\"\"\nWrite a function to find the nth number in the tribonacci sequence.\n\"\"\"\ndef tribonacci_num_2(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn tribonacci_num_2(n-1) + tribonacci_num_2(n-2)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn tribonacci_num(n-1) + tribonacci_num(n-2) + tribonacci_num(n-3) \n\n\"\"\"\nWrite a function to find the nth lucas number.\n\"\"\"\ndef lucas_num(n): \n\tif n == 0: \n\t\treturn 2\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn lucas_num(n-1) + lucas_num(n-2) \n\n\"\"\"\nWrite a function to find the nth number in the fibonacci sequence.\n\"\"\"\ndef fibonacci_num_2(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn fibonacci_num_2(n-1) + fibonacci_num_2(n-2) \n\n\"\"\"\nWrite a function to find the nth number in the tribonacci sequence.\n\"\"\"\ndef tribonacci_num_2(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn tribonacci_num_2(n-1) + tribonacci_num_2(n-2)"}
{"ID": 161, "source": "MBPP:762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n\t\tif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum4):\n\t\tif monthnum4 == 1 or monthnum4 == 3 or monthnum4 == 5 or monthnum4 == 7 or monthnum4 == 8 or monthnum4 == 10 or monthnum4 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum5):\n\t\tif monthnum5 == 1 or monthnum5 == 3 or monthnum5 == 5 or monthnum5 == 7 or monthnum5 == 8 or monthnum5 == 10 or monthnum5 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum6):\n\t\tif monthnum6 == 1 or monthnum6 == 3 or monthnum6 == 5 or monthnum6 == 7 or monthnum6 == 8 or monthnum6 == 10 or monthnum6 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum7):\n\t\tif monthnum7 == 1 or monthnum7 == 3 or monthnum7 == 5 or monthnum7 == 7 or monthnum7 == 8 or monthnum7 == 10 or monthnum7 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum4):\n\t\tif monthnum4 == 1 or monthnum4 == 3 or monthnum4 == 5 or monthnum4 == 7 or monthnum4 == 8 or monthnum4 == 10 or monthnum4 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum5):\n\t\tif monthnum5 == 1 or monthnum5 == 3 or monthnum5 == 5 or monthnum5 == 7 or monthnum5 == 8 or monthnum5 == 10 or monthnum5 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum6):\n\t\tif monthnum6 == 1 or monthnum6 == 3 or monthnum6 == 5 or monthnum6 == 7 or monthnum6 == 8 or monthnum6 == 10 or monthnum6 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum7):\n\t\tif monthnum7 == 1 or monthnum7 == 3 or monthnum7 == 5 or monthnum7 == 7 or monthnum7 == 8 or monthnum7 == 10 or monthnum7 == 12:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum"}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0:\n\t\treturn False\n\twhile num % 2 == 0:\n\t\tnum = num / 2\n\tif num == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether a given number is a power of two or not.\n\"\"\"\ndef is_power_of_two(num):\n\tif num == 0"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t\treturn sum(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the smallest element in an array.\n\"\"\"\ndef _min(arr):  \n\t\treturn min(arr)\n\n\"\"\"\nWrite a python function to find the largest element in an array.\n\"\"\"\ndef _max(arr):  \n\t\treturn max(arr)\n\n\"\"\"\nWrite a python function to find the"}
{"ID": 198, "source": "MBPP:799", "prompt": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t", "predict": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n,d):   \n\t\treturn ((n<<d)|(n>>(32-d)))\n\n\"\"\"\nWrite a python function to right rotate the bits of a given number.\n\"\"\"\ndef right_Rotate(n,d):   \n\t\treturn ((n>>d)|(n<<(32-d)))\n\n\"\"\"\nWrite a python function to swap the even and odd bits of a given number.\n\"\"\"\ndef swap_Even_Odd_Bits(n):\n\t\treturn ((n&0xAAAAAAAA)|((n>>1)&0x55555555))\n\n\"\"\"\nWrite a python function to swap the nibbles of a given number.\n\"\"\"\ndef swap_Nibbles(n):\n\t\treturn ((n&0x0F0F0F0F)|((n>>4)&0x00F0F0F0))\n\n\"\"\"\nWrite a python function to reverse the bits of a given number.\n\"\"\"\ndef reverse_Bits(n):\n\t\treturn ((n&0x55555555)|((n>>1)&0xAAAAAAAA)|((n&0xAAAAAAAA)>>1))\n\n\"\"\"\nWrite a python function to count the number of 1s in a given number.\n\"\"\"\ndef count_Ones(n):\n\t\treturn ((n&0x55555555)+((n>>1)&0x55555555))\n\n\"\"\"\nWrite a python function to count the number of 0s in a given number.\n\"\"\"\ndef count_Zeros(n):\n\t\treturn ((n&0xAAAAAAAA)+((n>>1)&0xAAAAAAAA))\n\n\"\"\"\nWrite a python function to count the number of 1s in the binary representation of a given number.\n\"\"\"\ndef count_Ones_Binary(n):\n\t\treturn ((n&0x11111111)+((n>>1)&0x11111111)+((n>>2)&0x11111111)+((n>>3)&0x11111111))\n\n\"\"\"\nWrite a python function to count the number of 0s in the binary representation of a given number.\n\"\"\"\ndef count_Zeros_Binary(n):\n\t\treturn ((n&0x", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ((n<<d)|(n>>(32-d)))\n\n\"\"\"\nWrite a python function to right rotate the bits of a given number.\n\"\"\"\ndef right_Rotate(n,d):   \n\t\treturn ((n>>d)|(n<<(32-d)))\n\n\"\"\"\nWrite a python function to swap the even and odd bits of a given number.\n\"\"\"\ndef swap_Even_Odd_Bits(n):\n\t\treturn ((n&0xAAAAAAAA)|((n>>1)&0x55555555))\n\n\"\"\"\nWrite a python function to swap the nibbles of a given number.\n\"\"\"\ndef swap_Nibbles(n):\n\t\treturn ((n&0x0F0F0F0F)|((n>>4)&0x00F0F0F0))\n\n\"\"\"\nWrite a python function to reverse the bits of a given number.\n\"\"\"\ndef reverse_Bits(n):\n\t\treturn ((n&0x55555555)|((n>>1)&0xAAAAAAAA)|((n&0xAAAAAAAA)>>1))\n\n\"\"\"\nWrite a python function to count the number of 1s in a given number.\n\"\"\"\ndef count_Ones(n):\n\t\treturn ((n&0x55555555)+((n>>1)&0x55555555))\n\n\"\"\"\nWrite a python function to count the number of 0s in a given number.\n\"\"\"\ndef count_Zeros(n):\n\t\treturn ((n&0xAAAAAAAA)+((n>>1)&0xAAAAAAAA))\n\n\"\"\"\nWrite a python function to count the number of 1s in the binary representation of a given number.\n\"\"\"\ndef count_Ones_Binary(n):\n\t\treturn ((n&0x11111111)+((n>>1)&0x11111111)+((n>>2)&0x11111111)+((n>>3)&0x11111111))\n\n\"\"\"\nWrite a python function to count the number of 0s in the binary representation of a given number.\n\"\"\"\ndef count_Zeros_Binary(n):"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t\t\"\"\"\n\t\t:type arr: List[int]\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\tif n==1:\n\t\t\treturn 0\n\t\tif n==2:\n\t\t\treturn 1\n\t\tif n==3:\n\t\t\treturn 2\n\t\tif n==4:\n\t\t\treturn 3\n\t\tif n==5:\n\t\t\treturn 4\n\t\tif n==6:\n\t\t\treturn 5\n\t\tif n==7:\n\t\t\treturn 6\n\t\tif n==8:\n\t\t\treturn 7\n\t\tif n==9:\n\t\t\treturn 8\n\t\tif n==10:\n\t\t\treturn 9\n\t\tif n==11:\n\t\t\treturn 10\n\t\tif n==12:\n\t\t\treturn 11\n\t\tif n==13:\n\t\t\treturn 12\n\t\tif n==14:\n\t\t\treturn 13\n\t\tif n==15:\n\t\t\treturn 14\n\t\tif n==16:\n\t\t\treturn 15\n\t\tif n==17:\n\t\t\treturn 16\n\t\tif n==18:\n\t\t\treturn 17\n\t\tif n==19:\n\t\t\treturn 18\n\t\tif n==20:\n\t\t\treturn 19\n\t\tif n==21:\n\t\t\treturn 20\n\t\tif n==22:\n\t\t\treturn 21\n\t\tif n==23:\n\t\t\treturn 22\n\t\tif n==24:\n\t\t\treturn 23\n\t\tif n==25:\n\t\t\treturn 24\n\t\tif n==26:\n\t\t\treturn 25\n\t\tif n==27:\n\t\t\treturn 26\n\t\tif n==28:\n\t\t\treturn 27\n\t\tif n==29:\n\t\t\treturn 28\n\t\tif n==30:\n\t\t\treturn 29\n\t\tif n==31:\n\t\t\treturn 30\n\t\tif n==32:\n\t\t\treturn 31\n\t\tif n==33:\n\t\t\treturn 32\n\t\tif n==34:\n\t\t\treturn 33\n\t\tif n==35:\n\t\t\treturn 34\n\t\tif n==36:\n\t\t\treturn 3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif n==1:\n\t\t\treturn 0\n\t\tif n==2:\n\t\t\treturn 1\n\t\tif n==3:\n\t\t\treturn 2\n\t\tif n==4:\n\t\t\treturn 3\n\t\tif n==5:\n\t\t\treturn 4\n\t\tif n==6:\n\t\t\treturn 5\n\t\tif n==7:\n\t\t\treturn 6\n\t\tif n==8:\n\t\t\treturn 7\n\t\tif n==9:\n\t\t\treturn 8\n\t\tif n==10:\n\t\t\treturn 9\n\t\tif n==11:\n\t\t\treturn 10\n\t\tif n==12:\n\t\t\treturn 11\n\t\tif n==13:\n\t\t\treturn 12\n\t\tif n==14:\n\t\t\treturn 13\n\t\tif n==15:\n\t\t\treturn 14\n\t\tif n==16:\n\t\t\treturn 15\n\t\tif n==17:\n\t\t\treturn 16\n\t\tif n==18:\n\t\t\treturn 17\n\t\tif n==19:\n\t\t\treturn 18\n\t\tif n==20:\n\t\t\treturn 19\n\t\tif n==21:\n\t\t\treturn 20\n\t\tif n==22:\n\t\t\treturn 21\n\t\tif n==23:\n\t\t\treturn 22\n\t\tif n==24:\n\t\t\treturn 23\n\t\tif n==25:\n\t\t\treturn 24\n\t\tif n==26:\n\t\t\treturn 25\n\t\tif n==27:\n\t\t\treturn 26\n\t\tif n==28:\n\t\t\treturn 27\n\t\tif n==29:\n\t\t\treturn 28\n\t\tif n==30:\n\t\t\treturn 29\n\t\tif n==31:\n\t\t\treturn 30\n\t\tif n==32:\n\t\t\treturn 31\n\t\tif n==33:\n\t\t\treturn 32\n\t\tif n==34:\n\t\t\treturn 33\n\t\tif n==35:\n\t\t\treturn 34\n\t\tif n==36:\n\t\t\treturn 3"}
{"ID": 203, "source": "MBPP:804", "prompt": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n): \n\t\t# code here \n\t\tif n==1:\n\t\t\treturn True\n\t\tif n==2:\n\t\t\treturn arr[0]%2==0\n\t\tif n==3:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0\n\t\tif n==4:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0\n\t\tif n==5:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0\n\t\tif n==6:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0\n\t\tif n==7:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0\n\t\tif n==8:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0 and arr[7]%2==0\n\t\tif n==9:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0 and arr[7]%2==0 and arr[8]%2==0\n\t\tif n==10:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif n==3:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0\n\t\tif n==4:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0\n\t\tif n==5:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0\n\t\tif n==6:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0\n\t\tif n==7:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0\n\t\tif n==8:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0 and arr[7]%2==0\n\t\tif n==9:\n\t\t\treturn arr[0]%2==0 and arr[1]%2==0 and arr[2]%2==0 and arr[3]%2==0 and arr[4]%2==0 and arr[5]%2==0 and arr[6]%2==0 and arr[7]%2==0 and arr[8]%2==0"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(sample, string)\n\n\"\"\"\nWrite a function to check if the given string ends with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only digits using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only lowercase alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only uppercase alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[A-Z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphabets and digits using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters and spaces using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9 ]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters and spaces using regex.\n\"\"\"\ndef check_substring(string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(sample, string)\n\n\"\"\"\nWrite a function to check if the given string ends with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.search(sample, string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only digits using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only lowercase alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only uppercase alphabets using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[A-Z]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphabets and digits using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters and spaces using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t\treturn re.match(r'^[a-zA-Z0-9 ]+$', string)\n\n\"\"\"\nWrite a function to check if the given string contains only alphanumeric characters and spaces using regex.\n\"\"\"\ndef check_substring(string"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t\n    # Your code here\n    # return the second most repeated string\n    # if there is no second most repeated string, return -1\n    # if there is a tie, return the first one\n    # if there is no repeated string, return -1\n    # if there is only one repeated string, return -1\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    # if there is no second most repeated string, return -1\n    # if there is a tie, return the first one\n    # if there is no repeated string, return -1\n    # if there is only one repeated string, return -1\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only one repeated string, return the string\n    # if there is only"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t\n    # Write your code here.\n    return int(re.findall(r'\\d+', input)[-1])\n\nprint(extract_max(\"My phone number is 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(extract_max(\"My phone number is 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789. 212-345-6789\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789. 212-345-6789. 212-345-6789.\"))\nprint(extract_max(\"My phone number is 212-345-6789. Call me when it's convenient. 212-345-6789"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t\treturn list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get the first key in a dictionary.\n\"\"\"\ndef get_first_key(dict): \n\t\treturn list(dict.keys())[0]\n\n\"\"\"\nWrite a function to get the last key in a dictionary.\n\"\"\"\ndef get_last_key(dict): \n\t\treturn list(dict.keys())[-1]\n\n\"\"\"\nWrite a function to get the first value in a dictionary.\n\"\"\"\ndef get_first_value(dict): \n\t\treturn list(dict.values())[0]\n\n\"\"\"\nWrite a function to get the last value in a dictionary.\n\"\"\"\ndef get_last_value(dict): \n\t\treturn list(dict.values())[-1]\n\n\"\"\"\nWrite a function to get the first key-value pair in a dictionary.\n\"\"\"\ndef get_first_key_value(dict): \n\t\treturn list(dict.items())[0]\n\n\"\"\"\nWrite a function to get the last key-value pair in a dictionary.\n\"\"\"\ndef get_last_key_value(dict): \n\t\treturn list(dict.items())[-1]\n\n\"\"\"\nWrite a function to get the length of a dictionary.\n\"\"\"\ndef get_length(dict): \n\t\treturn len(dict)\n\n\"\"\"\nWrite a function to get the sum of all values in a dictionary.\n\"\"\"\ndef get_sum(dict): \n\t\treturn sum(dict.values())\n\n\"\"\"\nWrite a function to get the average of all values in a dictionary.\n\"\"\"\ndef get_average(dict): \n\t\treturn sum(dict.values())/len(dict)\n\n\"\"\"\nWrite a function to get the maximum value in a dictionary.\n\"\"\"\ndef get_max(dict): \n\t\treturn max(dict.values())\n\n\"\"\"\nWrite a function to get the minimum value in a dictionary.\n\"\"\"\ndef get_min(dict): \n\t\treturn min(dict.values())\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(dict.keys())\n\n\"\"\"\nWrite a function to get dictionary values as a list.\n\"\"\"\ndef get_value(dict): \n\t\treturn list(dict.values())\n\n\"\"\"\nWrite a function to get dictionary keys and values as a list.\n\"\"\"\ndef get_key_value(dict): \n\t\treturn list(dict.items())\n\n\"\"\"\nWrite a function to get the first key in a dictionary.\n\"\"\"\ndef get_first_key(dict): \n\t\treturn list(dict.keys())[0]\n\n\"\"\"\nWrite a function to get the last key in a dictionary.\n\"\"\"\ndef get_last_key(dict): \n\t\treturn list(dict.keys())[-1]\n\n\"\"\"\nWrite a function to get the first value in a dictionary.\n\"\"\"\ndef get_first_value(dict): \n\t\treturn list(dict.values())[0]\n\n\"\"\"\nWrite a function to get the last value in a dictionary.\n\"\"\"\ndef get_last_value(dict): \n\t\treturn list(dict.values())[-1]\n\n\"\"\"\nWrite a function to get the first key-value pair in a dictionary.\n\"\"\"\ndef get_first_key_value(dict): \n\t\treturn list(dict.items())[0]\n\n\"\"\"\nWrite a function to get the last key-value pair in a dictionary.\n\"\"\"\ndef get_last_key_value(dict): \n\t\treturn list(dict.items())[-1]\n\n\"\"\"\nWrite a function to get the length of a dictionary.\n\"\"\"\ndef get_length(dict): \n\t\treturn len(dict)\n\n\"\"\"\nWrite a function to get the sum of all values in a dictionary.\n\"\"\"\ndef get_sum(dict): \n\t\treturn sum(dict.values())\n\n\"\"\"\nWrite a function to get the average of all values in a dictionary.\n\"\"\"\ndef get_average(dict): \n\t\treturn sum(dict.values())/len(dict)\n\n\"\"\"\nWrite a function to get the maximum value in a dictionary.\n\"\"\"\ndef get_max(dict): \n\t\treturn max(dict.values())\n\n\"\"\"\nWrite a function to get the minimum value in a dictionary.\n\"\"\"\ndef get_min(dict): "}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t\treturn (y2-y1)/(x2-x1)\n\n\"\"\"\nWrite a python function to compute the distance between the points (x1, y1) and (x2, y2).\n\"\"\"\ndef distance(x1,y1,x2,y2): \n\t\treturn ((x2-x1)**2+(y2-y1)**2)**0.5\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a circle K((0, 0), 5).\n\"\"\"\ndef in_circle(x,y): \n\t\treturn (x**2+y**2)<=5**2\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a rectangle R(top=1, left=-1, width=6, height=2).\n\"\"\"\ndef in_rectangle(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a triangle T(a, b, c).\n\"\"\"\ndef in_triangle(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a trapezoid T(a, b, c, d).\n\"\"\"\ndef in_trapezoid(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a parallelogram P(a, b, c, d).\n\"\"\"\ndef in_parallelogram(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a regular polygon N(sides, length, x, y).\n\"\"\"\ndef in_polygon(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to compute the distance between the points (x1, y1) and (x2, y2).\n\"\"\"\ndef distance(x1,y1,x2,y2): \n\t\treturn ((x2-x1)**2+(y2-y1)**2)**0.5\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a circle K((0, 0), 5).\n\"\"\"\ndef in_circle(x,y): \n\t\treturn (x**2+y**2)<=5**2\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a rectangle R(top=1, left=-1, width=6, height=2).\n\"\"\"\ndef in_rectangle(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a triangle T(a, b, c).\n\"\"\"\ndef in_triangle(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a trapezoid T(a, b, c, d).\n\"\"\"\ndef in_trapezoid(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a parallelogram P(a, b, c, d).\n\"\"\"\ndef in_parallelogram(x,y): \n\t\treturn (x>=1 and x<=5) and (y>=1 and y<=3) and (x+y<=8)\n\n\"\"\"\nWrite a python function to check whether a point (x, y) is in a regular polygon N(sides, length, x, y).\n\"\"\"\ndef in_polygon(x,y): \n\t\treturn (x>=1 and x<=5) and (y>="}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_2(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_3(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_4(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_5(a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_2(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_3(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) \n\t\t\tmax_so_far = max(max_so_far, max_ending_here) \n\t\treturn max_so_far \n\n\"\"\"\nWrite a function to find length of the subarray having maximum sum in a given array.\n\"\"\"\ndef max_sub_array_sum_4(a,size): \n\t\tmax_so_far = a[0] \n\t\tmax_ending_here = a[0] \n\t\tfor i in range(1, size): \n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i]) "}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\treturn sorted(tup, key = lambda x: x[0]) \n\n\"\"\"\nWrite a function to sort the tuples by the second item of each tuple.\n\"\"\"\ndef sort_tuple_by_second_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[1]) \n\n\"\"\"\nWrite a function to sort the tuples by the third item of each tuple.\n\"\"\"\ndef sort_tuple_by_third_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[2]) \n\n\"\"\"\nWrite a function to sort the tuples by the fourth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fourth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[3]) \n\n\"\"\"\nWrite a function to sort the tuples by the fifth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fifth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[4]) \n\n\"\"\"\nWrite a function to sort the tuples by the sixth item of each tuple.\n\"\"\"\ndef sort_tuple_by_sixth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[5]) \n\n\"\"\"\nWrite a function to sort the tuples by the seventh item of each tuple.\n\"\"\"\ndef sort_tuple_by_seventh_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[6]) \n\n\"\"\"\nWrite a function to sort the tuples by the eighth item of each tuple.\n\"\"\"\ndef sort_tuple_by_eighth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[7]) \n\n\"\"\"\nWrite a function to sort the tuples by the ninth item of each tuple.\n\"\"\"\ndef sort_tuple_by_ninth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[8]) \n\n\"\"\"\nWrite a function to sort the tuples by the tenth item of each tuple.\n\"\"\"\ndef sort_tuple_by_tenth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[9]) \n\n\"\"\"\nWrite a function to sort the tuples by the eleventh item of each tuple.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to sort the tuples by the second item of each tuple.\n\"\"\"\ndef sort_tuple_by_second_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[1]) \n\n\"\"\"\nWrite a function to sort the tuples by the third item of each tuple.\n\"\"\"\ndef sort_tuple_by_third_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[2]) \n\n\"\"\"\nWrite a function to sort the tuples by the fourth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fourth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[3]) \n\n\"\"\"\nWrite a function to sort the tuples by the fifth item of each tuple.\n\"\"\"\ndef sort_tuple_by_fifth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[4]) \n\n\"\"\"\nWrite a function to sort the tuples by the sixth item of each tuple.\n\"\"\"\ndef sort_tuple_by_sixth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[5]) \n\n\"\"\"\nWrite a function to sort the tuples by the seventh item of each tuple.\n\"\"\"\ndef sort_tuple_by_seventh_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[6]) \n\n\"\"\"\nWrite a function to sort the tuples by the eighth item of each tuple.\n\"\"\"\ndef sort_tuple_by_eighth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[7]) \n\n\"\"\"\nWrite a function to sort the tuples by the ninth item of each tuple.\n\"\"\"\ndef sort_tuple_by_ninth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[8]) \n\n\"\"\"\nWrite a function to sort the tuples by the tenth item of each tuple.\n\"\"\"\ndef sort_tuple_by_tenth_item(tup): \n\t\treturn sorted(tup, key = lambda x: x[9]) \n\n\"\"\"\nWrite a function to sort the tuples by the eleventh item of each tuple.\n"}
{"ID": 239, "source": "MBPP:840", "prompt": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\"\"\"\ndef Check_Solution(a,b,c):  \n\t\tif a == 0:  \n\t\t\treturn \"Roots are not real\"  \n\t\telse:  \n\t\t\td = b**2 - 4*a*c  \n\t\t\tif d < 0:  \n\t\t\t\treturn \"Roots are not real\"  \n\t\t\telse:  \n\t\t\t\tx1 = (-b + math.sqrt(d))/(2*a)  \n\t\t\t\tx2 = (-b - math.sqrt(d))/(2*a)  \n\t\t\t\tif x1 == x2:  \n\t\t\t\t\treturn \"Roots are equal\"  \n\t\t\t\telse:  \n\t\t\t\t\tif x1*x2 < 0:  \n\t\t\t\t\t\treturn \"Roots are opposite in sign\"  \n\t\t\t\t\telse:  \n\t\t\t\t\t\treturn \"Roots are not opposite in sign\"  \nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,3,2))\nprint(Check_Solution(1,4,3))\nprint(Check_Solution(1,5,4))\nprint(Check_Solution(1,6,5))\nprint(Check_Solution(1,7,6))\nprint(Check_Solution(1,8,7))\nprint(Check_Solution(1,9,8))\nprint(Check_Solution(1,10,9))\nprint(Check_Solution(1,11,10))\nprint(Check_Solution(1,12,11))\nprint(Check_Solution(1,13,12))\nprint(Check_Solution(1,14,13))\nprint(Check_Solution(1,15,14))\nprint(Check_Solution(1,16,15))\nprint(Check_Solution(1,17,16))\nprint(Check_Solution(1,18,17))\nprint(Check_Solution(1,19,18))\nprint(Check_Solution(1,20,19))\nprint(Check_Solution(1,21,20))\nprint(Check_Solution(1,22,21))\nprint(Check_Solution(1,23,22))\nprint(Check_Solution(1,24,23))\nprint(Check_Solution(1,25,24))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Check_Solution(1,2,1))\nprint(Check_Solution(1,3,2))\nprint(Check_Solution(1,4,3))\nprint(Check_Solution(1,5,4))\nprint(Check_Solution(1,6,5))\nprint(Check_Solution(1,7,6))\nprint(Check_Solution(1,8,7))\nprint(Check_Solution(1,9,8))\nprint(Check_Solution(1,10,9))\nprint(Check_Solution(1,11,10))\nprint(Check_Solution(1,12,11))\nprint(Check_Solution(1,13,12))\nprint(Check_Solution(1,14,13))\nprint(Check_Solution(1,15,14))\nprint(Check_Solution(1,16,15))\nprint(Check_Solution(1,17,16))\nprint(Check_Solution(1,18,17))\nprint(Check_Solution(1,19,18))\nprint(Check_Solution(1,20,19))\nprint(Check_Solution(1,21,20))\nprint(Check_Solution(1,22,21))\nprint(Check_Solution(1,23,22))\nprint(Check_Solution(1,24,23))\nprint(Check_Solution(1,25,24))\nprint("}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t\t# code here \n\t\tif k == 1:\n\t\t\treturn 1\n\t\tif k == 2:\n\t\t\treturn 2\n\t\tif k == 3:\n\t\t\treturn 3\n\t\tif k == 4:\n\t\t\treturn 5\n\t\tif k == 5:\n\t\t\treturn 8\n\t\tif k == 6:\n\t\t\treturn 13\n\t\tif k == 7:\n\t\t\treturn 21\n\t\tif k == 8:\n\t\t\treturn 34\n\t\tif k == 9:\n\t\t\treturn 55\n\t\tif k == 10:\n\t\t\treturn 89\n\t\tif k == 11:\n\t\t\treturn 144\n\t\tif k == 12:\n\t\t\treturn 233\n\t\tif k == 13:\n\t\t\treturn 377\n\t\tif k == 14:\n\t\t\treturn 610\n\t\tif k == 15:\n\t\t\treturn 987\n\t\tif k == 16:\n\t\t\treturn 1597\n\t\tif k == 17:\n\t\t\treturn 2584\n\t\tif k == 18:\n\t\t\treturn 4181\n\t\tif k == 19:\n\t\t\treturn 6765\n\t\tif k == 20:\n\t\t\treturn 10946\n\t\tif k == 21:\n\t\t\treturn 17711\n\t\tif k == 22:\n\t\t\treturn 28657\n\t\tif k == 23:\n\t\t\treturn 46368\n\t\tif k == 24:\n\t\t\treturn 75025\n\t\tif k == 25:\n\t\t\treturn 121393\n\t\tif k == 26:\n\t\t\treturn 196418\n\t\tif k == 27:\n\t\t\treturn 317811\n\t\tif k == 28:\n\t\t\treturn 514229\n\t\tif k == 29:\n\t\t\treturn 832040\n\t\tif k == 30:\n\t\t\treturn 1346269\n\t\tif k == 31:\n\t\t\treturn 217830", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif k == 1:\n\t\t\treturn 1\n\t\tif k == 2:\n\t\t\treturn 2\n\t\tif k == 3:\n\t\t\treturn 3\n\t\tif k == 4:\n\t\t\treturn 5\n\t\tif k == 5:\n\t\t\treturn 8\n\t\tif k == 6:\n\t\t\treturn 13\n\t\tif k == 7:\n\t\t\treturn 21\n\t\tif k == 8:\n\t\t\treturn 34\n\t\tif k == 9:\n\t\t\treturn 55\n\t\tif k == 10:\n\t\t\treturn 89\n\t\tif k == 11:\n\t\t\treturn 144\n\t\tif k == 12:\n\t\t\treturn 233\n\t\tif k == 13:\n\t\t\treturn 377\n\t\tif k == 14:\n\t\t\treturn 610\n\t\tif k == 15:\n\t\t\treturn 987\n\t\tif k == 16:\n\t\t\treturn 1597\n\t\tif k == 17:\n\t\t\treturn 2584\n\t\tif k == 18:\n\t\t\treturn 4181\n\t\tif k == 19:\n\t\t\treturn 6765\n\t\tif k == 20:\n\t\t\treturn 10946\n\t\tif k == 21:\n\t\t\treturn 17711\n\t\tif k == 22:\n\t\t\treturn 28657\n\t\tif k == 23:\n\t\t\treturn 46368\n\t\tif k == 24:\n\t\t\treturn 75025\n\t\tif k == 25:\n\t\t\treturn 121393\n\t\tif k == 26:\n\t\t\treturn 196418\n\t\tif k == 27:\n\t\t\treturn 317811\n\t\tif k == 28:\n\t\t\treturn 514229\n\t\tif k == 29:\n\t\t\treturn 832040\n\t\tif k == 30:\n\t\t\treturn 1346269\n\t\tif k == 31:\n\t\t\treturn 217830"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return list(xs)\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return list(xs)\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0:1]\n\n\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[0:1][0:1][0:1][0:1][0:1][0]\n"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given sides.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\tif a+b>c and b+c>a and a+c>b: "}
{"ID": 251, "source": "MBPP:852", "prompt": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t", "predict": "\"\"\"\nWrite a python function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list): \n\t\treturn [x for x in num_list if x >= 0]\n\nprint(remove_negs([1,2,-3,4,-5,6]))\nprint(remove_negs([1,2,3,4,5,6]))\n\n\"\"\"\nWrite a python function to remove duplicates from a list.\n\"\"\"\ndef remove_dup(num_list): \n\t\treturn list(set(num_list))\n\nprint(remove_dup([1,2,3,4,5,6,1,2,3,4,5,6]))\nprint(remove_dup([1,2,3,4,5,6]))\n\n\"\"\"\nWrite a python function to find the intersection of two lists.\n\"\"\"\ndef intersection(list1, list2): \n\t\treturn list(set(list1) & set(list2))\n\nprint(intersection([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(intersection([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the union of two lists.\n\"\"\"\ndef union(list1, list2): \n\t\treturn list(set(list1) | set(list2))\n\nprint(union([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(union([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference(list1, list2): \n\t\treturn list(set(list1) ^ set(list2))\n\nprint(symmetric_difference([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(symmetric_difference([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the difference of two lists.\n\"\"\"\ndef difference(list1, list2): \n\t\treturn list(set(list1) - set(list2))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(remove_dup([1,2,3,4,5,6,1,2,3,4,5,6]))\nprint(remove_dup([1,2,3,4,5,6]))\n\n\"\"\"\nWrite a python function to find the intersection of two lists.\n\"\"\"\ndef intersection(list1, list2): \n\t\treturn list(set(list1) & set(list2))\n\nprint(intersection([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(intersection([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the union of two lists.\n\"\"\"\ndef union(list1, list2): \n\t\treturn list(set(list1) | set(list2))\n\nprint(union([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(union([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference(list1, list2): \n\t\treturn list(set(list1) ^ set(list2))\n\nprint(symmetric_difference([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(symmetric_difference([1,2,3,4,5,6], [1,2,3,4,5,7]))\n\n\"\"\"\nWrite a python function to find the difference of two lists."}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1): \n\t\t\tif n % i == 0 and i % 2!= 0: \n\t\t\t\tsum = sum + i \n\t\treturn sum\n\nprint(sum_of_odd_Factors(15))\nprint(sum_of_odd_Factors(10))\nprint(sum_of_odd_Factors(1))\nprint(sum_of_odd_Factors(2))\nprint(sum_of_odd_Factors(3))\nprint(sum_of_odd_Factors(4))\nprint(sum_of_odd_Factors(5))\nprint(sum_of_odd_Factors(6))\nprint(sum_of_odd_Factors(7))\nprint(sum_of_odd_Factors(8))\nprint(sum_of_odd_Factors(9))\nprint(sum_of_odd_Factors(10))\nprint(sum_of_odd_Factors(11))\nprint(sum_of_odd_Factors(12))\nprint(sum_of_odd_Factors(13))\nprint(sum_of_odd_Factors(14))\nprint(sum_of_odd_Factors(15))\nprint(sum_of_odd_Factors(16))\nprint(sum_of_odd_Factors(17))\nprint(sum_of_odd_Factors(18))\nprint(sum_of_odd_Factors(19))\nprint(sum_of_odd_Factors(20))\nprint(sum_of_odd_Factors(21))\nprint(sum_of_odd_Factors(22))\nprint(sum_of_odd_Factors(23))\nprint(sum_of_odd_Factors(24))\nprint(sum_of_odd_Factors(25))\nprint(sum_of_odd_Factors(26))\nprint(sum_of_odd_Factors(27))\nprint(sum_of_odd_Factors(28))\nprint(sum_of_odd_Factors(29))\nprint(sum_of_odd_Factors(30))\nprint(sum_of_odd_Factors(31))\nprint(sum_of_odd_Factors(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_of_odd_Factors(15))\nprint(sum_of_odd_Factors(10))\nprint(sum_of_odd_Factors(1))\nprint(sum_of_odd_Factors(2))\nprint(sum_of_odd_Factors(3))\nprint(sum_of_odd_Factors(4))\nprint(sum_of_odd_Factors(5))\nprint(sum_of_odd_Factors(6))\nprint(sum_of_odd_Factors(7))\nprint(sum_of_odd_Factors(8))\nprint(sum_of_odd_Factors(9))\nprint(sum_of_odd_Factors(10))\nprint(sum_of_odd_Factors(11))\nprint(sum_of_odd_Factors(12))\nprint(sum_of_odd_Factors(13))\nprint(sum_of_odd_Factors(14))\nprint(sum_of_odd_Factors(15))\nprint(sum_of_odd_Factors(16))\nprint(sum_of_odd_Factors(17))\nprint(sum_of_odd_Factors(18))\nprint(sum_of_odd_Factors(19))\nprint(sum_of_odd_Factors(20))\nprint(sum_of_odd_Factors(21))\nprint(sum_of_odd_Factors(22))\nprint(sum_of_odd_Factors(23))\nprint(sum_of_odd_Factors(24))\nprint(sum_of_odd_Factors(25))\nprint(sum_of_odd_Factors(26))\nprint(sum_of_odd_Factors(27))\nprint(sum_of_odd_Factors(28))\nprint(sum_of_odd_Factors(29))\nprint(sum_of_odd_Factors(30))\nprint(sum_of_odd_Factors(31))\nprint(sum_of_odd_Factors("}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t\tif x%2!=0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check for prime number.\n\"\"\"\ndef check_Prime(x): \n\t\tif x==2:\n\t\t\treturn True\n\t\telif x%2==0:\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(3,x):\n\t\t\t\tif x%i==0:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included).\n\"\"\"\ndef print_Prime(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using FOR LOOP.\n\"\"\"\ndef print_Prime_For(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i,end=\" \")\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using WHILE LOOP.\n\"\"\"\ndef print_Prime_While(x): \n\t\ti=1\n\t\twhile i<=x:\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i,end=\" \")\n\t\t\ti+=1\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using LIST COMPREHENSION.\n\"\"\"\ndef print_Prime_List(x): \n\t\tprint([i for i in range(1,x+1) if check_Prime(i)])\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using GENERATOR.\n\"\"\"\ndef print_Prime_Generator(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tyield i\n\n\"\"\"\nWrite a python function to print all the prime numbers", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\tif x%i==0:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included).\n\"\"\"\ndef print_Prime(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using FOR LOOP.\n\"\"\"\ndef print_Prime_For(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i,end=\" \")\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using WHILE LOOP.\n\"\"\"\ndef print_Prime_While(x): \n\t\ti=1\n\t\twhile i<=x:\n\t\t\tif check_Prime(i):\n\t\t\t\tprint(i,end=\" \")\n\t\t\ti+=1\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using LIST COMPREHENSION.\n\"\"\"\ndef print_Prime_List(x): \n\t\tprint([i for i in range(1,x+1) if check_Prime(i)])\n\n\"\"\"\nWrite a python function to print all the prime numbers between 1-100 (both included) using GENERATOR.\n\"\"\"\ndef print_Prime_Generator(x): \n\t\tfor i in range(1,x+1):\n\t\t\tif check_Prime(i):\n\t\t\t\tyield i\n"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count**2\n\n\"\"\"\nWrite a function to count number of integers in a given list of lists.\n\"\"\"\ndef count_int(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == int:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of strings in a given list of lists.\n\"\"\"\ndef count_str(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == str:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of tuples in a given list of lists.\n\"\"\"\ndef count_tuple(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == tuple:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of sets in a given list of lists.\n\"\"\"\ndef count_set(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == set:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of frozensets in a given list of lists.\n\"\"\"\ndef count_frozenset(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == frozenset:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of dictionaries in a given list of lists.\n\"\"\"\ndef count_dict(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == dict:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of functions in a given list of lists.\n\"\"\"\ndef count_function(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == type(lambda x: x):\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == list:\n\t\t\t\tcount += 1\n\t\treturn count**2\n\n\"\"\"\nWrite a function to count number of integers in a given list of lists.\n\"\"\"\ndef count_int(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == int:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of strings in a given list of lists.\n\"\"\"\ndef count_str(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == str:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of tuples in a given list of lists.\n\"\"\"\ndef count_tuple(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == tuple:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of sets in a given list of lists.\n\"\"\"\ndef count_set(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == set:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of frozensets in a given list of lists.\n\"\"\"\ndef count_frozenset(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == frozenset:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of dictionaries in a given list of lists.\n\"\"\"\ndef count_dict(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:\n\t\t\tif type(i) == dict:\n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to count number of functions in a given list of lists.\n\"\"\"\ndef count_function(input_list): \n\t\tcount = 0\n\t\tfor i in input_list:"}
{"ID": 259, "source": "MBPP:860", "prompt": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t", "predict": "\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[a-zA-Z0-9]*$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid email or not using regex.\n\"\"\"\ndef check_email(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid phone number or not using regex.\n\"\"\"\ndef check_phone_number(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{10}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid PAN or not using regex.\n\"\"\"\ndef check_pan(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[A-Z]{5}[0-9]{4}[A-Z]{1}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid Aadhar number or not using regex.\n\"\"\"\ndef check_aadhar(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{12}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid passport number or not using regex.\n\"\"\"\ndef check_passport(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[A-Za-z]{3}[0-9]{7}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid pin code or not using regex.\n\"\"\"\ndef check_pin_code(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{6}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid credit card number or not using regex.\n\"\"\"\ndef check_credit_card(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Write your code here.\n\t\treturn bool(re.search(r'^[a-zA-Z0-9]*$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid email or not using regex.\n\"\"\"\ndef check_email(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid phone number or not using regex.\n\"\"\"\ndef check_phone_number(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{10}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid PAN or not using regex.\n\"\"\"\ndef check_pan(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[A-Z]{5}[0-9]{4}[A-Z]{1}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid Aadhar number or not using regex.\n\"\"\"\ndef check_aadhar(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{12}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid passport number or not using regex.\n\"\"\"\ndef check_passport(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[A-Za-z]{3}[0-9]{7}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid pin code or not using regex.\n\"\"\"\ndef check_pin_code(string): \n\t\t# Write your code here.\n\t\treturn bool(re.search(r'^[0-9]{6}$', string))\n\n\"\"\"\nWrite a function to check whether the given string is a valid credit card number or not using regex.\n\"\"\"\ndef check_credit_card(string): "}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t\tif monthname2 == \"January\" or monthname2 == \"March\" or monthname2 == \"May\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"October\" or monthname2 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumb2(monthname2):\n\t\tif monthname2 == \"April\" or monthname2 == \"June\" or monthname2 == \"September\" or monthname2 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 28 or 29 days or not.\n\"\"\"\ndef check_monthnumb3(monthname2):\n\t\tif monthname2 == \"February\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear2(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear3(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear2(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given year is a leap year or not.\n\"\"\"\ndef check_leapyear3(year):\n\t\tif year % 4 == 0:\n\t\t\tif year % 100 == 0:\n\t\t\t\tif year % 400 == 0:\n\t\t\t\t\treturn True\n\t\t\t\telse:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\t\telse:\n\t\t"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t\treturn len(a.split()[-1])\n\n\"\"\"\nWrite a python function to find all the numbers in a given string.\n\"\"\"\ndef find_Numbers(a): \n\t\treturn [int(i) for i in a.split() if i.isdigit()]\n\n\"\"\"\nWrite a python function to find all the even numbers in a given list.\n\"\"\"\ndef find_Even_Numbers(a): \n\t\treturn [i for i in a if i%2==0]\n\n\"\"\"\nWrite a python function to find all the odd numbers in a given list.\n\"\"\"\ndef find_Odd_Numbers(a): \n\t\treturn [i for i in a if i%2!=0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_7(a): \n\t\treturn [i for i in a if i%7==0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 5 and 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_And_7(a): \n\t\treturn [i for i in a if i%5==0 and i%7==0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 5 or 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_Or_7(a): \n\t\treturn [i for i in a if i%5==0 or i%7==0]\n\n\"\"\"\nWrite a python function to find all the prime numbers in a given list.\n\"\"\"\ndef find_Prime_Numbers(a): \n\t\treturn [i for i in a if i>1 and all(i%j!=0 for j in range(2,i))]\n\n\"\"\"\nWrite a python function to find all the numbers which are divisible by 5 and 6 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_And_6(a): \n\t\treturn [i for i in a if i%5==0 and i%6==0]\n\n\"\"\"\nWrite a python function to find all the numbers which are divisible by 5 or 6 in a given list.\n\"\"\"\ndef find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(a.split()[-1])\n\n\"\"\"\nWrite a python function to find all the numbers in a given string.\n\"\"\"\ndef find_Numbers(a): \n\t\treturn [int(i) for i in a.split() if i.isdigit()]\n\n\"\"\"\nWrite a python function to find all the even numbers in a given list.\n\"\"\"\ndef find_Even_Numbers(a): \n\t\treturn [i for i in a if i%2==0]\n\n\"\"\"\nWrite a python function to find all the odd numbers in a given list.\n\"\"\"\ndef find_Odd_Numbers(a): \n\t\treturn [i for i in a if i%2!=0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_7(a): \n\t\treturn [i for i in a if i%7==0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 5 and 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_And_7(a): \n\t\treturn [i for i in a if i%5==0 and i%7==0]\n\n\"\"\"\nWrite a python function to find all the numbers divisible by 5 or 7 in a given list.\n\"\"\"\ndef find_Numbers_Divisible_By_5_Or_7(a): \n\t\treturn [i for i in a if i%5==0 or i%7==0]\n\n\"\"\"\nWrite a python function to find all the prime numbers in a given list.\n\"\"\"\ndef find_Prime_Numbers(a): "}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the given dictionary.\n\"\"\"\ndef sort_Dict(dct) : \n\t\treturn sorted(dct)\n\n\"\"\"\nWrite a python function to sort the given set.\n\"\"\"\ndef sort_Set(st) : \n\t\treturn sorted(st)\n\n\"\"\"\nWrite a python function to sort the given tuple.\n\"\"\"\ndef sort_Tuple(tp) : \n\t\treturn sorted(tp)\n\n\"\"\"\nWrite a python function to sort the given array.\n\"\"\"\ndef sort_Array(arr) : \n\t\treturn sorted(arr)\n\n\"\"\"\nWrite a python function to sort the given matrix.\n\"\"\"\ndef sort_Matrix(mat) : \n\t\treturn sorted(mat)\n\n\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the given dictionary.\n\"\"\"\ndef sort_Dict(dct) : \n\t\treturn sorted(dct)\n\n\"\"\"\nWrite a python function to sort the given set.\n\"\"\"\ndef sort_Set(st) : \n\t\treturn sorted(st)\n\n\"\"\"\nWrite a python function to sort the given tuple.\n\"\"\"\ndef sort_Tuple(tp) : \n\t\treturn sorted(tp)\n\n\"\"\"\nWrite a python function to sort the given array.\n\"\"\"\ndef sort_Array(arr) : \n\t\treturn sorted(arr)\n\n\"\"\"\nWrite a python function to sort the given matrix.\n\"\"\"\ndef sort_Matrix(mat) : \n\t\treturn sorted(mat)\n\n\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the given dictionary.\n\"\"\"\ndef sort_Dict(dct) : \n\t\treturn sorted(dct)\n\n\"\"\"\nWrite a python function to sort the given set.\n\"\"\"\ndef sort_Set(st) : \n\t\treturn sorted(st)\n\n\"\"\"\nWrite a python function to sort the given tuple.\n\"\"\"\ndef sort_Tuple(tp) : \n\t\treturn sorted(tp)\n\n\"\"\"\nWrite a python function to sort the given array.\n\"\"\"\ndef sort_Array(arr) : \n\t\treturn sorted(arr)\n\n\"\"\"\nWrite a python function to sort the given matrix.\n\"\"\"\ndef sort_Matrix(mat) : \n\t\treturn sorted(mat)\n\n\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the given dictionary.\n\"\"\"\ndef sort_Dict(dct) : \n\t\treturn sorted(dct)\n\n\"\"\"\nWrite a python function to sort the given set.\n\"\"\"\ndef sort_Set(st) : \n\t\treturn sorted(st)\n\n\"\"\"\nWrite a python function to sort the given tuple.\n\"\"\"\ndef sort_Tuple(tp) : \n\t\treturn sorted(tp)\n\n\"\"\"\nWrite a python function to sort the given array.\n\"\"\"\ndef sort_Array(arr) : \n\t\treturn sorted(arr)\n\n\"\"\"\nWrite a python function to sort the given matrix.\n\"\"\"\ndef sort_Matrix(mat) : \n\t\treturn sorted(mat)\n\n\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t\treturn ''.join(sorted(str))\n\n\"\"\"\nWrite a python function to sort the given list of strings.\n\"\"\"\ndef sort_List(lst) : \n\t\treturn sorted(lst)\n\n\"\"\"\nWrite a python function to sort the"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t\tif a == 0 : \n\t\t\tif b == 0 : \n\t\t\t\tif c == 0 : \n\t\t\t\t\treturn 0\n\t\t\t\telse : \n\t\t\t\t\treturn 1\n\t\t\telse : \n\t\t\t\treturn 2\n\t\telse : \n\t\t\tif b**2 - 4*a*c < 0 : \n\t\t\t\treturn 0\n\t\t\telif b**2 - 4*a*c == 0 : \n\t\t\t\treturn 1\n\t\t\telse : \n\t\t\t\treturn 2\n\n\"\"\"\nWrite a python function to find the roots of quadratic equation.\n\"\"\"\ndef Quadratic_Equation(a,b,c) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t\treturn -b/(2*a)\n\telse : \n\t\treturn (-b + (b**2 - 4*a*c)**0.5)/(2*a), (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n\"\"\"\nWrite a python function to find the roots of cubic equation.\n\"\"\"\ndef Cubic_Equation(a,b,c,d) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t\treturn -b/(3*a)\n\telse : \n\t\tx1 = (-b + (b**2 - 3*a*c)**0.5)/(3*a)\n\t\tx2 = (-b - (b**2 - 3*a*c)**0.5)/(3*a)\n\t\tx3 = (-b/(3*a)) - ((b**2 - 3*a*c)**0.5)/(3*a)\n\t\treturn x1, x2, x3\n\n\"\"\"\nWrite a python function to find the roots of quartic equation.\n\"\"\"\ndef Quartic_Equation(a,b,c,d,e) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\t\treturn 1\n\t\t\telse : \n\t\t\t\treturn 2\n\n\"\"\"\nWrite a python function to find the roots of quadratic equation.\n\"\"\"\ndef Quadratic_Equation(a,b,c) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t\treturn -b/(2*a)\n\telse : \n\t\treturn (-b + (b**2 - 4*a*c)**0.5)/(2*a), (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n\"\"\"\nWrite a python function to find the roots of cubic equation.\n\"\"\"\ndef Cubic_Equation(a,b,c,d) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : \n\t\treturn -b/(3*a)\n\telse : \n\t\tx1 = (-b + (b**2 - 3*a*c)**0.5)/(3*a)\n\t\tx2 = (-b - (b**2 - 3*a*c)**0.5)/(3*a)\n\t\tx3 = (-b/(3*a)) - ((b**2 - 3*a*c)**0.5)/(3*a)\n\t\treturn x1, x2, x3\n\n\"\"\"\nWrite a python function to find the roots of quartic equation.\n\"\"\"\ndef Quartic_Equation(a,b,c,d,e) : \n\tif Check_Solution(a,b,c) == 0 : \n\t\treturn \"No solution\"\n\telif Check_Solution(a,b,c) == 1 : "}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t\t# Your code goes here \n\t\t# Return True if all bits are set in the given range \n\t\t# Return False otherwise \n\t\t# Do not print anything \n\t\t# Do not take input from user \n\t\t# Do not use any loops \n\t\t# Do not change the order of the bits \n\t\t# Do not convert the integer to a string \n\t\t# Do not use any bitwise operator \n\t\t# Do not use any conditional statement \n\t\t# Do not use any string methods \n\t\t# Do not use any list methods \n\t\t# Do not use any sorting methods \n\t\t# Do not use any other data structure \n\t\t# Do not use any other library \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t# Do not print anything \n\t\t# Do not take input from user \n\t\t# Do not use any loops \n\t\t# Do not change the order of the bits \n\t\t# Do not convert the integer to a string \n\t\t# Do not use any bitwise operator \n\t\t# Do not use any conditional statement \n\t\t# Do not use any string methods \n\t\t# Do not use any list methods \n\t\t# Do not use any sorting methods \n\t\t# Do not use any other data structure \n\t\t# Do not use any other library \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function \n\t\t# Do not use any other class \n\t\t# Do not use any other module \n\t\t# Do not use any other concept \n\t\t# Do not use any other data type \n\t\t# Do not use any other variable \n\t\t# Do not use any other operator \n\t\t# Do not use any other function"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t\tif len(str1)!= len(str2):\n\t\t\treturn False\n\t\tif len(str1) == 0:\n\t\t\treturn True\n\t\tif str1[0] == str2[0]:\n\t\t\treturn is_Isomorphic(str1[1:],str2[1:])\n\t\telse:\n\t\t\tif str1[1:] in str2[1:]:\n\t\t\t\treturn is_Isomorphic(str1[1:],str2[str2.index(str1[1:])+1:])\n\t\t\telse:\n\t\t\t\treturn False\n\nprint(is_Isomorphic(\"egg\",\"add\"))\nprint(is_Isomorphic(\"foo\",\"bar\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"ab\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Is", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Isomorphic(\"egg\",\"add\"))\nprint(is_Isomorphic(\"foo\",\"bar\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"ab\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Isomorphic(\"aa\",\"aa\"))\nprint(is_Isomorphic(\"aa\",\"bb\"))\nprint(is_Isomorphic(\"aa\",\"ab\"))\nprint(is_Is"}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t\treturn len(str(A)) == len(str(B))\n\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): "}
{"ID": 292, "source": "MBPP:893", "prompt": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[-1] for lst in lst]\n\nprint(Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst): "}
{"ID": 296, "source": "MBPP:897", "prompt": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word): \n\t\tif word in sentence: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn"}
{"ID": 304, "source": "MBPP:905", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of binomial co-efficients.\n\"\"\"\ndef sum_of_binomial(n): \n\t\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef sum_of_square_of_binomial(n): \n\t\treturn (n * (n + 1) * ((2 * n) + 1)) // 6\n\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients."}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\treturn\n\n\tif len(args)!= 1:\n\t\tprint(\n\"\"\"\nUsage:\n\tpython3 lobb.py <number>\n\"\"\"\n\t\t)\n\t\treturn\n\n\tnumber = int(args[0])\n\tif number < 1:\n\t\tprint(\"Number must be greater than 0.\")\n\t\treturn\n\n\tprint(\"Number: {}\".format(number))\n\tprint(\"Lobb Number: {}\".format(lobb_number(number)))\n\tprint(\"Lobb Number (ln): {}\".format(lobb_number_ln(number)))\n\tprint(\"Lobb Number (m): {}\".format(lobb_number_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(\"Number: {}\".format(number))\n\tprint(\"Lobb Number: {}\".format(lobb_number(number)))\n\tprint(\"Lobb Number (ln): {}\".format(lobb_number_ln(number)))\n\tprint(\"Lobb Number (m): {}\".format(lobb_number_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln, m): {}\".format(lobb_number_ln_m(number)))\n\tprint(\"Lobb Number (ln,"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\t# code here \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 927\n    if n == 13:\n        return 1705\n    if n == 14:\n        return 3136\n    if n == 15:\n        return 5768\n    if n == 16:\n        return 10609\n    if n == 17:\n        return 19513\n    if n == 18:\n        return 35890\n    if n == 19:\n        return 66012\n    if n == 20:\n        return 120807\n    if n == 21:\n        return 216009\n    if n == 22:\n        return 390620\n    if n == 23:\n        return 703213\n    if n == 24:\n        return 1262673\n    if n == 25:\n        return 2230079\n    if n == 26:\n        return 3990440\n    if n == 27:\n        return 7244362\n    if n == 28:\n        return 12974488\n    if n == 29:\n        return 22920711\n    if n == 30:\n        return 40423137\n    if n == 31:\n        return 73683713\n    if n == 32:\n        return 131426880\n    if n == ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 927\n    if n == 13:\n        return 1705\n    if n == 14:\n        return 3136\n    if n == 15:\n        return 5768\n    if n == 16:\n        return 10609\n    if n == 17:\n        return 19513\n    if n == 18:\n        return 35890\n    if n == 19:\n        return 66012\n    if n == 20:\n        return 120807\n    if n == 21:\n        return 216009\n    if n == 22:\n        return 390620\n    if n == 23:\n        return 703213\n    if n == 24:\n        return 1262673\n    if n == 25:\n        return 2230079\n    if n == 26:\n        return 3990440\n    if n == 27:\n        return 7244362\n    if n == 28:\n        return 12974488\n    if n == 29:\n        return 22920711\n    if n == 30:\n        return 40423137\n    if n == 31:\n        return 73683713\n    if n == 32:\n        return 131426880"}
{"ID": 328, "source": "MBPP:929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t", "predict": "\"\"\"\nWrite a function to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):  \n\t\tcount = 0\n\t\tfor i in tuplex:\n\t\t\tif i == value:\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),1))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),2))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),3))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),4))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),5))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),6))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),7))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),8))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),9))\nprint(count_tuplex((1,2,3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),1))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),2))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),3))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),4))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),5))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),6))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),7))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),8))\nprint(count_tuplex((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10),9))\nprint(count_tuplex((1,2,3"}
{"ID": 333, "source": "MBPP:934", "prompt": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t", "predict": "\"\"\"\nWrite a function to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m): \n\t\n    # Initialize result \n    res = 0\n    # Initialize current value of nth \n    # delannoy number \n    curr_val = 0\n    # Initialize previous value of nth \n    # delannoy number \n    prev_val = 0\n    # Initialize current value of mth \n    # delannoy number \n    curr_m_val = 0\n    # Initialize previous value of mth \n    # delannoy number \n    prev_m_val = 0\n    # Initialize current value of n-mth \n    # delannoy number \n    curr_nm_val = 0\n    # Initialize previous value of n-mth \n    # delannoy number \n    prev_nm_val = 0\n    # Initialize current value of n+mth \n    # delannoy number \n    curr_np_m_val = 0\n    # Initialize previous value of n+mth \n    # delannoy number \n    prev_np_m_val = 0\n    # Initialize current value of n-m+1th \n    # delannoy number \n    curr_nm_p_val = 0\n    # Initialize previous value of n-m+1th \n    # delannoy number \n    prev_nm_p_val = 0\n    # Initialize current value of n+m-1th \n    # delannoy number \n    curr_np_m_p_val = 0\n    # Initialize previous value of n+m-1th \n    # delannoy number \n    prev_np_m_p_val = 0\n    # Initialize current value of n-m+2th \n    # delannoy number \n    curr_nm_p_p_val = 0\n    # Initialize previous value of n-m+2th \n    # delannoy number \n    prev_nm_p_p_val = 0\n    # Initialize current value of n+m-2th \n    # delannoy number \n    curr_np_m_p_p_val = 0\n    # Initialize previous value of n+m-2th \n    # delannoy number \n    prev_np_m_p_p_val = 0\n    # Initialize current value of n-m+3th \n    # delannoy number \n    curr_nm_p_p_p_val = 0\n    # Initialize previous value of n-m+3th \n    # delannoy number \n    prev_nm_p_p_p_val = ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    # Initialize result \n    res = 0\n    # Initialize current value of nth \n    # delannoy number \n    curr_val = 0\n    # Initialize previous value of nth \n    # delannoy number \n    prev_val = 0\n    # Initialize current value of mth \n    # delannoy number \n    curr_m_val = 0\n    # Initialize previous value of mth \n    # delannoy number \n    prev_m_val = 0\n    # Initialize current value of n-mth \n    # delannoy number \n    curr_nm_val = 0\n    # Initialize previous value of n-mth \n    # delannoy number \n    prev_nm_val = 0\n    # Initialize current value of n+mth \n    # delannoy number \n    curr_np_m_val = 0\n    # Initialize previous value of n+mth \n    # delannoy number \n    prev_np_m_val = 0\n    # Initialize current value of n-m+1th \n    # delannoy number \n    curr_nm_p_val = 0\n    # Initialize previous value of n-m+1th \n    # delannoy number \n    prev_nm_p_val = 0\n    # Initialize current value of n+m-1th \n    # delannoy number \n    curr_np_m_p_val = 0\n    # Initialize previous value of n+m-1th \n    # delannoy number \n    prev_np_m_p_val = 0\n    # Initialize current value of n-m+2th \n    # delannoy number \n    curr_nm_p_p_val = 0\n    # Initialize previous value of n-m+2th \n    # delannoy number \n    prev_nm_p_p_val = 0\n    # Initialize current value of n+m-2th \n    # delannoy number \n    curr_np_m_p_p_val = 0\n    # Initialize previous value of n+m-2th \n    # delannoy number \n    prev_np_m_p_p_val = 0\n    # Initialize current value of n-m+3th \n    # delannoy number \n    curr_nm_p_p_p_val = 0\n    # Initialize previous value of n-m+3th "}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p.\n\"\"\"\ndef nPr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t\treturn (fact(n, p) * fact(r, p) * fact(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of npr mod p."}
{"ID": 353, "source": "MBPP:954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\tif profit > 0:\n\t\t\treturn profit/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tprofit = sale_amount - actual_cost\n\t\t"}
{"ID": 361, "source": "MBPP:962", "prompt": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Even(l,r): \n\t\tsum = 0\n\t\tfor i in range(l,r+1):\n\t\t\tif i%2 == 0:\n\t\t\t\tsum += i\n\t\treturn sum\n\nprint(sum_Even(1,10))\nprint(sum_Even(1,100))\nprint(sum_Even(1,1000))\nprint(sum_Even(1,10000))\nprint(sum_Even(1,100000))\nprint(sum_Even(1,1000000))\nprint(sum_Even(1,10000000))\nprint(sum_Even(1,100000000))\nprint(sum_Even(1,1000000000))\nprint(sum_Even(1,10000000000))\nprint(sum_Even(1,100000000000))\nprint(sum_Even(1,1000000000000))\nprint(sum_Even(1,10000000000000))\nprint(sum_Even(1,100000000000000))\nprint(sum_Even(1,1000000000000000))\nprint(sum_Even(1,10000000000000000))\nprint(sum_Even(1,100000000000000000))\nprint(sum_Even(1,1000000000000000000))\nprint(sum_Even(1,10000000000000000000))\nprint(sum_Even(1,100000000000000000000))\nprint(sum_Even(1,1000000000000000000000))\nprint(sum_Even(1,100", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_Even(1,10))\nprint(sum_Even(1,100))\nprint(sum_Even(1,1000))\nprint(sum_Even(1,10000))\nprint(sum_Even(1,100000))\nprint(sum_Even(1,1000000))\nprint(sum_Even(1,10000000))\nprint(sum_Even(1,100000000))\nprint(sum_Even(1,1000000000))\nprint(sum_Even(1,10000000000))\nprint(sum_Even(1,100000000000))\nprint(sum_Even(1,1000000000000))\nprint(sum_Even(1,10000000000000))\nprint(sum_Even(1,100000000000000))\nprint(sum_Even(1,1000000000000000))\nprint(sum_Even(1,10000000000000000))\nprint(sum_Even(1,100000000000000000))\nprint(sum_Even(1,1000000000000000000))\nprint(sum_Even(1,10000000000000000000))\nprint(sum_Even(1,100000000000000000000))\nprint(sum_Even(1,1000000000000000000000))\nprint(sum_Even(1,100"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\treturn (x**2)-(y**2)-(z**2)\n\n\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\""}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t\tif len(s)%2==0: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is a palindrome or not.\n\"\"\"\ndef palindrome(s): \n\t\treturn s == s[::-1]\n\n\"\"\"\nWrite a python function to check whether the word is a pangram or not.\n\"\"\"\ndef pangram(s): \n\t\treturn set(s.lower()) == set(string.ascii_lowercase)\n\n\"\"\"\nWrite a python function to check whether the word is a permutation of another word or not.\n\"\"\"\ndef permutation(s1, s2): \n\t\treturn sorted(s1.lower()) == sorted(s2.lower())\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the word is a palindrome or not.\n\"\"\"\ndef palindrome(s): \n\t\treturn s == s[::-1]\n\n\"\"\"\nWrite a python function to check whether the word is a pangram or not.\n\"\"\"\ndef pangram(s): \n\t\treturn set(s.lower()) == set(string.ascii_lowercase)\n\n\"\"\"\nWrite a python function to check whether the word is a permutation of another word or not.\n\"\"\"\ndef permutation(s1, s2): \n\t\treturn sorted(s1.lower()) == sorted(s2.lower())\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a superstring of another word or not.\n\"\"\"\ndef superstring(s1, s2): \n\t\treturn s2.lower() in s1.lower()\n\n\"\"\"\nWrite a python function to check whether the word is a substring of another word or not.\n\"\"\"\ndef substring(s1, s2): \n\t\treturn s1.lower() in s2.lower()\n\n\"\"\"\nWrite a python function"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', '", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t\treturn tuple1[0]\n\nprint(remove_empty(L))\n\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', '"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char in vowels: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants.\n\"\"\"\ndef check2(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check3(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check4(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check5(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check6(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check7(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check8(string): \n\t\tvowels = 'ae", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tif char not in vowels: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check3(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check4(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check5(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check6(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels.\n\"\"\"\ndef check7(string): \n\t\tvowels = 'aeiouAEIOU' \n\t\tfor char in string: \n\t\t\tif char not in vowels and char in string: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to accept the strings which contains all consonants and vowels."}
{"ID": 377, "source": "MBPP:14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t", "predict": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"\ndef find_Volume(l,b,h) : \n\t\treturn (l*b*h)/3\n\n\"\"\"\nWrite a python function to find the surface area of a triangular prism.\n\"\"\"\ndef find_SurfaceArea(l,b,h) : \n\t\treturn (2*l*b)+(2*l*h)+(2*b*h)\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (l*b*h)/3\n\n\"\"\"\nWrite a python function to find the surface area of a triangular prism.\n\"\"\"\ndef find_SurfaceArea(l,b,h) : \n\t\treturn (2*l*b)+(2*l*h)+(2*b*h)\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b,h) : \n\t\treturn (l*b*h)*10\n\n\"\"\"\nWrite a python function to find the cost of a triangular prism.\n\"\"\"\ndef find_Cost(l,b"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t\n    # Your code here\n    return string.translate(str.maketrans('', '', second_string))\n\nprint(remove_dirty_chars(\"Hello World\", \"el\"))\nprint(remove_dirty_chars(\"Hello World\", \"l\"))\nprint(remove_dirty_chars(\"Hello World\", \"lo\"))\nprint(remove_dirty_chars(\"Hello World\", \"loW\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWr\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_dirty_chars(\"Hello World\", \"el\"))\nprint(remove_dirty_chars(\"Hello World\", \"l\"))\nprint(remove_dirty_chars(\"Hello World\", \"lo\"))\nprint(remove_dirty_chars(\"Hello World\", \"loW\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWr\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_dirty_chars(\"Hello World\", \"loWrld\"))\nprint(remove_"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t\treturn x%2 == 0\n\n\"\"\"\nWrite a function to check if the given number is even or not.\n\"\"\"\ndef is_even(x): \n\t\treturn x%2 == 0\n\n\"\"\"\nWrite a function to check if the given number is odd or not.\n\"\"\"\ndef is_odd(x): \n\t\treturn x%2 == 1\n\n\"\"\"\nWrite a function to check if the given number is prime or not.\n\"\"\"\ndef is_prime(x): \n\t\tfor i in range(2,x): \n\t\t\tif x%i == 0: \n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given number is perfect or not.\n\"\"\"\ndef is_perfect(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum == x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is abundant or not.\n\"\"\"\ndef is_abundant(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum > x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is deficient or not.\n\"\"\"\ndef is_deficient(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum < x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is perfect square or not.\n\"\"\"\ndef is_perfect_square(x): \n\t\tfor i in range(1,x): \n\t\t\tif i*i == x: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is perfect cube or not.\n\"\"\"\ndef is_perfect_cube(x): \n\t\tfor i in range(1,x): \n\t\t\tif i*i*i == x: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to check if the given number is prime or not.\n\"\"\"\ndef is_prime(x): \n\t\tfor i in range(2,x): \n\t\t\tif x%i == 0: \n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check if the given number is perfect or not.\n\"\"\"\ndef is_perfect(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum == x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is abundant or not.\n\"\"\"\ndef is_abundant(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum > x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is deficient or not.\n\"\"\"\ndef is_deficient(x): \n\t\tsum = 0\n\t\tfor i in range(1,x): \n\t\t\tif x%i == 0: \n\t\t\t\tsum = sum + i\n\t\tif sum < x: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is perfect square or not.\n\"\"\"\ndef is_perfect_square(x): \n\t\tfor i in range(1,x): \n\t\t\tif i*i == x: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check if the given number is perfect cube or not.\n\"\"\"\ndef is_perfect_cube(x): \n\t\tfor i in range(1,x): \n\t\t\tif i*i*i == x: \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a"}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t\treturn [i*n for i in range(1,m+1)]\n\nprint(multiples_of_num(5,2))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) -", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(multiples_of_num(5,2))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) - sum(multiples_of_num(n,15))\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(multiples_of_num(n,3)) + sum(multiples_of_num(n,5)) -"}
{"ID": 387, "source": "MBPP:24", "prompt": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t", "predict": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(binary): \n\t\treturn int(binary, 2)\n\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(decimal): \n\t\treturn bin(decimal)\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hex(decimal): \n\t\treturn hex(decimal)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hex_to_decimal(hexadecimal): \n\t\treturn int(hexadecimal, 16)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hex_to_binary(hexadecimal): \n\t\treturn bin(int(hexadecimal, 16))\n\n\"\"\"\nWrite a function to convert the given binary number to its hexadecimal equivalent.\n\"\"\"\ndef binary_to_hex(binary): \n\t\treturn hex(int(binary, 2))\n\n\"\"\"\nWrite a function to convert the given binary number to its octal equivalent.\n\"\"\"\ndef binary_to_octal(binary): \n\t\treturn oct(int(binary, 2))\n\n\"\"\"\nWrite a function to convert the given octal number to its binary equivalent.\n\"\"\"\ndef octal_to_binary(octal): \n\t\treturn bin(int(octal, 8))\n\n\"\"\"\nWrite a function to convert the given octal number to its decimal equivalent.\n\"\"\"\ndef octal_to_decimal(octal): \n\t\treturn int(octal, 8)\n\n\"\"\"\nWrite a function to convert the given decimal number to its octal equivalent.\n\"\"\"\ndef decimal_to_octal(decimal): \n\t\treturn oct(decimal)\n\n\"\"\"\nWrite a function to convert the given decimal number to its roman equivalent.\n\"\"\"\ndef decimal_to_roman(decimal): \n\t\troman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV',", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\t\troman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV',"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t\t# Your code goes here\n\t\t# return the element\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(n)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Your code goes here\n\t\t# return the element\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(n)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr_size):\n\t\t# \tif arr.count(arr[i])%2!= 0:\n\t\t# \t\treturn arr[i]\n\t\t# return -1\n\t\t# Time complexity O(n)\n\t\t# Space complexity O(1)\n\t\t# arr_size = len(arr)\n\t\t# for i in range(arr"}
{"ID": 393, "source": "MBPP:30", "prompt": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t\tcount = 0\n\t\tfor i in range(len(s)): \n\t\t\tif i < len(s) - 1 and s[i] == s[i + 1]: \n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Substring_With_Equal_Ends(\"abc\"))\nprint(count_Substring_With_Equal_Ends(\"abca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabc\"))\nprint(count_Substring_With_Equal_Ends(\"abcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Substring_With_Equal_Ends(\"abc\"))\nprint(count_Substring_With_Equal_Ends(\"abca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabc\"))\nprint(count_Substring_With_Equal_Ends(\"abcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint(count_Substring_With_Equal_Ends(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\"))\nprint"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t\treturn bin(N)\n\n\"\"\"\nWrite a python function to convert a decimal number to octal number.\n\"\"\"\ndef decimal_To_Octal(N): \n\t\treturn oct(N)\n\n\"\"\"\nWrite a python function to convert a decimal number to hexadecimal number.\n\"\"\"\ndef decimal_To_Hexadecimal(N): \n\t\treturn hex(N)\n\n\"\"\"\nWrite a python function to convert a binary number to decimal number.\n\"\"\"\ndef binary_To_Decimal(N): \n\t\treturn int(N, 2)\n\n\"\"\"\nWrite a python function to convert a octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(N): \n\t\treturn int(N, 8)\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to decimal number.\n\"\"\"\ndef hexadecimal_To_Decimal(N): \n\t\treturn int(N, 16)\n\n\"\"\"\nWrite a python function to convert a binary number to octal number.\n\"\"\"\ndef binary_To_Octal(N): \n\t\treturn oct(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a octal number to binary number.\n\"\"\"\ndef octal_To_Binary(N): \n\t\treturn bin(int(N, 8))\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to binary number.\n\"\"\"\ndef hexadecimal_To_Binary(N): \n\t\treturn bin(int(N, 16))\n\n\"\"\"\nWrite a python function to convert a binary number to hexadecimal number.\n\"\"\"\ndef binary_To_Hexadecimal(N): \n\t\treturn hex(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a octal number to hexadecimal number.\n\"\"\"\ndef octal_To_Hexadecimal(N): \n\t\treturn hex(int(N, 8))\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to octal number.\n\"\"\"\ndef hexadecimal_To_Octal(N): \n\t\treturn oct(int(N, 16))\n\n\"\"\"\nWrite a python function to convert a binary number to hexadecimal number.\n\"\"\"\ndef binary_To_Hexadecimal(N): \n\t\treturn hex(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to convert a decimal number to octal number.\n\"\"\"\ndef decimal_To_Octal(N): \n\t\treturn oct(N)\n\n\"\"\"\nWrite a python function to convert a decimal number to hexadecimal number.\n\"\"\"\ndef decimal_To_Hexadecimal(N): \n\t\treturn hex(N)\n\n\"\"\"\nWrite a python function to convert a binary number to decimal number.\n\"\"\"\ndef binary_To_Decimal(N): \n\t\treturn int(N, 2)\n\n\"\"\"\nWrite a python function to convert a octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(N): \n\t\treturn int(N, 8)\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to decimal number.\n\"\"\"\ndef hexadecimal_To_Decimal(N): \n\t\treturn int(N, 16)\n\n\"\"\"\nWrite a python function to convert a binary number to octal number.\n\"\"\"\ndef binary_To_Octal(N): \n\t\treturn oct(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a octal number to binary number.\n\"\"\"\ndef octal_To_Binary(N): \n\t\treturn bin(int(N, 8))\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to binary number.\n\"\"\"\ndef hexadecimal_To_Binary(N): \n\t\treturn bin(int(N, 16))\n\n\"\"\"\nWrite a python function to convert a binary number to hexadecimal number.\n\"\"\"\ndef binary_To_Hexadecimal(N): \n\t\treturn hex(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a octal number to hexadecimal number.\n\"\"\"\ndef octal_To_Hexadecimal(N): \n\t\treturn hex(int(N, 8))\n\n\"\"\"\nWrite a python function to convert a hexadecimal number to octal number.\n\"\"\"\ndef hexadecimal_To_Octal(N): \n\t\treturn oct(int(N, 16))\n\n\"\"\"\nWrite a python function to convert a binary number to hexadecimal number.\n\"\"\"\ndef binary_To_Hexadecimal(N): \n\t\treturn hex(int(N, 2))\n\n\"\"\"\nWrite a python function to convert a"}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t\t# Your code goes here\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Your code goes here\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers\n\t\t# N is the nth digit\n\t\t# return the nth digit of the fraction\n\t\t# p,q are the two numbers"}
{"ID": 419, "source": "MBPP:56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t", "predict": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"\ndef check(n):    \n\t\treturn n == int(str(n)[::-1]) + 1\n\nprint(check(121))\nprint(check(122))\nprint(check(123))\nprint(check(124))\nprint(check(125))\nprint(check(126))\nprint(check(127))\nprint(check(128))\nprint(check(129))\nprint(check(130))\nprint(check(131))\nprint(check(132))\nprint(check(133))\nprint(check(134))\nprint(check(135))\nprint(check(136))\nprint(check(137))\nprint(check(138))\nprint(check(139))\nprint(check(140))\nprint(check(141))\nprint(check(142))\nprint(check(143))\nprint(check(144))\nprint(check(145))\nprint(check(146))\nprint(check(147))\nprint(check(148))\nprint(check(149))\nprint(check(150))\nprint(check(151))\nprint(check(152))\nprint(check(153))\nprint(check(154))\nprint(check(155))\nprint(check(156))\nprint(check(157))\nprint(check(158))\nprint(check(159))\nprint(check(160))\nprint(check(161))\nprint(check(162))\nprint(check(163))\nprint(check(164))\nprint(check(165))\nprint(check(166))\nprint(check(167))\nprint(check(168))\nprint(check(169))\nprint(check(170))\nprint(check(171))\nprint(check(172))\nprint(check(173))\nprint(check(174))\nprint(check(175))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check(121))\nprint(check(122))\nprint(check(123))\nprint(check(124))\nprint(check(125))\nprint(check(126))\nprint(check(127))\nprint(check(128))\nprint(check(129))\nprint(check(130))\nprint(check(131))\nprint(check(132))\nprint(check(133))\nprint(check(134))\nprint(check(135))\nprint(check(136))\nprint(check(137))\nprint(check(138))\nprint(check(139))\nprint(check(140))\nprint(check(141))\nprint(check(142))\nprint(check(143))\nprint(check(144))\nprint(check(145))\nprint(check(146))\nprint(check(147))\nprint(check(148))\nprint(check(149))\nprint(check(150))\nprint(check(151))\nprint(check(152))\nprint(check(153))\nprint(check(154))\nprint(check(155))\nprint(check(156))\nprint(check(157))\nprint(check(158))\nprint(check(159))\nprint(check(160))\nprint(check(161))\nprint(check(162))\nprint(check(163))\nprint(check(164))\nprint(check(165))\nprint(check(166))\nprint(check(167))\nprint(check(168))\nprint(check(169))\nprint(check(170))\nprint(check(171))\nprint(check(172))\nprint(check(173))\nprint(check(174))\nprint(check(175))"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\n\"\"\"\nWrite a python function to find largest number in a list.\n\"\"\"\ndef largest_num(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_2(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_2(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_3(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_3(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_4(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_4(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_5(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_5(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_6(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_6(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_7(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_7(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_8(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_8", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a python function to find largest number in a list.\n\"\"\"\ndef largest_num(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_2(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_2(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_3(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_3(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_4(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_4(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_5(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_5(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_6(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_6(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_7(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_7(xs):\n  return max(xs)\n\n\n\"\"\"\nWrite a python function to find the smallest number in a list.\n\"\"\"\ndef smallest_num_8(xs):\n  return min(xs)\n\n\n\"\"\"\nWrite a python function to find the largest number in a list.\n\"\"\"\ndef largest_num_8"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t\t# code here \n\t\tif len(A) == 1:\n\t\t\treturn True\n\t\tif len(A) == 2:\n\t\t\treturn True if A[0] <= A[1] else False\n\t\tif len(A) == 3:\n\t\t\treturn True if A[0] <= A[1] <= A[2] else False\n\t\tif len(A) == 4:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] else False\n\t\tif len(A) == 5:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] else False\n\t\tif len(A) == 6:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] else False\n\t\tif len(A) == 7:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] else False\n\t\tif len(A) == 8:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] else False\n\t\tif len(A) == 9:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] else False\n\t\tif len(A) == 10:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] <= A[9] else False\n\t\tif len(A) == 11:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] <= A[9] <= A[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# code here \n\t\tif len(A) == 1:\n\t\t\treturn True\n\t\tif len(A) == 2:\n\t\t\treturn True if A[0] <= A[1] else False\n\t\tif len(A) == 3:\n\t\t\treturn True if A[0] <= A[1] <= A[2] else False\n\t\tif len(A) == 4:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] else False\n\t\tif len(A) == 5:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] else False\n\t\tif len(A) == 6:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] else False\n\t\tif len(A) == 7:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] else False\n\t\tif len(A) == 8:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] else False\n\t\tif len(A) == 9:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] else False\n\t\tif len(A) == 10:\n\t\t\treturn True if A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5] <= A[6] <= A[7] <= A[8] <= A[9] else False\n\t\tif len(A) == 11:"}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_same", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t\tfor i in range(len(colors)):\n\t\t\tif colors[i]!= patterns[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_same"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t\tif len(s)%2==0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\nprint(word_len(\"Hello\"))\nprint(word_len(\"Python\"))\nprint(word_len(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is palindrome or not.\n\"\"\"\ndef palindrome(s): \n\tif s==s[::-1]:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(palindrome(\"Hello\"))\nprint(palindrome(\"Python\"))\nprint(palindrome(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is pangram or not.\n\"\"\"\ndef pangram(s): \n\tif len(set(s.lower()))==26:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(pangram(\"The quick brown fox jumps over the lazy dog\"))\nprint(pangram(\"Python\"))\nprint(pangram(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is anagram or not.\n\"\"\"\ndef anagram(s1,s2): \n\tif sorted(s1.lower())==sorted(s2.lower()):\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(anagram(\"Hello\",\"World\"))\nprint(anagram(\"Python\",\"Ptyon\"))\nprint(anagram(\"Hello World\",\"World Hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is permutation of palindrome or not.\n\"\"\"\ndef permutation_palindrome(s): \n\tif sorted(s.lower())==sorted(s.lower())[::-1]:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(permutation_palindrome(\"Hello\"))\nprint(permutation_palindrome(\"Python\"))\nprint(permutation_palindrome(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is permutation of anagram or not.\n\"\"\"\ndef permutation_anagram(s1,s2): \n\tif sorted(s1.lower())==sorted(s2.lower()):\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to check whether the given string is palindrome or not.\n\"\"\"\ndef palindrome(s): \n\tif s==s[::-1]:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(palindrome(\"Hello\"))\nprint(palindrome(\"Python\"))\nprint(palindrome(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is pangram or not.\n\"\"\"\ndef pangram(s): \n\tif len(set(s.lower()))==26:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(pangram(\"The quick brown fox jumps over the lazy dog\"))\nprint(pangram(\"Python\"))\nprint(pangram(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is anagram or not.\n\"\"\"\ndef anagram(s1,s2): \n\tif sorted(s1.lower())==sorted(s2.lower()):\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(anagram(\"Hello\",\"World\"))\nprint(anagram(\"Python\",\"Ptyon\"))\nprint(anagram(\"Hello World\",\"World Hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is permutation of palindrome or not.\n\"\"\"\ndef permutation_palindrome(s): \n\tif sorted(s.lower())==sorted(s.lower())[::-1]:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint(permutation_palindrome(\"Hello\"))\nprint(permutation_palindrome(\"Python\"))\nprint(permutation_palindrome(\"Hello World\"))\n\n\"\"\"\nWrite a python function to check whether the given string is permutation of anagram or not.\n\"\"\"\ndef permutation_anagram(s1,s2): \n\tif sorted(s1.lower())==sorted(s2.lower()):\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n\nprint"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3}\n\n\"\"\"\nWrite a function to merge four dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3, **dict4}\n\n\"\"\"\nWrite a function to merge five dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_five(dict1,dict2, dict3, dict4, dict5):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5}\n\n\"\"\"\nWrite a function to merge six dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5, dict6):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:param dict6: dictionary\n\t\t:return: dictionary\n\t\t\"\"\"\n\t\treturn {**dict1, **dict2, **dict3, **dict4, **dict5, **dict6}\n\n\"\"\"\nWrite a function to merge seven dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n\t\t\"\"\"\n\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:param dict6: dictionary\n\t\t:param dict7:", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t:param dict1: dictionary\n\t\t:param dict2: dictionary\n\t\t:param dict3: dictionary\n\t\t:param dict4: dictionary\n\t\t:param dict5: dictionary\n\t\t:param dict6: dictionary\n\t\t:param dict7:"}
{"ID": 462, "source": "MBPP:99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t", "predict": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\n\"\"\"\ndef decimal_to_binary(n): \n\t\treturn bin(n).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its octal equivalent.\n\"\"\"\ndef decimal_to_octal(n): \n\t\treturn oct(n).replace(\"0o\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hexadecimal(n): \n\t\treturn hex(n).replace(\"0x\", \"\")\n\n\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(n): \n\t\treturn int(n, 2)\n\n\"\"\"\nWrite a function to convert the given octal number to its decimal equivalent.\n\"\"\"\ndef octal_to_decimal(n): \n\t\treturn int(n, 8)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hexadecimal_to_decimal(n): \n\t\treturn int(n, 16)\n\n\"\"\"\nWrite a function to convert the given binary number to its hexadecimal equivalent.\n\"\"\"\ndef binary_to_hexadecimal(n): \n\t\treturn hex(int(n, 2)).replace(\"0x\", \"\")\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hexadecimal_to_binary(n): \n\t\treturn bin(int(n, 16)).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given binary number to its octal equivalent.\n\"\"\"\ndef binary_to_octal(n): \n\t\treturn oct(int(n, 2)).replace(\"0o\", \"\")\n\n\"\"\"\nWrite a function to convert the given octal number to its binary equivalent.\n\"\"\"\ndef octal_to_binary(n): \n\t\treturn bin(int(n, 8)).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its Roman Numeral equivalent.\n\"\"\"\ndef decimal_to_roman_numeral(n): \n\t\troman_numeral_map = (('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn bin(n).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its octal equivalent.\n\"\"\"\ndef decimal_to_octal(n): \n\t\treturn oct(n).replace(\"0o\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its hexadecimal equivalent.\n\"\"\"\ndef decimal_to_hexadecimal(n): \n\t\treturn hex(n).replace(\"0x\", \"\")\n\n\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\n\"\"\"\ndef binary_to_decimal(n): \n\t\treturn int(n, 2)\n\n\"\"\"\nWrite a function to convert the given octal number to its decimal equivalent.\n\"\"\"\ndef octal_to_decimal(n): \n\t\treturn int(n, 8)\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its decimal equivalent.\n\"\"\"\ndef hexadecimal_to_decimal(n): \n\t\treturn int(n, 16)\n\n\"\"\"\nWrite a function to convert the given binary number to its hexadecimal equivalent.\n\"\"\"\ndef binary_to_hexadecimal(n): \n\t\treturn hex(int(n, 2)).replace(\"0x\", \"\")\n\n\"\"\"\nWrite a function to convert the given hexadecimal number to its binary equivalent.\n\"\"\"\ndef hexadecimal_to_binary(n): \n\t\treturn bin(int(n, 16)).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given binary number to its octal equivalent.\n\"\"\"\ndef binary_to_octal(n): \n\t\treturn oct(int(n, 2)).replace(\"0o\", \"\")\n\n\"\"\"\nWrite a function to convert the given octal number to its binary equivalent.\n\"\"\"\ndef octal_to_binary(n): \n\t\treturn bin(int(n, 8)).replace(\"0b\", \"\")\n\n\"\"\"\nWrite a function to convert the given decimal number to its Roman Numeral equivalent.\n\"\"\"\ndef decimal_to_roman_numeral(n): "}
{"ID": 468, "source": "MBPP:105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t", "predict": "\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"\ndef count(lst):   \n\t\treturn lst.count(True)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\"\ndef first_non_repeating(string):\n\t\treturn min(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first repeating character in the given string.\n\"\"\"\ndef first_repeating(string):\n\t\treturn max(set(string), key=string.count)\n\n\"\"\"\nWrite a python function to find the first non-repeating character in the given string.\n\"\"\""}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t\tcount = 0\n\t\tfor i in range(L,R+1) :\n\t\t\tif(i%16 == 0) :\n\t\t\t\tcount += 1\n\t\treturn count\n\nprint(count_Hexadecimal(1,10))\nprint(count_Hexadecimal(1,15))\nprint(count_Hexadecimal(1,20))\nprint(count_Hexadecimal(1,25))\nprint(count_Hexadecimal(1,30))\nprint(count_Hexadecimal(1,35))\nprint(count_Hexadecimal(1,40))\nprint(count_Hexadecimal(1,45))\nprint(count_Hexadecimal(1,50))\nprint(count_Hexadecimal(1,55))\nprint(count_Hexadecimal(1,60))\nprint(count_Hexadecimal(1,65))\nprint(count_Hexadecimal(1,70))\nprint(count_Hexadecimal(1,75))\nprint(count_Hexadecimal(1,80))\nprint(count_Hexadecimal(1,85))\nprint(count_Hexadecimal(1,90))\nprint(count_Hexadecimal(1,95))\nprint(count_Hexadecimal(1,100))\nprint(count_Hexadecimal(1,105))\nprint(count_Hexadecimal(1,110))\nprint(count_Hexadecimal(1,115))\nprint(count_Hexadecimal(1,120))\nprint(count_Hexadecimal(1,125))\nprint(count_Hexadecimal(1,130))\nprint(count_Hexadecimal(1,135))\nprint(count_Hexadecimal(1,140))\nprint(count_Hexadecimal(1,145))\nprint(count_Hexadecimal(1,150))\nprint(count_Hexadecimal(1,155))\nprint(count_Hexadecimal(1,160))\nprint(count_Hexadecimal(1,165))\nprint(count_Hexadecimal(1,170))\nprint(count_Hexadecimal(1,175))\nprint(count_Hexadecimal(1,1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Hexadecimal(1,10))\nprint(count_Hexadecimal(1,15))\nprint(count_Hexadecimal(1,20))\nprint(count_Hexadecimal(1,25))\nprint(count_Hexadecimal(1,30))\nprint(count_Hexadecimal(1,35))\nprint(count_Hexadecimal(1,40))\nprint(count_Hexadecimal(1,45))\nprint(count_Hexadecimal(1,50))\nprint(count_Hexadecimal(1,55))\nprint(count_Hexadecimal(1,60))\nprint(count_Hexadecimal(1,65))\nprint(count_Hexadecimal(1,70))\nprint(count_Hexadecimal(1,75))\nprint(count_Hexadecimal(1,80))\nprint(count_Hexadecimal(1,85))\nprint(count_Hexadecimal(1,90))\nprint(count_Hexadecimal(1,95))\nprint(count_Hexadecimal(1,100))\nprint(count_Hexadecimal(1,105))\nprint(count_Hexadecimal(1,110))\nprint(count_Hexadecimal(1,115))\nprint(count_Hexadecimal(1,120))\nprint(count_Hexadecimal(1,125))\nprint(count_Hexadecimal(1,130))\nprint(count_Hexadecimal(1,135))\nprint(count_Hexadecimal(1,140))\nprint(count_Hexadecimal(1,145))\nprint(count_Hexadecimal(1,150))\nprint(count_Hexadecimal(1,155))\nprint(count_Hexadecimal(1,160))\nprint(count_Hexadecimal(1,165))\nprint(count_Hexadecimal(1,170))\nprint(count_Hexadecimal(1,175))\nprint(count_Hexadecimal(1,1"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t\treturn string.split()\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a string.\n\"\"\"\ndef list_to_string(list): \n\t\treturn''.join(list)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a dictionary.\n\"\"\"\ndef string_to_dictionary(string): \n\t\treturn dict(item.split(':') for item in string.split(','))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a dictionary to a string.\n\"\"\"\ndef dictionary_to_string(dictionary): \n\t\treturn ','.join(f'{key}:{value}' for key, value in dictionary.items())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a set.\n\"\"\"\ndef string_to_set(string): \n\t\treturn set(string.split())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a set to a string.\n\"\"\"\ndef set_to_string(set): \n\t\treturn''.join(set)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a tuple.\n\"\"\"\ndef string_to_tuple(string): \n\t\treturn tuple(string.split())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a tuple to a string.\n\"\"\"\ndef tuple_to_string(tuple): \n\t\treturn''.join(tuple)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a boolean.\n\"\"\"\ndef string_to_boolean(string): \n\t\treturn string.lower() in ['true', 't', 'yes', 'y', '1']\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a boolean", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a boolean"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t\n    # Initialize result \n    res = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 5 \n    count = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 7 \n    count1 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 11 \n    count2 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 13 \n    count3 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 17 \n    count4 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 19 \n    count5 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 23 \n    count6 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 29 \n    count7 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 31 \n    count8 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 37 \n    count9 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 41 \n    count10 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 43 \n    count11 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 47 \n    count12 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 53 \n    count13 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 59 \n    count14 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 61 \n    count15 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 67 \n    count16 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 71 \n    count17 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 73 \n    count18 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 79 \n    count19 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 83 \n    count20 = 0 \n  \n    # Initialize count of numbers \n    # that are div", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    # Initialize result \n    res = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 5 \n    count = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 7 \n    count1 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 11 \n    count2 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 13 \n    count3 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 17 \n    count4 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 19 \n    count5 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 23 \n    count6 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 29 \n    count7 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 31 \n    count8 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 37 \n    count9 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 41 \n    count10 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 43 \n    count11 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 47 \n    count12 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 53 \n    count13 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 59 \n    count14 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 61 \n    count15 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 67 \n    count16 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 71 \n    count17 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 73 \n    count18 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 79 \n    count19 = 0 \n  \n    # Initialize count of numbers \n    # that are divisible by 83 \n    count20 = 0 \n  \n    # Initialize count of numbers "}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t\n    # Initialize result \n    max_len = 0\n    count0 = 0\n    count1 = 0\n    for i in range(n): \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 += 1\n        max_len = max(max_len, count0, count1) \n  \n    # Initialize starting and ending indexes \n    start = 0\n    end = 0\n    max_diff = 0\n  \n    # Start from every index and try to extend the subsequence \n    for i in range(n): \n        # If 0 is present at index i, then update count0 \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 -= 1\n        # If count0 becomes more than count1, then update max_len \n        if count0 > count1: \n            max_len = max(max_len, count0) \n  \n        # If max_len becomes more than max_diff, then update max_diff \n        if max_len > max_diff: \n            max_diff = max_len \n            start = i - max_len + 1\n            end = i \n  \n    return start, end, max_diff \n  \n# Driver code \nif __name__ == '__main__': \n    string = \"100101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "    string = \"100101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"}
{"ID": 489, "source": "MBPP:126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"\ndef sum(a,b): \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b \n\t\t# code here \n\t\t# return sum of common divisors of a and b"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t\treturn n*(2*n-1)\n\n\"\"\"\nWrite a function to find the difference between the sum of the squares of the first N natural numbers and the square of the sum.\n\"\"\"\ndef sum_square_diff(n):\n\treturn (n*(n+1)*(2*n+1))/6 - (n*(n+1)*(n+2)*(3*n+2))/24\n\n\"\"\"\nWrite a function that returns the n-th triangular number.\n\"\"\"\ndef triangular_num(n):\n\treturn n*(n+1)/2\n\n\"\"\"\nWrite a function that returns the n-th pentagonal number.\n\"\"\"\ndef pentagonal_num(n):\n\treturn n*(3*n-1)/2\n\n\"\"\"\nWrite a function that returns the n-th hexagonal number.\n\"\"\"\ndef hexagonal_num(n):\n\treturn n*(2*n-1)\n\n\"\"\"\nWrite a function that returns the n-th heptagonal number.\n\"\"\"\ndef heptagonal_num(n):\n\treturn n*(5*n-3)/2\n\n\"\"\"\nWrite a function that returns the n-th octagonal number.\n\"\"\"\ndef octagonal_num(n):\n\treturn n*(3*n-2)\n\n\"\"\"\nWrite a function that returns the n-th nonagonal number.\n\"\"\"\ndef nonagonal_num(n):\n\treturn n*(15*n-6)/2\n\n\"\"\"\nWrite a function that returns the n-th decagonal number.\n\"\"\"\ndef decagonal_num(n):\n\treturn n*(10*n-9)\n\n\"\"\"\nWrite a function that returns the n-th undecagonal number.\n\"\"\"\ndef undecagonal_num(n):\n\treturn n*(10*n-11)\n\n\"\"\"\nWrite a function that returns the n-th dodecagonal number.\n\"\"\"\ndef dodecagonal_num(n):\n\treturn n*(10*n-13)\n\n\"\"\"\nWrite a function that returns the n-th tridecagonal number.\n\"\"\"\ndef tridecagonal_num(n):\n\treturn n*(1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef sum_square_diff(n):\n\treturn (n*(n+1)*(2*n+1))/6 - (n*(n+1)*(n+2)*(3*n+2))/24\n\n\"\"\"\nWrite a function that returns the n-th triangular number.\n\"\"\"\ndef triangular_num(n):\n\treturn n*(n+1)/2\n\n\"\"\"\nWrite a function that returns the n-th pentagonal number.\n\"\"\"\ndef pentagonal_num(n):\n\treturn n*(3*n-1)/2\n\n\"\"\"\nWrite a function that returns the n-th hexagonal number.\n\"\"\"\ndef hexagonal_num(n):\n\treturn n*(2*n-1)\n\n\"\"\"\nWrite a function that returns the n-th heptagonal number.\n\"\"\"\ndef heptagonal_num(n):\n\treturn n*(5*n-3)/2\n\n\"\"\"\nWrite a function that returns the n-th octagonal number.\n\"\"\"\ndef octagonal_num(n):\n\treturn n*(3*n-2)\n\n\"\"\"\nWrite a function that returns the n-th nonagonal number.\n\"\"\"\ndef nonagonal_num(n):\n\treturn n*(15*n-6)/2\n\n\"\"\"\nWrite a function that returns the n-th decagonal number.\n\"\"\"\ndef decagonal_num(n):\n\treturn n*(10*n-9)\n\n\"\"\"\nWrite a function that returns the n-th undecagonal number.\n\"\"\"\ndef undecagonal_num(n):\n\treturn n*(10*n-11)\n\n\"\"\"\nWrite a function that returns the n-th dodecagonal number.\n\"\"\"\ndef dodecagonal_num(n):\n\treturn n*(10*n-13)\n\n\"\"\"\nWrite a function that returns the n-th tridecagonal number."}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn True\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n%2==0:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n//2)\n\t\telse:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n\"\"\"\nWrite a python function to check whether the given number is a power of two or not.\n\"\"\"\ndef is_Power_Of_Two(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn True\n\t\tif n%2==0:\n\t\t\treturn is_Power_Of_Two(n//2)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of three or not.\n\"\"\"\ndef is_Power_Of_Three(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==3:\n\t\t\treturn True\n\t\tif n%3==0:\n\t\t\treturn is_Power_Of_Three(n//3)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of four or not.\n\"\"\"\ndef is_Power_Of_Four(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==4:\n\t\t\treturn True\n\t\tif n%4==0:\n\t\t\treturn is_Power_Of_Four(n//4)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of five or not.\n\"\"\"\ndef is_Power_Of_Five(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==5:\n\t\t\treturn True\n\t\tif n%5==0:\n\t\t\treturn is_Power_Of_Five(n//5)\n\t\telse:\n\t\t\treturn False", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# code here \n\t\tif n==0:\n\t\t\treturn True\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n%2==0:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n//2)\n\t\telse:\n\t\t\treturn is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n\"\"\"\nWrite a python function to check whether the given number is a power of two or not.\n\"\"\"\ndef is_Power_Of_Two(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn True\n\t\tif n%2==0:\n\t\t\treturn is_Power_Of_Two(n//2)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of three or not.\n\"\"\"\ndef is_Power_Of_Three(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==3:\n\t\t\treturn True\n\t\tif n%3==0:\n\t\t\treturn is_Power_Of_Three(n//3)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of four or not.\n\"\"\"\ndef is_Power_Of_Four(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==4:\n\t\t\treturn True\n\t\tif n%4==0:\n\t\t\treturn is_Power_Of_Four(n//4)\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a power of five or not.\n\"\"\"\ndef is_Power_Of_Five(n): \n\t\t# code here \n\t\tif n==0:\n\t\t\treturn False\n\t\tif n==1:\n\t\t\treturn False\n\t\tif n==5:\n\t\t\treturn True\n\t\tif n%5==0:\n\t\t\treturn is_Power_Of_Five(n//5)\n\t\telse:"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t\tcount = 0\n\t\tfor i in Input: \n\t\t\tif isinstance(i, list): \n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tfor i in Input: \n\t\t\tif isinstance(i, list): \n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): \n\t\tif isinstance(Input, list): \n\t\t\treturn 1 + (max(map(max_depth, Input)))\n\t\telse: \n\t\t\treturn 0\n\n\"\"\"\nWrite a function to find the maximum depth of the given nested list.\n\"\"\"\ndef max_depth(Input): "}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t\n    # Initialize result \n    max_len = 0\n    res = [] \n  \n    # Pick a starting point \n    for i in range(n): \n        # Initialize current length as 1 \n        curr_len = 1\n        # Initialize starting point of current subsequence \n        start = i \n        # Try different ending points for current subsequence \n        for j in range(i+1, n): \n            if arr[j] - arr[j-1] == 1: \n                curr_len += 1\n                end = j \n            else: \n                break\n        # Update result if needed \n        if curr_len > max_len: \n            max_len = curr_len \n            res = [start, end] \n  \n    return res \n\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5], 5))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(longest_subseq_with_diff_one([1, 2, 3, 4, 5], 5))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15))\nprint(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"ID": 527, "source": "MBPP:164", "prompt": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\n\"\"\"\ndef areEquivalent(num1,num2): \n\t\t# Your code goes here \n\t\tsum1=0\n\t\tsum2=0\n\t\tfor i in range(1,num1+1):\n\t\t\tif num1%i==0:\n\t\t\t\tsum1=sum1+i\n\t\tfor i in range(1,num2+1):\n\t\t\tif num2%i==0:\n\t\t\t\tsum2=sum2+i\n\t\tif sum1==sum2:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef isPerfectSquare(num): \n\t\t# Your code goes here \n\t\tfor i in range(1,num):\n\t\t\tif i*i==num:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect cube or not.\n\"\"\"\ndef isPerfectCube(num): \n\t\t# Your code goes here \n\t\tfor i in range(1,num):\n\t\t\tif i*i*i==num:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect number or not.\n\"\"\"\ndef isPerfect(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num):\n\t\t\tif num%i==0:\n\t\t\t\tsum=sum+i\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a triangular number or not.\n\"\"\"\ndef isTriangular(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num+1):\n\t\t\tsum=sum+i\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a pentagonal number or not.\n\"\"\"\ndef isPentagonal(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num+1):\n\t\t\tsum=sum+i*(3*i-1)/2\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tif i*i==num:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect cube or not.\n\"\"\"\ndef isPerfectCube(num): \n\t\t# Your code goes here \n\t\tfor i in range(1,num):\n\t\t\tif i*i*i==num:\n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a perfect number or not.\n\"\"\"\ndef isPerfect(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num):\n\t\t\tif num%i==0:\n\t\t\t\tsum=sum+i\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a triangular number or not.\n\"\"\"\ndef isTriangular(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num+1):\n\t\t\tsum=sum+i\n\t\tif sum==num:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a python function to check whether the given number is a pentagonal number or not.\n\"\"\"\ndef isPentagonal(num): \n\t\t# Your code goes here \n\t\tsum=0\n\t\tfor i in range(1,num+1):"}
{"ID": 530, "source": "MBPP:167", "prompt": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\"\"\"\ndef next_Power_Of_2(n): \n\t\treturn 1 if n == 0 else 2**(n - 1).bit_length()\n\nprint(next_Power_Of_2(10))\nprint(next_Power_Of_2(11))\nprint(next_Power_Of_2(12))\nprint(next_Power_Of_2(13))\nprint(next_Power_Of_2(14))\nprint(next_Power_Of_2(15))\nprint(next_Power_Of_2(16))\nprint(next_Power_Of_2(17))\nprint(next_Power_Of_2(18))\nprint(next_Power_Of_2(19))\nprint(next_Power_Of_2(20))\nprint(next_Power_Of_2(21))\nprint(next_Power_Of_2(22))\nprint(next_Power_Of_2(23))\nprint(next_Power_Of_2(24))\nprint(next_Power_Of_2(25))\nprint(next_Power_Of_2(26))\nprint(next_Power_Of_2(27))\nprint(next_Power_Of_2(28))\nprint(next_Power_Of_2(29))\nprint(next_Power_Of_2(30))\nprint(next_Power_Of_2(31))\nprint(next_Power_Of_2(32))\nprint(next_Power_Of_2(33))\nprint(next_Power_Of_2(34))\nprint(next_Power_Of_2(35))\nprint(next_Power_Of_2(36))\nprint(next_Power_Of_2(37))\nprint(next_Power_Of_2(38))\nprint(next_Power_Of_2(39))\nprint(next_Power_Of_2(40))\nprint(next_Power_Of_2(41))\nprint(next_Power_Of_2(42))\nprint(next_Power_Of_2(43))\nprint(next_Power_Of_2(44", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(next_Power_Of_2(10))\nprint(next_Power_Of_2(11))\nprint(next_Power_Of_2(12))\nprint(next_Power_Of_2(13))\nprint(next_Power_Of_2(14))\nprint(next_Power_Of_2(15))\nprint(next_Power_Of_2(16))\nprint(next_Power_Of_2(17))\nprint(next_Power_Of_2(18))\nprint(next_Power_Of_2(19))\nprint(next_Power_Of_2(20))\nprint(next_Power_Of_2(21))\nprint(next_Power_Of_2(22))\nprint(next_Power_Of_2(23))\nprint(next_Power_Of_2(24))\nprint(next_Power_Of_2(25))\nprint(next_Power_Of_2(26))\nprint(next_Power_Of_2(27))\nprint(next_Power_Of_2(28))\nprint(next_Power_Of_2(29))\nprint(next_Power_Of_2(30))\nprint(next_Power_Of_2(31))\nprint(next_Power_Of_2(32))\nprint(next_Power_Of_2(33))\nprint(next_Power_Of_2(34))\nprint(next_Power_Of_2(35))\nprint(next_Power_Of_2(36))\nprint(next_Power_Of_2(37))\nprint(next_Power_Of_2(38))\nprint(next_Power_Of_2(39))\nprint(next_Power_Of_2(40))\nprint(next_Power_Of_2(41))\nprint(next_Power_Of_2(42))\nprint(next_Power_Of_2(43))\nprint(next_Power_Of_2(44"}
{"ID": 533, "source": "MBPP:170", "prompt": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t", "predict": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the maximum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef max_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn max(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the minimum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef min_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn min(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the average of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef avg_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])/len(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the median of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef median_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.median(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the mode of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef mode_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.mode(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the standard deviation of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef std_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.stdev(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the variance of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef var_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.variance(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the maximum of the numbers", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the maximum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef max_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn max(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the minimum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef min_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn min(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the average of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef avg_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn sum(list1[m:n+1])/len(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the median of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef median_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.median(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the mode of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef mode_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.mode(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the standard deviation of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef std_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.stdev(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the variance of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef var_range_list(list1, m, n):                                                                                                                                                                                                \n\t\treturn statistics.variance(list1[m:n+1])\n\n\"\"\"\nWrite a function to find the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                "}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters from a string.\n\"\"\"\ndef remove_nonalpha(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters from a string.\n\"\"\"\ndef remove_nonnum(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except special characters from a string.\n\"\"\"\ndef remove_nonspecial(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters and spaces from a string.\n\"\"\"\ndef remove_nonalpha_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters and spaces from a string.\n\"\"\"\ndef remove_nonnum_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except special characters and spaces from a string.\n\"\"\"\ndef remove_nonspecial_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and hyphens from a string.\n\"\"\"\ndef remove_splchar_and_hyphen(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters and hyphens from a string.\n\"\"\"\ndef remove_nonalpha_and_hyphen(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters and hyphens from a string.\n\"\"\"\ndef remove_nonnum_and_hyphen(text): \n\t\treturn re.sub(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters from a string.\n\"\"\"\ndef remove_nonalpha(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters from a string.\n\"\"\"\ndef remove_nonnum(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except special characters from a string.\n\"\"\"\ndef remove_nonspecial(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and spaces from a string.\n\"\"\"\ndef remove_splchar_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters and spaces from a string.\n\"\"\"\ndef remove_nonalpha_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters and spaces from a string.\n\"\"\"\ndef remove_nonnum_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except special characters and spaces from a string.\n\"\"\"\ndef remove_nonspecial_and_space(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphanumeric characters and hyphens from a string.\n\"\"\"\ndef remove_splchar_and_hyphen(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except alphabetic characters and hyphens from a string.\n\"\"\"\ndef remove_nonalpha_and_hyphen(text): \n\t\treturn re.sub(r'[^\\w\\s]', '', text)\n\n\"\"\"\nWrite a function to remove everything except numeric characters and hyphens from a string.\n\"\"\"\ndef remove_nonnum_and_hyphen(text): "}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)\n\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t\treturn True if x == 1 else False if x == 0 else is_num_keith(x // 2) if x % 2 == 0 else is_num_keith(x * 3 + 1)"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n\t\tc = 2 * asin(sqrt(a))\n\t\tr = 6371 # Radius of earth in kilometers. Use 3956 for miles\n\t\treturn c * r\n\n\"\"\"\nWrite a function to calculate the distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n\t\tc = 2 * asin(sqrt(a))\n\t\tr = 6371 # Radius of earth in kilometers. Use 3956 for miles\n\t\treturn c * r\n\n\"\"\"\nWrite a function to calculate the distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(sl", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n\t\tc = 2 * asin(sqrt(a))\n\t\tr = 6371 # Radius of earth in kilometers. Use 3956 for miles\n\t\treturn c * r\n\n\"\"\"\nWrite a function to calculate the distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])\n\t\t# haversine formula\n\t\tdlon = elon - slon\n\t\tdlat = elat - slat\n\t\ta = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n\t\tc = 2 * asin(sqrt(a))\n\t\tr = 6371 # Radius of earth in kilometers. Use 3956 for miles\n\t\treturn c * r\n\n\"\"\"\nWrite a function to calculate the distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t\t\"\"\"\n\t\tCalculate the distance between two points using latitude and longitude.\n\t\t\"\"\"\n\t\t# convert decimal degrees to radians\n\t\tslat,slon,elat,elon = map(radians, [slat,slon,elat,elon])"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a"}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the square\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a rectangle.\n\"\"\"\ndef count_Intgral_Points_Rect(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the rectangle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a circle.\n\"\"\"\ndef count_Intgral_Points_Circle(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the circle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a triangle.\n\"\"\"\ndef count_Intgral_Points_Triangle(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the triangle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tx1,y1,x2,y2 are the co-ordinates of the square\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a rectangle.\n\"\"\"\ndef count_Intgral_Points_Rect(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the rectangle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a circle.\n\"\"\"\ndef count_Intgral_Points_Circle(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the circle\n\t\t\"\"\"\n\t\tcount = 0\n\t\tfor i in range(x1,x2+1):\n\t\t\tfor j in range(y1,y2+1):\n\t\t\t\tif(is_Integral(i,j)):\n\t\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a triangle.\n\"\"\"\ndef count_Intgral_Points_Triangle(x1,y1,x2,y2): \n\t\t\"\"\"\n\t\tx1,y1,x2,y2 are the co-ordinates of the triangle\n\t\t\"\"\""}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t\tif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname4):\n\t\tif monthname4 == \"April\" or monthname4 == \"June\" or monthname4 == \"September\" or monthname4 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname5):\n\t\tif monthname5 == \"February\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname6):\n\t\tif monthname6 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname7):\n\t\tif monthname7 == \"January\" or monthname7 == \"March\" or monthname7 == \"May\" or monthname7 == \"July\" or monthname7 == \"August\" or monthname7 == \"October\" or monthname7 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname8):\n\t\tif monthname8 == \"April\" or monthname8 == \"June\" or monthname8 == \"September\" or monthname8 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname9):\n\t\tif monthname9 == \"February\":\n\t\t\treturn True\n\t\telse:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname4):\n\t\tif monthname4 == \"April\" or monthname4 == \"June\" or monthname4 == \"September\" or monthname4 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname5):\n\t\tif monthname5 == \"February\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname6):\n\t\tif monthname6 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname7):\n\t\tif monthname7 == \"January\" or monthname7 == \"March\" or monthname7 == \"May\" or monthname7 == \"July\" or monthname7 == \"August\" or monthname7 == \"October\" or monthname7 == \"December\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname8):\n\t\tif monthname8 == \"April\" or monthname8 == \"June\" or monthname8 == \"September\" or monthname8 == \"November\":\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumber(monthname9):"}
{"ID": 555, "source": "MBPP:192", "prompt": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t", "predict": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\n\"\"\"\ndef check_String(str): \n\t\treturn any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\nprint(check_String(\"12345\"))\nprint(check_String(\"123456\"))\nprint(check_String(\"1234567\"))\nprint(check_String(\"12345678\"))\nprint(check_String(\"123456789\"))\nprint(check_String(\"1234567890\"))\nprint(check_String(\"12345678901\"))\nprint(check_String(\"123456789012\"))\nprint(check_String(\"1234567890123\"))\nprint(check_String(\"12345678901234\"))\nprint(check_String(\"123456789012345\"))\nprint(check_String(\"1234567890123456\"))\nprint(check_String(\"12345678901234567\"))\nprint(check_String(\"123456789012345678\"))\nprint(check_String(\"1234567890123456789\"))\nprint(check_String(\"12345678901234567890\"))\nprint(check_String(\"123456789012345678901\"))\nprint(check_String(\"1234567890123456789012\"))\nprint(check_String(\"12345678901234567890123\"))\nprint(check_String(\"123456789012345678901234\"))\nprint(check_String(\"1234567890123456789012345\"))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_String(\"12345\"))\nprint(check_String(\"123456\"))\nprint(check_String(\"1234567\"))\nprint(check_String(\"12345678\"))\nprint(check_String(\"123456789\"))\nprint(check_String(\"1234567890\"))\nprint(check_String(\"12345678901\"))\nprint(check_String(\"123456789012\"))\nprint(check_String(\"1234567890123\"))\nprint(check_String(\"12345678901234\"))\nprint(check_String(\"123456789012345\"))\nprint(check_String(\"1234567890123456\"))\nprint(check_String(\"12345678901234567\"))\nprint(check_String(\"123456789012345678\"))\nprint(check_String(\"1234567890123456789\"))\nprint(check_String(\"12345678901234567890\"))\nprint(check_String(\"123456789012345678901\"))\nprint(check_String(\"1234567890123456789012\"))\nprint(check_String(\"12345678901234567890123\"))\nprint(check_String(\"123456789012345678901234\"))\nprint(check_String(\"1234567890123456789012345\"))\nprint"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t\treturn int(n, 8)\n\nprint(octal_To_Decimal(\"010\"))\nprint(octal_To_Decimal(\"0100\"))\nprint(octal_To_Decimal(\"01000\"))\nprint(octal_To_Decimal(\"010000\"))\nprint(octal_To_Decimal(\"0100000\"))\nprint(octal_To_Decimal(\"01000000\"))\nprint(octal_To_Decimal(\"010000000\"))\nprint(octal_To_Decimal(\"0100000000\"))\nprint(octal_To_Decimal(\"01000000000\"))\nprint(octal_To_Decimal(\"010000000000\"))\nprint(octal_To_Decimal(\"0100000000000\"))\nprint(octal_To_Decimal(\"01000000000000\"))\nprint(octal_To_Decimal(\"010000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000\"))\nprint(octal_To_Decimal(\"01000000000000000\"))\nprint(octal_To_Decimal(\"010000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000\"))\nprint(octal_To_Decimal(\"01000000000000000000\"))\nprint(octal_To_Decimal(\"010000000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(octal_To_Decimal(\"010\"))\nprint(octal_To_Decimal(\"0100\"))\nprint(octal_To_Decimal(\"01000\"))\nprint(octal_To_Decimal(\"010000\"))\nprint(octal_To_Decimal(\"0100000\"))\nprint(octal_To_Decimal(\"01000000\"))\nprint(octal_To_Decimal(\"010000000\"))\nprint(octal_To_Decimal(\"0100000000\"))\nprint(octal_To_Decimal(\"01000000000\"))\nprint(octal_To_Decimal(\"010000000000\"))\nprint(octal_To_Decimal(\"0100000000000\"))\nprint(octal_To_Decimal(\"01000000000000\"))\nprint(octal_To_Decimal(\"010000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000\"))\nprint(octal_To_Decimal(\"01000000000000000\"))\nprint(octal_To_Decimal(\"010000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000\"))\nprint(octal_To_Decimal(\"01000000000000000000\"))\nprint(octal_To_Decimal(\"010000000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000000\"))\nprint(octal_To_Decimal(\"0100000000000000000000"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\treturn 2**(n-1)\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(4", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(4"}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t\treturn lst.count(lst[0]) == len(lst)\n\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): "}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t\t# Your code goes here\n\t\t# return the first repeated character\n\t\t# if no repeated character is found, return -1\n\t\t# if the string is empty, return -1\n\t\t# if the string has only one character, return -1\n\t\t# if the string has only two characters, return -1\n\t\t# if the string has only three characters, return -1\n\t\t# if the string has only four characters, return -1\n\t\t# if the string has only five characters, return -1\n\t\t# if the string has only six characters, return -1\n\t\t# if the string has only seven characters, return -1\n\t\t# if the string has only eight characters, return -1\n\t\t# if the string has only nine characters, return -1\n\t\t# if the string has only ten characters, return -1\n\t\t# if the string has only eleven characters, return -1\n\t\t# if the string has only twelve characters, return -1\n\t\t# if the string has only thirteen characters, return -1\n\t\t# if the string has only fourteen characters, return -1\n\t\t# if the string has only fifteen characters, return -1\n\t\t# if the string has only sixteen characters, return -1\n\t\t# if the string has only seventeen characters, return -1\n\t\t# if the string has only eighteen characters, return -1\n\t\t# if the string has only nineteen characters, return -1\n\t\t# if the string has only twenty characters, return -1\n\t\t# if the string has only twenty one characters, return -1\n\t\t# if the string has only twenty two characters, return -1\n\t\t# if the string has only twenty three characters, return -1\n\t\t# if the string has only twenty four characters, return -1\n\t\t# if the string has only twenty five characters, return -1\n\t\t# if the string has only twenty six characters, return -1\n\t\t# if the string has only twenty seven characters, return -1\n\t\t# if the string has only twenty eight characters, return -1\n\t\t# if the string has only twenty nine characters, return -1\n\t\t# if the string has only thirty characters, return -1\n\t\t# if the string has only thirty one characters, return -1\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t# if the string is empty, return -1\n\t\t# if the string has only one character, return -1\n\t\t# if the string has only two characters, return -1\n\t\t# if the string has only three characters, return -1\n\t\t# if the string has only four characters, return -1\n\t\t# if the string has only five characters, return -1\n\t\t# if the string has only six characters, return -1\n\t\t# if the string has only seven characters, return -1\n\t\t# if the string has only eight characters, return -1\n\t\t# if the string has only nine characters, return -1\n\t\t# if the string has only ten characters, return -1\n\t\t# if the string has only eleven characters, return -1\n\t\t# if the string has only twelve characters, return -1\n\t\t# if the string has only thirteen characters, return -1\n\t\t# if the string has only fourteen characters, return -1\n\t\t# if the string has only fifteen characters, return -1\n\t\t# if the string has only sixteen characters, return -1\n\t\t# if the string has only seventeen characters, return -1\n\t\t# if the string has only eighteen characters, return -1\n\t\t# if the string has only nineteen characters, return -1\n\t\t# if the string has only twenty characters, return -1\n\t\t# if the string has only twenty one characters, return -1\n\t\t# if the string has only twenty two characters, return -1\n\t\t# if the string has only twenty three characters, return -1\n\t\t# if the string has only twenty four characters, return -1\n\t\t# if the string has only twenty five characters, return -1\n\t\t# if the string has only twenty six characters, return -1\n\t\t# if the string has only twenty seven characters, return -1\n\t\t# if the string has only twenty eight characters, return -1\n\t\t# if the string has only twenty nine characters, return -1\n\t\t# if the string has only thirty characters, return -1\n\t\t# if the string has only thirty one characters, return -1\n\t"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t\treturn min(a,b,c) \n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\t\treturn max(a,b,c) \n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_three_without_conditional(a,b,c): \n\t\treturn max(a,b,c) \n\n\"\"\"\nWrite a function to find minimum of five numbers without using conditional statements and loops.\n\"\"\"\ndef min_of_five_without_conditional(a,b,c,d,e): \n\t\treturn min(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find maximum of five numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn min(a,b,c) \n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\t\treturn max(a,b,c) \n\n\"\"\"\nWrite a function to find maximum of three numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_three_without_conditional(a,b,c): \n\t\treturn max(a,b,c) \n\n\"\"\"\nWrite a function to find minimum of five numbers without using conditional statements and loops.\n\"\"\"\ndef min_of_five_without_conditional(a,b,c,d,e): \n\t\treturn min(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find maximum of five numbers without using conditional statements and loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): \n\t\treturn max(a,b,c,d,e) \n\n\"\"\"\nWrite a function to find the maximum of numbers without using conditional statements or loops.\n\"\"\"\ndef max_of_five_without_conditional(a,b,c,d,e): "}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t\t# Your code goes here  \n\t\t# Return True if all the bits are set in the given range  \n\t\t# Return False if any of the bit is set in the given range  \n\t\t# Return False if all the bits are unset in the given range  \n\t\t# Return False if n is not a positive integer  \n\t\t# Return False if l is not a positive integer  \n\t\t# Return False if r is not a positive integer  \n\t\t# Return False if l is greater than r  \n\t\t# Return False if l is greater than n  \n\t\t# Return False if r is greater than n  \n\t\t# Return False if l is less than 0  \n\t\t# Return False if r is less than 0  \n\t\t# Return False if l is greater than 31  \n\t\t# Return False if r is greater than 31  \n\t\t# Return False if l is less than -32  \n\t\t# Return False if r is less than -32  \n\t\t# Return False if l is greater than -1  \n\t\t# Return False if r is greater than -1  \n\t\t# Return False if l is less than -1  \n\t\t# Return False if r is less than -1  \n\t\t# Return False if l is greater than 0  \n\t\t# Return False if r is greater than 0  \n\t\t# Return False if l is greater than 1  \n\t\t# Return False if r is greater than 1  \n\t\t# Return False if l is greater than 2  \n\t\t# Return False if r is greater than 2  \n\t\t# Return False if l is greater than 3  \n\t\t# Return False if r is greater than 3  \n\t\t# Return False if l is greater than 4  \n\t\t# Return False if r is greater than 4  \n\t\t# Return False if l is greater than 5  \n\t\t# Return False if r is greater than 5  \n\t\t# Return False if l is greater than 6  \n\t\t# Return False if r is greater than 6  \n\t\t# Return False if l is greater than 7  \n\t\t# Return False if r is greater than 7  \n\t\t# Return False if l is greater than 8  \n\t\t# Return False if r is greater than 8  \n\t\t# Return False if l is greater than 9  \n\t\t# Return False if r is greater than 9  \n\t\t# Return False if l is greater than 10  \n\t\t# Return False if r is greater than 10  \n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t# Return True if all the bits are set in the given range  \n\t\t# Return False if any of the bit is set in the given range  \n\t\t# Return False if all the bits are unset in the given range  \n\t\t# Return False if n is not a positive integer  \n\t\t# Return False if l is not a positive integer  \n\t\t# Return False if r is not a positive integer  \n\t\t# Return False if l is greater than r  \n\t\t# Return False if l is greater than n  \n\t\t# Return False if r is greater than n  \n\t\t# Return False if l is less than 0  \n\t\t# Return False if r is less than 0  \n\t\t# Return False if l is greater than 31  \n\t\t# Return False if r is greater than 31  \n\t\t# Return False if l is less than -32  \n\t\t# Return False if r is less than -32  \n\t\t# Return False if l is greater than -1  \n\t\t# Return False if r is greater than -1  \n\t\t# Return False if l is less than -1  \n\t\t# Return False if r is less than -1  \n\t\t# Return False if l is greater than 0  \n\t\t# Return False if r is greater than 0  \n\t\t# Return False if l is greater than 1  \n\t\t# Return False if r is greater than 1  \n\t\t# Return False if l is greater than 2  \n\t\t# Return False if r is greater than 2  \n\t\t# Return False if l is greater than 3  \n\t\t# Return False if r is greater than 3  \n\t\t# Return False if l is greater than 4  \n\t\t# Return False if r is greater than 4  \n\t\t# Return False if l is greater than 5  \n\t\t# Return False if r is greater than 5  \n\t\t# Return False if l is greater than 6  \n\t\t# Return False if r is greater than 6  \n\t\t# Return False if l is greater than 7  \n\t\t# Return False if r is greater than 7  \n\t\t# Return False if l is greater than 8  \n\t\t# Return False if r is greater than 8  \n\t\t# Return False if l is greater than 9  \n\t\t# Return False if r is greater than 9  \n\t\t# Return False if l is greater than 10  \n\t\t# Return False if r is greater than 10  \n\t"}
{"ID": 601, "source": "MBPP:238", "prompt": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t", "predict": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\n\"\"\"\ndef number_of_substrings(str): \n\t\tcount = 0\n\t\tfor i in range(len(str)): \n\t\t\tfor j in range(i+1, len(str)+1): \n\t\t\t\tif str[i:j]!= \"\": \n\t\t\t\t\tcount += 1\n\t\treturn count\n\nprint(number_of_substrings(\"abc\"))\nprint(number_of_substrings(\"abcabc\"))\nprint(number_of_substrings(\"abcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(number_of_substrings(\"abc\"))\nprint(number_of_substrings(\"abcabc\"))\nprint(number_of_substrings(\"abcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t\n    # create a dictionary with key as first element of tuple and value as count of first element of tuple \n    d = {} \n    for i in lst: \n        if i[0] in d: \n            d[i[0]] += 1\n        else: \n            d[i[0]] = 1\n  \n    # sort the dictionary based on value \n    sorted_d = sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True) \n  \n    # create a list of tuples from the dictionary \n    sorted_tuples = [] \n    for i in sorted_d: \n        sorted_tuples.append((i[0], i[1])) \n  \n    # create a list of tuples from the given list \n    given_tuples = [] \n    for i in lst: \n        given_tuples.append((i[0], i[1])) \n  \n    # create a list of tuples from the sorted list of tuples \n    sorted_list = [] \n    for i in sorted_tuples: \n        for j in given_tuples: \n            if i[0] == j[0]: \n                sorted_list.append(j) \n                break\n  \n    return sorted_list\n\nif __name__ == \"__main__\":\n    lst = [(1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4),", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "    lst = [(1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4), (2, 3), (1, 2), (2, 3), (3, 4),"}
{"ID": 615, "source": "MBPP:252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t", "predict": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"\ndef convert(numbers):    \n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of polar coordinates\n\t\t\"\"\"\n\t\tpolar_coordinates = []\n\t\tfor number in numbers:\n\t\t\tpolar_coordinates.append(cmath.polar(number))\n\t\treturn polar_coordinates\n\n\"\"\"\nWrite a python function to convert polar coordinates to complex numbers.\n\"\"\"\ndef convert_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of polar coordinates\n\t\t:return: list of complex numbers\n\t\t\"\"\"\n\t\tcomplex_numbers = []\n\t\tfor number in numbers:\n\t\t\tcomplex_numbers.append(cmath.rect(number[0], number[1]))\n\t\treturn complex_numbers\n\n\"\"\"\nWrite a python function to convert complex numbers to rectangular coordinates.\n\"\"\"\ndef convert_rect(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of rectangular coordinates\n\t\t\"\"\"\n\t\trectangular_coordinates = []\n\t\tfor number in numbers:\n\t\t\trectangular_coordinates.append(number.real)\n\t\t\trectangular_coordinates.append(number.imag)\n\t\treturn rectangular_coordinates\n\n\"\"\"\nWrite a python function to convert rectangular coordinates to complex numbers.\n\"\"\"\ndef convert_rect_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of rectangular coordinates\n\t\t:return: list of complex numbers\n\t\t\"\"\"\n\t\tcomplex_numbers = []\n\t\tfor i in range(0, len(numbers), 2):\n\t\t\tcomplex_numbers.append(complex(numbers[i], numbers[i+1]))\n\t\treturn complex_numbers\n\n\"\"\"\nWrite a python function to convert complex numbers to magnitude and phase.\n\"\"\"\ndef convert_magnitude_phase(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of magnitude and phase\n\t\t\"\"\"\n\t\tmagnitude_phase = []\n\t\tfor number in numbers:\n\t\t\tmagnitude_phase.append(cmath.polar(number)[0])\n\t\t\tmagnitude_phase.append(cmath.polar(number)[1])\n\t\treturn magnitude_phase\n\n\"\"\"\nWrite a python function to convert magnitude and phase to complex numbers.\n\"\"\"\ndef convert_magnitude_phase_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of magnitude and phase\n\t\t:return: list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a python function to convert polar coordinates to complex numbers.\n\"\"\"\ndef convert_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of polar coordinates\n\t\t:return: list of complex numbers\n\t\t\"\"\"\n\t\tcomplex_numbers = []\n\t\tfor number in numbers:\n\t\t\tcomplex_numbers.append(cmath.rect(number[0], number[1]))\n\t\treturn complex_numbers\n\n\"\"\"\nWrite a python function to convert complex numbers to rectangular coordinates.\n\"\"\"\ndef convert_rect(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of rectangular coordinates\n\t\t\"\"\"\n\t\trectangular_coordinates = []\n\t\tfor number in numbers:\n\t\t\trectangular_coordinates.append(number.real)\n\t\t\trectangular_coordinates.append(number.imag)\n\t\treturn rectangular_coordinates\n\n\"\"\"\nWrite a python function to convert rectangular coordinates to complex numbers.\n\"\"\"\ndef convert_rect_back(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of rectangular coordinates\n\t\t:return: list of complex numbers\n\t\t\"\"\"\n\t\tcomplex_numbers = []\n\t\tfor i in range(0, len(numbers), 2):\n\t\t\tcomplex_numbers.append(complex(numbers[i], numbers[i+1]))\n\t\treturn complex_numbers\n\n\"\"\"\nWrite a python function to convert complex numbers to magnitude and phase.\n\"\"\"\ndef convert_magnitude_phase(numbers):\n\t\t\"\"\"\n\t\t:param numbers: list of complex numbers\n\t\t:return: list of magnitude and phase"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t\n    # Initialize array of primes \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):\n\t\treturn d_age / 7\n\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t\treturn h_age * 7\n\n\"\"\"\nWrite a function to calculate a dog's age in human years.\n\"\"\"\ndef human_age(d_age):"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "\"\"\"\nWrite a function to find then'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\n    # Your code here\n    return n*(2*n-1)\n\nprint(find_star_num(10))\n# -\n\n# ### 2. Write a function to find then'th Fibonacci number.\n\n# +\n\"\"\"\nWrite a function to find then'th Fibonacci number.\n\"\"\"\ndef fibonacci(n): \n\t\n    # Your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n# -\n\n# ### 3. Write a function to find then'th triangular number.\n\n# +\n\"\"\"\nWrite a function to find then'th triangular number.\n\"\"\"\ndef triangular(n): \n\t\n    # Your code here\n    return n*(n+1)/2\n\nprint(triangular(10))\n# -\n\n# ### 4. Write a function to find then'th Catalan number.\n\n# +\n\"\"\"\nWrite a function to find then'th Catalan number.\n\"\"\"\ndef catalan(n): \n\t\n    # Your code here\n    return (4**n)/(n+1)/(n+2)/(n+3)\n\nprint(catalan(10))\n# -\n\n# ### 5. Write a function to find then'th Hermite polynomial.\n\n# +\n\"\"\"\nWrite a function to find then'th Hermite polynomial.\n\"\"\"\ndef hermite(n): \n\t\n    # Your code here\n    return 2**n*factorial(n)/(factorial(n-1)**2)\n\nprint(hermite(10))\n# -\n\n# ### 6. Write a function to find then'th Bernoulli number.\n\n# +\n\"\"\"\nWrite a function to find then'th Bernoulli number.\n\"\"\"\ndef bernoulli(n): \n\t\n    # Your code here\n    return (1/2)**n*binomial(2*n,n)/(factorial(n))\n\nprint(bernoulli(10))\n# -\n\n# ### 7. Write a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(fibonacci(10))\n# -\n\n# ### 3. Write a function to find then'th triangular number.\n\n# +\n\"\"\"\nWrite a function to find then'th triangular number.\n\"\"\"\ndef triangular(n): \n\t\n    # Your code here\n    return n*(n+1)/2\n\nprint(triangular(10))\n# -\n\n# ### 4. Write a function to find then'th Catalan number.\n\n# +\n\"\"\"\nWrite a function to find then'th Catalan number.\n\"\"\"\ndef catalan(n): \n\t\n    # Your code here\n    return (4**n)/(n+1)/(n+2)/(n+3)\n\nprint(catalan(10))\n# -\n\n# ### 5. Write a function to find then'th Hermite polynomial.\n\n# +\n\"\"\"\nWrite a function to find then'th Hermite polynomial.\n\"\"\"\ndef hermite(n): \n\t\n    # Your code here\n    return 2**n*factorial(n)/(factorial(n-1)**2)\n\nprint(hermite(10))\n# -\n\n# ### 6. Write a function to find then'th Bernoulli number.\n\n# +\n\"\"\"\nWrite a function to find then'th Bernoulli number.\n\"\"\"\ndef bernoulli(n): "}
{"ID": 637, "source": "MBPP:274", "prompt": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \n\t\tsum = 0\n\t\tfor i in range(0, n+1, 2): \n\t\t\tsum += binomialCoeff(n, i) \n\t\treturn sum \n\n\"\"\"\nWrite a python function to find sum of odd index binomial coefficients.\n\"\"\"\ndef odd_binomial_Coeff_Sum( n): \n\t\tsum = 0\n\t\tfor i in range(1, n+1, 2): \n\t\t\tsum += binomialCoeff(n, i) \n\t\treturn sum \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn sum \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\n\"\"\"\ndef binomialCoeff(n, k): \n\tif k > n - k: \n\t\tk = n - k \n\tres = 1\n\tfor i in range(0, k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t\t# Your code goes here \n\t\t# return True or False \n\t\t# return True if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t# return True or False \n\t\t# return True if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than the digit itself. \n\t\t# return False if the frequency of each digit is greater than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is equal to the digit itself. \n\t\t# return False if the frequency of each digit is less than or equal to the digit itself. \n\t\t# return False if the frequency of each digit is greater than the digit itself. \n\t\t# return"}
{"ID": 652, "source": "MBPP:289", "prompt": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t", "predict": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\n\"\"\"\ndef odd_Days(N): \n\t\treturn (N%2)\n\n\"\"\"\nWrite a python function to check whether a given number is a prime number or not.\n\"\"\"\ndef is_Prime(N):\n\tif N==1:\n\t\treturn False\n\tfor i in range(2,N):\n\t\tif N%i==0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to print the first n prime numbers.\n\"\"\"\ndef print_Prime(N):\n\tfor i in range(1,N+1):\n\t\tif is_Prime(i):\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the first n even numbers.\n\"\"\"\ndef print_Even(N):\n\tfor i in range(2,N+1,2):\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the first n odd numbers.\n\"\"\"\ndef print_Odd(N):\n\tfor i in range(1,N+1,2):\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the fibonacci series.\n\"\"\"\ndef print_Fibonacci(N):\n\ta,b=0,1\n\tfor i in range(N):\n\t\tprint(a)\n\t\ta,b=b,a+b\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif N==1:\n\t\treturn False\n\tfor i in range(2,N):\n\t\tif N%i==0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a python function to print the first n prime numbers.\n\"\"\"\ndef print_Prime(N):\n\tfor i in range(1,N+1):\n\t\tif is_Prime(i):\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the first n even numbers.\n\"\"\"\ndef print_Even(N):\n\tfor i in range(2,N+1,2):\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the first n odd numbers.\n\"\"\"\ndef print_Odd(N):\n\tfor i in range(1,N+1,2):\n\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the fibonacci series.\n\"\"\"\ndef print_Fibonacci(N):\n\ta,b=0,1\n\tfor i in range(N):\n\t\tprint(a)\n\t\ta,b=b,a+b\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\"\nWrite a python function to print the prime factors of a given number.\n\"\"\"\ndef print_Prime_Factors(N):\n\tfor i in range(2,N+1):\n\t\tif N%i==0:\n\t\t\tprint(i)\n\n\"\"\""}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t\tif a>b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(maximum(10,20))\nprint(maximum(20,10))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum(a,b,c):   \n\t\tif a>b and a>c:\n\t\t\treturn a\n\t\telif b>a and b>c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\nprint(maximum(10,20,30))\nprint(maximum(20,10,30))\nprint(maximum(20,30,10))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum(a,b,c,d):   \n\t\tif a>b and a>c and a>d:\n\t\t\treturn a\n\t\telif b>a and b>c and b>d:\n\t\t\treturn b\n\t\telif c>a and c>b and c>d:\n\t\t\treturn c\n\t\telse:\n\t\t\treturn d\n\nprint(maximum(10,20,30,40))\nprint(maximum(20,10,30,40))\nprint(maximum(20,30,10,40))\nprint(maximum(20,30,40,10))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum(a,b,c,d,e):   \n\t\tif a>b and a>c and a>d and a>e:\n\t\t\treturn a\n\t\telif b>a and b>c and b>d and b>e:\n\t\t\treturn b\n\t\telif c>a and c>b and c>d and c>e:\n\t\t\treturn c\n\t\telif d>a and d>b and d>c and d>e:\n\t\t\treturn d\n\t\telse:\n\t\t\treturn e\n\nprint(maximum(10,20,30,40,50))\nprint(maximum(20,10,30,40,50))\nprint(maximum(20,30,10,40,50))\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif a>b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\nprint(maximum(10,20))\nprint(maximum(20,10))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum(a,b,c):   \n\t\tif a>b and a>c:\n\t\t\treturn a\n\t\telif b>a and b>c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\nprint(maximum(10,20,30))\nprint(maximum(20,10,30))\nprint(maximum(20,30,10))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum(a,b,c,d):   \n\t\tif a>b and a>c and a>d:\n\t\t\treturn a\n\t\telif b>a and b>c and b>d:\n\t\t\treturn b\n\t\telif c>a and c>b and c>d:\n\t\t\treturn c\n\t\telse:\n\t\t\treturn d\n\nprint(maximum(10,20,30,40))\nprint(maximum(20,10,30,40))\nprint(maximum(20,30,10,40))\nprint(maximum(20,30,40,10))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum(a,b,c,d,e):   \n\t\tif a>b and a>c and a>d and a>e:\n\t\t\treturn a\n\t\telif b>a and b>c and b>d and b>e:"}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 1 << (n - 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 1 << (n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 1 << (n - 1)\n\n\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_right_most_unset_bit(n): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn 1 << (n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)\n\n\"\"\"\nWrite a python function to set all the unset bits in a given range.\n\"\"\"\ndef set_unset_bits(n, m): \n\t\t\"\"\"\n\t\t:type n: int\n\t\t:type m: int\n\t\t:rtype: int\n\t\t\"\"\"\n\t\treturn (1 << m) - 1 - (1 << n - 1)"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t\treturn (s*(s+1)*(s+2))/6\n\n\"\"\"\nWrite a python function to find the maximum area of a cuboid with given length, width and height.\n\"\"\"\ndef max_area (l, w, h): \n\t\treturn 2*(l*w + l*h + w*h)\n\n\"\"\"\nWrite a python function to find the maximum perimeter of a cuboid with given length, width and height.\n\"\"\"\ndef max_perimeter (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the maximum diagonal sum of a cuboid with given length, width and height.\n\"\"\"\ndef max_diagonal_sum (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the maximum diagonal difference of a cuboid with given length, width and height.\n\"\"\"\ndef max_diagonal_diff (l, w, h): \n\t\treturn abs(l-w) + abs(l-h) + abs(w-h)\n\n\"\"\"\nWrite a python function to find the volume of a cuboid with length, width and height.\n\"\"\"\ndef volume (l, w, h): \n\t\treturn l*w*h\n\n\"\"\"\nWrite a python function to find the area of a cuboid with length, width and height.\n\"\"\"\ndef area (l, w, h): \n\t\treturn 2*(l*w + l*h + w*h)\n\n\"\"\"\nWrite a python function to find the perimeter of a cuboid with length, width and height.\n\"\"\"\ndef perimeter (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the diagonal sum of a cuboid with length, width and height.\n\"\"\"\ndef diagonal_sum (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the diagonal difference of a cuboid with length, width and height.\n\"\"\"\ndef diagonal_diff (l, w, h): \n\t\treturn abs(l-w) + abs(l-h) + abs(w-h)\n\n\"\"\"\nWrite a python function to find the surface area of a cuboid with length, width and height.\n\"\"\"\ndef surface", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (s*(s+1)*(s+2))/6\n\n\"\"\"\nWrite a python function to find the maximum area of a cuboid with given length, width and height.\n\"\"\"\ndef max_area (l, w, h): \n\t\treturn 2*(l*w + l*h + w*h)\n\n\"\"\"\nWrite a python function to find the maximum perimeter of a cuboid with given length, width and height.\n\"\"\"\ndef max_perimeter (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the maximum diagonal sum of a cuboid with given length, width and height.\n\"\"\"\ndef max_diagonal_sum (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the maximum diagonal difference of a cuboid with given length, width and height.\n\"\"\"\ndef max_diagonal_diff (l, w, h): \n\t\treturn abs(l-w) + abs(l-h) + abs(w-h)\n\n\"\"\"\nWrite a python function to find the volume of a cuboid with length, width and height.\n\"\"\"\ndef volume (l, w, h): \n\t\treturn l*w*h\n\n\"\"\"\nWrite a python function to find the area of a cuboid with length, width and height.\n\"\"\"\ndef area (l, w, h): \n\t\treturn 2*(l*w + l*h + w*h)\n\n\"\"\"\nWrite a python function to find the perimeter of a cuboid with length, width and height.\n\"\"\"\ndef perimeter (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the diagonal sum of a cuboid with length, width and height.\n\"\"\"\ndef diagonal_sum (l, w, h): \n\t\treturn l+w+h\n\n\"\"\"\nWrite a python function to find the diagonal difference of a cuboid with length, width and height.\n\"\"\"\ndef diagonal_diff (l, w, h): \n\t\treturn abs(l-w) + abs(l-h) + abs(w-h)\n\n\"\"\"\nWrite a python function to find the surface area of a cuboid with length, width and height.\n\"\"\"\ndef surface"}
{"ID": 696, "source": "MBPP:333", "prompt": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t", "predict": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): \n\t\treturn(sorted(sub_li, key = lambda x: x[1])) \n\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\n\"\"\"\ndef Sort(sub_li): "}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t\t\"\"\"\n\t\t:param x: int\n\t\t:param y: int\n\t\t:return: int\n\t\t\"\"\"\n\t\tif x > y:\n\t\t\treturn -1\n\t\tif x == y:\n\t\t\treturn x\n\t\tif x == 1:\n\t\t\treturn 1\n\t\tif y == 1:\n\t\t\treturn 1\n\t\tif x == 2:\n\t\t\treturn 2\n\t\tif y == 2:\n\t\t\treturn 2\n\t\tif x == 3:\n\t\t\treturn 3\n\t\tif y == 3:\n\t\t\treturn 3\n\t\tif x == 4:\n\t\t\treturn 2\n\t\tif y == 4:\n\t\t\treturn 2\n\t\tif x == 5:\n\t\t\treturn 5\n\t\tif y == 5:\n\t\t\treturn 5\n\t\tif x == 6:\n\t\t\treturn 3\n\t\tif y == 6:\n\t\t\treturn 3\n\t\tif x == 7:\n\t\t\treturn 7\n\t\tif y == 7:\n\t\t\treturn 7\n\t\tif x == 8:\n\t\t\treturn 2\n\t\tif y == 8:\n\t\t\treturn 2\n\t\tif x == 9:\n\t\t\treturn 3\n\t\tif y == 9:\n\t\t\treturn 3\n\t\tif x == 10:\n\t\t\treturn 2\n\t\tif y == 10:\n\t\t\treturn 2\n\t\tif x == 11:\n\t\t\treturn 11\n\t\tif y == 11:\n\t\t\treturn 11\n\t\tif x == 12:\n\t\t\treturn 2\n\t\tif y == 12:\n\t\t\treturn 2\n\t\tif x == 13:\n\t\t\treturn 13\n\t\tif y == 13:\n\t\t\treturn 13\n\t\tif x == 14:\n\t\t\treturn 2\n\t\tif y == 14:\n\t\t\treturn 2\n\t\tif x == 15:\n\t\t\treturn 3\n\t\tif y == 15:\n\t\t\treturn 3\n\t\tif x == 16:\n\t\t\treturn 2\n\t\tif y == 16:\n\t\t\treturn 2\n\t\tif x == 17:\n\t\t\treturn 17\n\t\tif y == 17:\n\t\t\treturn 17", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif x > y:\n\t\t\treturn -1\n\t\tif x == y:\n\t\t\treturn x\n\t\tif x == 1:\n\t\t\treturn 1\n\t\tif y == 1:\n\t\t\treturn 1\n\t\tif x == 2:\n\t\t\treturn 2\n\t\tif y == 2:\n\t\t\treturn 2\n\t\tif x == 3:\n\t\t\treturn 3\n\t\tif y == 3:\n\t\t\treturn 3\n\t\tif x == 4:\n\t\t\treturn 2\n\t\tif y == 4:\n\t\t\treturn 2\n\t\tif x == 5:\n\t\t\treturn 5\n\t\tif y == 5:\n\t\t\treturn 5\n\t\tif x == 6:\n\t\t\treturn 3\n\t\tif y == 6:\n\t\t\treturn 3\n\t\tif x == 7:\n\t\t\treturn 7\n\t\tif y == 7:\n\t\t\treturn 7\n\t\tif x == 8:\n\t\t\treturn 2\n\t\tif y == 8:\n\t\t\treturn 2\n\t\tif x == 9:\n\t\t\treturn 3\n\t\tif y == 9:\n\t\t\treturn 3\n\t\tif x == 10:\n\t\t\treturn 2\n\t\tif y == 10:\n\t\t\treturn 2\n\t\tif x == 11:\n\t\t\treturn 11\n\t\tif y == 11:\n\t\t\treturn 11\n\t\tif x == 12:\n\t\t\treturn 2\n\t\tif y == 12:\n\t\t\treturn 2\n\t\tif x == 13:\n\t\t\treturn 13\n\t\tif y == 13:\n\t\t\treturn 13\n\t\tif x == 14:\n\t\t\treturn 2\n\t\tif y == 14:\n\t\t\treturn 2\n\t\tif x == 15:\n\t\t\treturn 3\n\t\tif y == 15:\n\t\t\treturn 3\n\t\tif x == 16:\n\t\t\treturn 2\n\t\tif y == 16:\n\t\t\treturn 2\n\t\tif x == 17:\n\t\t\treturn 17\n\t\tif y == 17:\n\t\t\treturn 17"}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t\treturn m*n\n\nprint(count_Squares(3,4))\n\n\"\"\"\nWrite a python function to check whether a number is a prime number or not.\n\"\"\"\ndef is_prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2,n):\n\t\tif n%i == 0:\n\t\t\treturn False\n\treturn True\n\nprint(is_prime(11))\n\n\"\"\"\nWrite a python function to print the even numbers from a given list.\n\"\"\"\ndef print_even(l):\n\tfor i in l:\n\t\tif i%2 == 0:\n\t\t\tprint(i)\n\nprint_even([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the odd numbers from a given list.\n\"\"\"\ndef print_odd(l):\n\tfor i in l:\n\t\tif i%2!= 0:\n\t\t\tprint(i)\n\nprint_odd([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the prime numbers from a given list.\n\"\"\"\ndef print_prime(l):\n\tfor i in l:\n\t\tif is_prime(i):\n\t\t\tprint(i)\n\nprint_prime([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the numbers which are divisible by 5 and 7 from a given list.\n\"\"\"\ndef print_divisible(l):\n\tfor i in l:\n\t\tif i%5 == 0 and i%7 == 0:\n\t\t\tprint(i)\n\nprint_divisible([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the numbers which are divisible by 5 or 7 from a given list.\n\"\"\"\ndef print_divisible_or(l):\n\tfor i in l:\n\t\tif i%5 == 0 or i%7 == 0:\n\t\t\tprint(i)\n\nprint_divisible_or([1,2,3,4,5,6,7,8,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\treturn True\n\nprint(is_prime(11))\n\n\"\"\"\nWrite a python function to print the even numbers from a given list.\n\"\"\"\ndef print_even(l):\n\tfor i in l:\n\t\tif i%2 == 0:\n\t\t\tprint(i)\n\nprint_even([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the odd numbers from a given list.\n\"\"\"\ndef print_odd(l):\n\tfor i in l:\n\t\tif i%2!= 0:\n\t\t\tprint(i)\n\nprint_odd([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the prime numbers from a given list.\n\"\"\"\ndef print_prime(l):\n\tfor i in l:\n\t\tif is_prime(i):\n\t\t\tprint(i)\n\nprint_prime([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the numbers which are divisible by 5 and 7 from a given list.\n\"\"\"\ndef print_divisible(l):\n\tfor i in l:\n\t\tif i%5 == 0 and i%7 == 0:\n\t\t\tprint(i)\n\nprint_divisible([1,2,3,4,5,6,7,8,9])\n\n\"\"\"\nWrite a python function to print the numbers which are divisible by 5 or 7 from a given list.\n\"\"\"\ndef print_divisible_or(l):\n\tfor i in l:\n\t\tif i%5 == 0 or i%7 == 0:\n\t\t\tprint(i)\n\nprint_divisible_or([1,2,3,4,5,6,7,8,"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t\treturn 2*radius\n\n\"\"\"\nWrite a python function to count the number of squares in a circle of radius r.\n\"\"\"\ndef count_Squares(radius):  \n\t\treturn radius\n\n\"\"\"\nWrite a python function to count the number of pentagons in a circle of radius r.\n\"\"\"\ndef count_Pentagons(radius):  \n\t\treturn 5*radius\n\n\"\"\"\nWrite a python function to count the number of hexagons in a circle of radius r.\n\"\"\"\ndef count_Hexagons(radius):  \n\t\treturn 6*radius\n\n\"\"\"\nWrite a python function to count the number of heptagons in a circle of radius r.\n\"\"\"\ndef count_Heptagons(radius):  \n\t\treturn 7*radius\n\n\"\"\"\nWrite a python function to count the number of octagons in a circle of radius r.\n\"\"\"\ndef count_Octagons(radius):  \n\t\treturn 8*radius\n\n\"\"\"\nWrite a python function to count the number of nonagons in a circle of radius r.\n\"\"\"\ndef count_Nonagons(radius):  \n\t\treturn 9*radius\n\n\"\"\"\nWrite a python function to count the number of decagons in a circle of radius r.\n\"\"\"\ndef count_Decagons(radius):  \n\t\treturn 10*radius\n\n\"\"\"\nWrite a python function to count the number of undecagons in a circle of radius r.\n\"\"\"\ndef count_Undecagons(radius):  \n\t\treturn 11*radius\n\n\"\"\"\nWrite a python function to count the number of duodecagons in a circle of radius r.\n\"\"\"\ndef count_Duodecagons(radius):  \n\t\treturn 12*radius\n\n\"\"\"\nWrite a python function to count the number of tredecagons in a circle of radius r.\n\"\"\"\ndef count_Tredecagons(radius):  \n\t\treturn 13*radius\n\n\"\"\"\nWrite a python function to count the number of quattuordecagons in a circle of radius r.\n\"\"\"\ndef count_Quattuordecagons(radius):  \n\t\treturn 14*radius\n\n\"\"\"\nWrite a python function to count the number of quindecagons in a circle of radius r.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to count the number of squares in a circle of radius r.\n\"\"\"\ndef count_Squares(radius):  \n\t\treturn radius\n\n\"\"\"\nWrite a python function to count the number of pentagons in a circle of radius r.\n\"\"\"\ndef count_Pentagons(radius):  \n\t\treturn 5*radius\n\n\"\"\"\nWrite a python function to count the number of hexagons in a circle of radius r.\n\"\"\"\ndef count_Hexagons(radius):  \n\t\treturn 6*radius\n\n\"\"\"\nWrite a python function to count the number of heptagons in a circle of radius r.\n\"\"\"\ndef count_Heptagons(radius):  \n\t\treturn 7*radius\n\n\"\"\"\nWrite a python function to count the number of octagons in a circle of radius r.\n\"\"\"\ndef count_Octagons(radius):  \n\t\treturn 8*radius\n\n\"\"\"\nWrite a python function to count the number of nonagons in a circle of radius r.\n\"\"\"\ndef count_Nonagons(radius):  \n\t\treturn 9*radius\n\n\"\"\"\nWrite a python function to count the number of decagons in a circle of radius r.\n\"\"\"\ndef count_Decagons(radius):  \n\t\treturn 10*radius\n\n\"\"\"\nWrite a python function to count the number of undecagons in a circle of radius r.\n\"\"\"\ndef count_Undecagons(radius):  \n\t\treturn 11*radius\n\n\"\"\"\nWrite a python function to count the number of duodecagons in a circle of radius r.\n\"\"\"\ndef count_Duodecagons(radius):  \n\t\treturn 12*radius\n\n\"\"\"\nWrite a python function to count the number of tredecagons in a circle of radius r.\n\"\"\"\ndef count_Tredecagons(radius):  \n\t\treturn 13*radius\n\n\"\"\"\nWrite a python function to count the number of quattuordecagons in a circle of radius r.\n\"\"\"\ndef count_Quattuordecagons(radius):  \n\t\treturn 14*radius\n\n\"\"\"\nWrite a python function to count the number of quindecagons in a circle of radius r.\n"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_2(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_3(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_4(rownum,colnum):\n\t\treturn [[0]*colnum]*rownum\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_5(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_6(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_7(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_8(rownum,colnum):\n\t\treturn [[0]*colnum]*rownum\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_9(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_10(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_11(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_2(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_3(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_4(rownum,colnum):\n\t\treturn [[0]*colnum]*rownum\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_5(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_6(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_7(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_8(rownum,colnum):\n\t\treturn [[0]*colnum]*rownum\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_9(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)] for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_10(rownum,colnum):\n\t\treturn [[0]*colnum for i in range(rownum)]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list_11(rownum,colnum):\n\t\treturn [[0 for i in range(colnum)]*rownum]\n\n\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\""}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t\tif N%2==0: \n\t\t\treturn \"Even\"\n\t\telse: \n\t\t\treturn \"Odd\"\n\nprint(even_or_odd(10))\nprint(even_or_odd(11))\nprint(even_or_odd(12))\nprint(even_or_odd(13))\nprint(even_or_odd(14))\nprint(even_or_odd(15))\nprint(even_or_odd(16))\nprint(even_or_odd(17))\nprint(even_or_odd(18))\nprint(even_or_odd(19))\nprint(even_or_odd(20))\nprint(even_or_odd(21))\nprint(even_or_odd(22))\nprint(even_or_odd(23))\nprint(even_or_odd(24))\nprint(even_or_odd(25))\nprint(even_or_odd(26))\nprint(even_or_odd(27))\nprint(even_or_odd(28))\nprint(even_or_odd(29))\nprint(even_or_odd(30))\nprint(even_or_odd(31))\nprint(even_or_odd(32))\nprint(even_or_odd(33))\nprint(even_or_odd(34))\nprint(even_or_odd(35))\nprint(even_or_odd(36))\nprint(even_or_odd(37))\nprint(even_or_odd(38))\nprint(even_or_odd(39))\nprint(even_or_odd(40))\nprint(even_or_odd(41))\nprint(even_or_odd(42))\nprint(even_or_odd(43))\nprint(even_or_odd(44))\nprint(even_or_odd(45))\nprint(even_or_odd(46))\nprint(even_or_odd(47))\nprint(even_or_odd(48))\nprint(even_or_odd(49))\nprint(even_or_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(even_or_odd(10))\nprint(even_or_odd(11))\nprint(even_or_odd(12))\nprint(even_or_odd(13))\nprint(even_or_odd(14))\nprint(even_or_odd(15))\nprint(even_or_odd(16))\nprint(even_or_odd(17))\nprint(even_or_odd(18))\nprint(even_or_odd(19))\nprint(even_or_odd(20))\nprint(even_or_odd(21))\nprint(even_or_odd(22))\nprint(even_or_odd(23))\nprint(even_or_odd(24))\nprint(even_or_odd(25))\nprint(even_or_odd(26))\nprint(even_or_odd(27))\nprint(even_or_odd(28))\nprint(even_or_odd(29))\nprint(even_or_odd(30))\nprint(even_or_odd(31))\nprint(even_or_odd(32))\nprint(even_or_odd(33))\nprint(even_or_odd(34))\nprint(even_or_odd(35))\nprint(even_or_odd(36))\nprint(even_or_odd(37))\nprint(even_or_odd(38))\nprint(even_or_odd(39))\nprint(even_or_odd(40))\nprint(even_or_odd(41))\nprint(even_or_odd(42))\nprint(even_or_odd(43))\nprint(even_or_odd(44))\nprint(even_or_odd(45))\nprint(even_or_odd(46))\nprint(even_or_odd(47))\nprint(even_or_odd(48))\nprint(even_or_odd(49))\nprint(even_or_"}
{"ID": 751, "source": "MBPP:388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"\ndef highest_Power_of_2(n): \n\t\treturn 2**(n-1)\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(4", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(4"}
{"ID": 765, "source": "MBPP:402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t", "predict": "\"\"\"\nWrite a function to compute the value of ncr%p.\n\"\"\"\ndef ncr_modp(n, r, p): \n\t\treturn (fact(n) % p * fact(r) % p * fact(n-r) % p) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in logarithmic time.\n\"\"\"\ndef ncr_modp_log(n, r, p): \n\t\treturn (fact_log(n, p) + fact_log(r, p) + fact_log(n-r, p) - fact_log(n-r-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time.\n\"\"\"\ndef ncr_modp_linear(n, r, p): \n\t\treturn (fact_linear(n, p) * fact_linear(r, p) * fact_linear(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix(n, r, p): \n\t\treturn (fact_matrix(n, p) * fact_matrix(r, p) * fact_matrix(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fast(n, r, p): \n\t\treturn (fact_matrix_fast(n, p) * fact_matrix_fast(r, p) * fact_matrix_fast(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fastest(n, r, p): \n\t\treturn (fact_matrix_fastest(n, p) * fact_matrix_fastest(r, p) * fact_matrix_fastest(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fastest_2(n, r, p): \n\t\treturn (fact_matrix_fastest_2(n, p) * fact_matrix_fastest_2(r, p", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time.\n\"\"\"\ndef ncr_modp_linear(n, r, p): \n\t\treturn (fact_linear(n, p) * fact_linear(r, p) * fact_linear(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix(n, r, p): \n\t\treturn (fact_matrix(n, p) * fact_matrix(r, p) * fact_matrix(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fast(n, r, p): \n\t\treturn (fact_matrix_fast(n, p) * fact_matrix_fast(r, p) * fact_matrix_fast(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fastest(n, r, p): \n\t\treturn (fact_matrix_fastest(n, p) * fact_matrix_fastest(r, p) * fact_matrix_fastest(n-r, p)) % p\n\n\"\"\"\nWrite a function to compute the value of ncr%p in linear time using matrix exponentiation.\n\"\"\"\ndef ncr_modp_matrix_fastest_2(n, r, p): \n\t\treturn (fact_matrix_fastest_2(n, p) * fact_matrix_fastest_2(r, p"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t\tfor i in range(len(tuple1)): \n\t\t\tif (tuplex == tuple1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a list.\n\"\"\"\ndef check_listex(listex,list1): \n\t\tfor i in range(len(list1)): \n\t\t\tif (listex == list1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a dictionary.\n\"\"\"\ndef check_dictex(dictex,dict1): \n\t\tfor i in range(len(dict1)): \n\t\t\tif (dictex == dict1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a set.\n\"\"\"\ndef check_setex(setex,set1): \n\t\tfor i in range(len(set1)): \n\t\t\tif (setex == set1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(len(tuple1)): \n\t\t\tif (tuplex == tuple1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a list.\n\"\"\"\ndef check_listex(listex,list1): \n\t\tfor i in range(len(list1)): \n\t\t\tif (listex == list1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a dictionary.\n\"\"\"\ndef check_dictex(dictex,dict1): \n\t\tfor i in range(len(dict1)): \n\t\t\tif (dictex == dict1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a set.\n\"\"\"\ndef check_setex(setex,set1): \n\t\tfor i in range(len(set1)): \n\t\t\tif (setex == set1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): \n\t\tfor i in range(len(string1)): \n\t\t\tif (stringex == string1[i]): \n\t\t\t\treturn True\n\t\treturn False\n\n\"\"\"\nWrite a function to check whether an element exists within a string.\n\"\"\"\ndef check_stringex(stringex,string1): "}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t\tif x%2==0:\n\t\t\treturn \"Even\"\n\t\telse:\n\t\t\treturn \"Odd\"\n\nprint(find_Parity(10))\nprint(find_Parity(11))\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_Parity(10))\nprint(find_Parity(11))\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint("}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t\tfor i in list1:  \n\t\t\tif i in list2:  \n\t\t\t\treturn True  \n\t\treturn False  \n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tif i in list2:  \n\t\t\t\treturn True  \n\t\treturn False  \n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0 or i%5 == 0:\n\t\t\tsum += i\n\treturn sum\n\n\"\"\"\nWrite a python function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\tsum = 0\n\tfor i in range(n):\n\t\tif i%3 == 0"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t\n    # Your code here\n    # return a list of tuples\n    # each tuple contains the common first element and the list of all the elements that follow it\n    # if the list contains only one element, the tuple should contain that element as the second element\n    # if the list is empty, return an empty list\n    # if the list contains only one element, return a list with one tuple\n    # if the list contains two elements, return a list with two tuples\n    # if the list contains three elements, return a list with three tuples\n    # if the list contains four elements, return a list with four tuples\n    # if the list contains five elements, return a list with five tuples\n    # if the list contains six elements, return a list with six tuples\n    # if the list contains seven elements, return a list with seven tuples\n    # if the list contains eight elements, return a list with eight tuples\n    # if the list contains nine elements, return a list with nine tuples\n    # if the list contains ten elements, return a list with ten tuples\n    # if the list contains eleven elements, return a list with eleven tuples\n    # if the list contains twelve elements, return a list with twelve tuples\n    # if the list contains thirteen elements, return a list with thirteen tuples\n    # if the list contains fourteen elements, return a list with fourteen tuples\n    # if the list contains fifteen elements, return a list with fifteen tuples\n    # if the list contains sixteen elements, return a list with sixteen tuples\n    # if the list contains seventeen elements, return a list with seventeen tuples\n    # if the list contains eighteen elements, return a list with eighteen tuples\n    # if the list contains nineteen elements, return a list with nineteen tuples\n    # if the list contains twenty elements, return a list with twenty tuples\n    # if the list contains twenty-one elements, return a list with twenty-one tuples\n    # if the list contains twenty-two elements, return a list with twenty-two tuples\n    # if the list contains twenty-three elements, return a list with twenty-three tuples\n    # if the list contains twenty-four elements, return a list with twenty-four tuples\n    # if the list contains twenty-five elements, return a list with twenty-five tuples\n    # if the list contains twenty-six elements", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "    # if the list contains only one element, the tuple should contain that element as the second element\n    # if the list is empty, return an empty list\n    # if the list contains only one element, return a list with one tuple\n    # if the list contains two elements, return a list with two tuples\n    # if the list contains three elements, return a list with three tuples\n    # if the list contains four elements, return a list with four tuples\n    # if the list contains five elements, return a list with five tuples\n    # if the list contains six elements, return a list with six tuples\n    # if the list contains seven elements, return a list with seven tuples\n    # if the list contains eight elements, return a list with eight tuples\n    # if the list contains nine elements, return a list with nine tuples\n    # if the list contains ten elements, return a list with ten tuples\n    # if the list contains eleven elements, return a list with eleven tuples\n    # if the list contains twelve elements, return a list with twelve tuples\n    # if the list contains thirteen elements, return a list with thirteen tuples\n    # if the list contains fourteen elements, return a list with fourteen tuples\n    # if the list contains fifteen elements, return a list with fifteen tuples\n    # if the list contains sixteen elements, return a list with sixteen tuples\n    # if the list contains seventeen elements, return a list with seventeen tuples\n    # if the list contains eighteen elements, return a list with eighteen tuples\n    # if the list contains nineteen elements, return a list with nineteen tuples\n    # if the list contains twenty elements, return a list with twenty tuples\n    # if the list contains twenty-one elements, return a list with twenty-one tuples\n    # if the list contains twenty-two elements, return a list with twenty-two tuples\n    # if the list contains twenty-three elements, return a list with twenty-three tuples\n    # if the list contains twenty-four elements, return a list with twenty-four tuples\n    # if the list contains twenty-five elements, return a list with twenty-five tuples\n    # if the list contains twenty-six elements"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = 0\n\t\tmax_lst = []\n\t\tfor i in range(len(lst)):\n\t\t\tif len(lst[i]) > max_len:\n\t\t\t\tmax_len = len(lst[i])\n\t\t\t\tmax_lst = lst[i]\n\t\treturn max_lst\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS(lst1, lst2, lst3):\n\tlst1 = set(lst1)\n\tlst2 = set(lst2)\n\tlst3 = set(lst3)\n\tlst1.intersection_update(lst2)\n\tlst1.intersection_update(lst3)\n\treturn list(lst1)\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS_DP(lst1, lst2, lst3):\n\tm = len(lst1)\n\tn = len(lst2)\n\tp = len(lst3)\n\tdp = [[[0 for i in range(p+1)] for j in range(n+1)] for k in range(m+1)]\n\tfor i in range(m+1):\n\t\tfor j in range(n+1):\n\t\t\tfor k in range(p+1):\n\t\t\t\tif i == 0 or j == 0 or k == 0:\n\t\t\t\t\tdp[i][j][k] = 0\n\t\t\t\telif lst1[i-1] == lst2[j-1] == lst3[k-1]:\n\t\t\t\t\tdp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\treturn dp[m][n][p]\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS_DP_2(lst1, lst2, lst3):\n\tm = len(lst1)\n\tn = len(lst2)\n\tp = len(lst3)\n\tdp = [[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tdp = [[[0 for i in range(p+1)] for j in range(n+1)] for k in range(m+1)]\n\tfor i in range(m+1):\n\t\tfor j in range(n+1):\n\t\t\tfor k in range(p+1):\n\t\t\t\tif i == 0 or j == 0 or k == 0:\n\t\t\t\t\tdp[i][j][k] = 0\n\t\t\t\telif lst1[i-1] == lst2[j-1] == lst3[k-1]:\n\t\t\t\t\tdp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\treturn dp[m][n][p]\n\n\"\"\"\nWrite a python function to find the longest common subsequence of three given lists.\n\"\"\"\ndef LCS_DP_2(lst1, lst2, lst3):\n\tm = len(lst1)\n\tn = len(lst2)\n\tp = len(lst3)\n\tdp = [["}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t\treturn (n*(n+1)*(2*n+1))/6\n\nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(100))\nprint(find_Average_Of_Cube(1000))\nprint(find_Average_Of_Cube(10000))\nprint(find_Average_Of_Cube(100000))\nprint(find_Average_Of_Cube(1000000))\nprint(find_Average_Of_Cube(10000000))\nprint(find_Average_Of_Cube(100000000))\nprint(find_Average_Of_Cube(1000000000))\nprint(find_Average_Of_Cube(10000000000))\nprint(find_Average_Of_Cube(100000000000))\nprint(find_Average_Of_Cube(1000000000000))\nprint(find_Average_Of_Cube(10000000000000))\nprint(find_Average_Of_Cube(100000000000000))\nprint(find_Average_Of_Cube(1000000000000000))\nprint(find_Average_Of_Cube(10000000000000000))\nprint(find_Average_Of_Cube(100000000000000000))\nprint(find_Average_Of_Cube(1000000000000000000))\nprint(find_Average_Of_Cube(10000000000000000000))\nprint(find_Average_Of_Cube(100000000000000000000))\nprint(find_Average_Of_Cube(10000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(100))\nprint(find_Average_Of_Cube(1000))\nprint(find_Average_Of_Cube(10000))\nprint(find_Average_Of_Cube(100000))\nprint(find_Average_Of_Cube(1000000))\nprint(find_Average_Of_Cube(10000000))\nprint(find_Average_Of_Cube(100000000))\nprint(find_Average_Of_Cube(1000000000))\nprint(find_Average_Of_Cube(10000000000))\nprint(find_Average_Of_Cube(100000000000))\nprint(find_Average_Of_Cube(1000000000000))\nprint(find_Average_Of_Cube(10000000000000))\nprint(find_Average_Of_Cube(100000000000000))\nprint(find_Average_Of_Cube(1000000000000000))\nprint(find_Average_Of_Cube(10000000000000000))\nprint(find_Average_Of_Cube(100000000000000000))\nprint(find_Average_Of_Cube(1000000000000000000))\nprint(find_Average_Of_Cube(10000000000000000000))\nprint(find_Average_Of_Cube(100000000000000000000))\nprint(find_Average_Of_Cube(10000000000000"}
{"ID": 788, "source": "MBPP:425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t", "predict": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"\ndef count_element_in_list(list1, x): \n\t\tcount = 0\n\t\tfor i in range(len(list1)): \n\t\t\tif list1[i] == x: \n\t\t\t\tcount += 1\n\t\treturn count\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin_value = list1[i]\n\treturn max_value, min_value\n\n\"\"\"\nWrite a function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min_list(list1):\n\tmax_value = list1[0]\n\tmin_value = list1[0]\n\tfor i in range(len(list1)):\n\t\tif list1[i] > max_value:\n\t\t\tmax_value = list1[i]\n\t\tif list1[i] < min_value:\n\t\t\tmin"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the symmetry axis of a parabola.\n\"\"\"\ndef parabola_symmetry_axis(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of a hyperbola.\n\"\"\"\ndef hyperbola_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the directrix of a hyperbola.\n\"\"\"\ndef hyperbola_directrix(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a hyperbola.\n\"\"\"\ndef hyperbola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the symmetry axis of a hyperbola.\n\"\"\"\ndef hyperbola_symmetry_axis(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of an ellipse.\n\"\"\"\ndef ellipse_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t\treturn (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the symmetry axis of a parabola.\n\"\"\"\ndef parabola_symmetry_axis(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the vertex of a hyperbola.\n\"\"\"\ndef hyperbola_vertex(a, b, c): \n\t\treturn (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n\"\"\"\nWrite a function to find the directrix of a hyperbola.\n\"\"\"\ndef hyperbola_directrix(a, b, c): "}
{"ID": 806, "source": "MBPP:443", "prompt": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\n\"\"\"\ndef largest_neg(list1): \n\t\treturn max(list1) if max(list1) < 0 else 0\n\nprint(largest_neg([1,2,3,-4,-5]))\nprint(largest_neg([1,-2,-3,-4,-5]))\nprint(largest_neg([-1,-2,-3,-4,-5]))\nprint(largest_neg([-1,2,3,-4,-5]))\nprint(largest_neg([-1,2,3,-4,5]))\nprint(largest_neg([-1,2,3,4,5]))\nprint(largest_neg([-1,2,3,4,-5]))\nprint(largest_neg([-1,2,3,4,-5,6]))\nprint(largest_neg([-1,2,3,4,-5,6,7]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(largest_neg([1,2,3,-4,-5]))\nprint(largest_neg([1,-2,-3,-4,-5]))\nprint(largest_neg([-1,-2,-3,-4,-5]))\nprint(largest_neg([-1,2,3,-4,-5]))\nprint(largest_neg([-1,2,3,-4,5]))\nprint(largest_neg([-1,2,3,4,5]))\nprint(largest_neg([-1,2,3,4,-5]))\nprint(largest_neg([-1,2,3,4,-5,6]))\nprint(largest_neg([-1,2,3,4,-5,6,7]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(largest_neg([-1,2,3,4,-5,6,7,8,9,1"}
{"ID": 815, "source": "MBPP:452", "prompt": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t", "predict": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn actual_cost - sale_amount\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn (sale_amount - actual_cost)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives loss percentage if the given amount has loss else return none.\n\"\"\"\ndef loss_percentage(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn (actual_cost - sale_amount)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn (sale_amount - actual_cost)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives loss percentage if the given amount has loss else return none.\n\"\"\"\ndef loss_percentage(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn (actual_cost - sale_amount)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn (sale_amount - actual_cost)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives loss percentage if the given amount has loss else return none.\n\"\"\"\ndef loss_percentage(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn (actual_cost - sale_amount)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit percentage if the given amount has profit else return none.\n\"\"\"\ndef profit_percentage(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn (sale_amount - actual_cost)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives loss percentage if the given amount has loss else return none.\n\"\"\"\ndef loss_percentage(actual_cost,sale_amount): \n\t\tif actual_cost > sale_amount:\n\t\t\treturn (actual_cost - sale_amount)/actual_cost\n\t\telse:\n\t\t\treturn None\n\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \n\t\tif actual_cost < sale_amount:\n\t\t\treturn sale_amount - actual_cost\n\t\telse:\n\t\t\treturn None\n\n"}
{"ID": 820, "source": "MBPP:457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t", "predict": "\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"\ndef Find_Min(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmin_lst = lst[0] \n\t\tfor i in lst: \n\t\t\tif len(i) < min_len: \n\t\t\t\tmin_len = len(i) \n\t\t\t\tmin_lst = i \n\t\treturn min_lst \n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = len(lst[0]) \n\t\tmax_lst = lst[0] \n\t\tfor i in lst: \n\t\t\tif len(i) > max_len: \n\t\t\t\tmax_len = len(i) \n\t\t\t\tmax_lst = i \n\t\treturn max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length.\n\"\"\"\ndef Find_Min_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmin_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == min_len: \n\t\t\t\tmin_lst.append(i) \n\t\treturn min_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having maximum length.\n\"\"\"\ndef Find_Max_List(lst): \n\t\tmax_len = len(lst[0]) \n\t\tmax_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == max_len: \n\t\t\t\tmax_lst.append(i) \n\t\treturn max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length and maximum length.\n\"\"\"\ndef Find_Min_Max_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmax_len = len(lst[0]) \n\t\tmin_lst = [] \n\t\tmax_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == min_len: \n\t\t\t\tmin_lst.append(i) \n\t\t\tif len(i) == max_len: \n\t\t\t\tmax_lst.append(i) \n\t\treturn min_lst, max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length and maximum length.\n\"\"\"\ndef Find_Min_Max_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmax_len", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmin_len = len(lst[0]) \n\t\tmin_lst = lst[0] \n\t\tfor i in lst: \n\t\t\tif len(i) < min_len: \n\t\t\t\tmin_len = len(i) \n\t\t\t\tmin_lst = i \n\t\treturn min_lst \n\n\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t\tmax_len = len(lst[0]) \n\t\tmax_lst = lst[0] \n\t\tfor i in lst: \n\t\t\tif len(i) > max_len: \n\t\t\t\tmax_len = len(i) \n\t\t\t\tmax_lst = i \n\t\treturn max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length.\n\"\"\"\ndef Find_Min_List(lst): \n\t\tmin_len = len(lst[0]) \n\t\tmin_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == min_len: \n\t\t\t\tmin_lst.append(i) \n\t\treturn min_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having maximum length.\n\"\"\"\ndef Find_Max_List(lst): \n\t\tmax_len = len(lst[0]) \n\t\tmax_lst = [] \n\t\tfor i in lst: \n\t\t\tif len(i) == max_len: \n\t\t\t\tmax_lst.append(i) \n\t\treturn max_lst \n\n\"\"\"\nWrite a python function to find the list of sublists having minimum length and maximum length."}
{"ID": 823, "source": "MBPP:460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t", "predict": "\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"\ndef Extract(lst): \n\t\treturn [lst[0] for lst in lst]\n\n\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef ExtractLast(lst): \n\t\treturn [lst[-1] for lst in lst]\n\n\"\"\"\nWrite a python function to get the nth element of each sublist.\n\"\"\"\ndef ExtractNth(lst, n): \n\t\treturn [lst[n] for lst in lst]\n\n\"\"\"\nWrite a python function to get the length of each sublist.\n\"\"\"\ndef Length(lst): \n\t\treturn [len(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the sum of each sublist.\n\"\"\"\ndef Sum(lst): \n\t\treturn [sum(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the even numbers of each sublist.\n\"\"\"\ndef Even(lst): \n\t\treturn [i for i in lst if i%2==0]\n\n\"\"\"\nWrite a python function to get the odd numbers of each sublist.\n\"\"\"\ndef Odd(lst): \n\t\treturn [i for i in lst if i%2!=0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 5 from each sublist.\n\"\"\"\ndef DivisibleBy5(lst): \n\t\treturn [i for i in lst if i%5==0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 10 from each sublist.\n\"\"\"\ndef DivisibleBy10(lst): \n\t\treturn [i for i in lst if i%10==0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 45 from each sublist.\n\"\"\"\ndef DivisibleBy45(lst): \n\t\treturn [i for i in lst if i%45==0]\n\n\"\"\"\nWrite a python function to get the unique numbers from each sublist.\n\"\"\"\ndef Unique(lst): \n\t\treturn [list(set(lst)) for lst in lst]\n\n\"\"\"\nWrite a python function to get the standard deviation of each sublist.\n\"\"\"\ndef StandardDeviation(lst): \n\t\treturn [statistics.stdev(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the variance", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to get the last element of each sublist.\n\"\"\"\ndef ExtractLast(lst): \n\t\treturn [lst[-1] for lst in lst]\n\n\"\"\"\nWrite a python function to get the nth element of each sublist.\n\"\"\"\ndef ExtractNth(lst, n): \n\t\treturn [lst[n] for lst in lst]\n\n\"\"\"\nWrite a python function to get the length of each sublist.\n\"\"\"\ndef Length(lst): \n\t\treturn [len(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the sum of each sublist.\n\"\"\"\ndef Sum(lst): \n\t\treturn [sum(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the even numbers of each sublist.\n\"\"\"\ndef Even(lst): \n\t\treturn [i for i in lst if i%2==0]\n\n\"\"\"\nWrite a python function to get the odd numbers of each sublist.\n\"\"\"\ndef Odd(lst): \n\t\treturn [i for i in lst if i%2!=0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 5 from each sublist.\n\"\"\"\ndef DivisibleBy5(lst): \n\t\treturn [i for i in lst if i%5==0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 10 from each sublist.\n\"\"\"\ndef DivisibleBy10(lst): \n\t\treturn [i for i in lst if i%10==0]\n\n\"\"\"\nWrite a python function to get the numbers which are divisible by 45 from each sublist.\n\"\"\"\ndef DivisibleBy45(lst): \n\t\treturn [i for i in lst if i%45==0]\n\n\"\"\"\nWrite a python function to get the unique numbers from each sublist.\n\"\"\"\ndef Unique(lst): \n\t\treturn [list(set(lst)) for lst in lst]\n\n\"\"\"\nWrite a python function to get the standard deviation of each sublist.\n\"\"\"\ndef StandardDeviation(lst): \n\t\treturn [statistics.stdev(lst) for lst in lst]\n\n\"\"\"\nWrite a python function to get the variance"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t\tl.sort() \n\t\tfor i in range(len(l)-1): \n\t\t\tif l[i] == l[i+1] - 1: \n\t\t\t\treturn True\n\t\treturn False\n\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1"}
{"ID": 842, "source": "MBPP:479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"\ndef first_Digit(n) :  \n\t\treturn n // 10 ** (len(str(n)) - 1) % 10\n\nprint(first_Digit(12345))\nprint(first_Digit(23456))\nprint(first_Digit(34567))\nprint(first_Digit(45678))\nprint(first_Digit(56789))\nprint(first_Digit(67890))\nprint(first_Digit(78901))\nprint(first_Digit(89012))\nprint(first_Digit(90123))\nprint(first_Digit(101234))\nprint(first_Digit(112345))\nprint(first_Digit(123456))\nprint(first_Digit(134567))\nprint(first_Digit(145678))\nprint(first_Digit(156789))\nprint(first_Digit(167890))\nprint(first_Digit(178901))\nprint(first_Digit(189012))\nprint(first_Digit(190123))\nprint(first_Digit(201234))\nprint(first_Digit(212345))\nprint(first_Digit(223456))\nprint(first_Digit(234567))\nprint(first_Digit(245678))\nprint(first_Digit(256789))\nprint(first_Digit(267890))\nprint(first_Digit(278901))\nprint(first_Digit(289012))\nprint(first_Digit(290123))\nprint(first_Digit(301234))\nprint(first_Digit(312345))\nprint(first_Digit(323456))\nprint(first_Digit(334567))\nprint(first_Digit(345678))\nprint(first_Digit(356789))\nprint(first_Digit(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_Digit(12345))\nprint(first_Digit(23456))\nprint(first_Digit(34567))\nprint(first_Digit(45678))\nprint(first_Digit(56789))\nprint(first_Digit(67890))\nprint(first_Digit(78901))\nprint(first_Digit(89012))\nprint(first_Digit(90123))\nprint(first_Digit(101234))\nprint(first_Digit(112345))\nprint(first_Digit(123456))\nprint(first_Digit(134567))\nprint(first_Digit(145678))\nprint(first_Digit(156789))\nprint(first_Digit(167890))\nprint(first_Digit(178901))\nprint(first_Digit(189012))\nprint(first_Digit(190123))\nprint(first_Digit(201234))\nprint(first_Digit(212345))\nprint(first_Digit(223456))\nprint(first_Digit(234567))\nprint(first_Digit(245678))\nprint(first_Digit(256789))\nprint(first_Digit(267890))\nprint(first_Digit(278901))\nprint(first_Digit(289012))\nprint(first_Digit(290123))\nprint(first_Digit(301234))\nprint(first_Digit(312345))\nprint(first_Digit(323456))\nprint(first_Digit(334567))\nprint(first_Digit(345678))\nprint(first_Digit(356789))\nprint(first_Digit("}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t\tpattern = r'[A-Z][a-z]+'\n\t\tresult = re.findall(pattern, text)\n\t\treturn result\n\nprint(match(\"Hello World\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(match(\"Hello World\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\"Hello World, how are you?\"))\nprint(match(\""}
{"ID": 846, "source": "MBPP:483", "prompt": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t", "predict": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \n\t\tfor i in range(1,1000000): \n\t\t\tif (i == 1): \n\t\t\t\tcontinue\n\t\t\tif (i == 2): \n\t\t\t\tcontinue\n\t\t\tif (i == 3): \n\t\t\t\tcontinue\n\t\t\tif (i == 4): \n\t\t\t\tcontinue\n\t\t\tif (i == 5): \n\t\t\t\tcontinue\n\t\t\tif (i == 6): \n\t\t\t\tcontinue\n\t\t\tif (i == 7): \n\t\t\t\tcontinue\n\t\t\tif (i == 8): \n\t\t\t\tcontinue\n\t\t\tif (i == 9): \n\t\t\t\tcontinue\n\t\t\tif (i == 10): \n\t\t\t\tcontinue\n\t\t\tif (i == 11): \n\t\t\t\tcontinue\n\t\t\tif (i == 12): \n\t\t\t\tcontinue\n\t\t\tif (i == 13): \n\t\t\t\tcontinue\n\t\t\tif (i == 14): \n\t\t\t\tcontinue\n\t\t\tif (i == 15): \n\t\t\t\tcontinue\n\t\t\tif (i == 16): \n\t\t\t\tcontinue\n\t\t\tif (i == 17): \n\t\t\t\tcontinue\n\t\t\tif (i == 18): \n\t\t\t\tcontinue\n\t\t\tif (i == 19): \n\t\t\t\tcontinue\n\t\t\tif (i == 20): \n\t\t\t\tcontinue\n\t\t\tif (i == 21): \n\t\t\t\tcontinue\n\t\t\tif (i == 22): \n\t\t\t\tcontinue\n\t\t\tif (i == 23): \n\t\t\t\tcontinue\n\t\t\tif (i == 24): \n\t\t\t\tcontinue\n\t\t\tif (i == 25): \n\t\t\t\tcontinue\n\t\t\tif (i == 26): \n\t\t\t\tcontinue\n\t\t\tif (i == 27): \n\t\t\t\tcontinue\n\t\t\tif (i == 28): \n\t\t\t\tcontinue\n\t\t\tif (i == 29): \n\t\t\t\tcontinue\n\t\t\tif (i == 30): \n\t\t\t\tcontinue\n\t\t\tif (i == 31): \n\t\t\t\tcontinue\n\t\t\tif (i == 32): \n\t\t\t\tcontinue\n\t\t\tif (i == 33): \n\t\t\t\tcontinue\n\t\t\tif (i == 34): \n\t\t\t\tcontinue\n\t\t\tif (i == 35): \n\t\t\t\tcontinue\n\t\t\tif (i == 36): \n\t\t\t\tcontinue\n\t\t\tif (i == 37): \n\t\t\t\tcontinue\n\t\t\tif (i == 38): \n\t\t\t\tcontinue\n\t\t\tif (i == 39): \n\t\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tif (i == 1): \n\t\t\t\tcontinue\n\t\t\tif (i == 2): \n\t\t\t\tcontinue\n\t\t\tif (i == 3): \n\t\t\t\tcontinue\n\t\t\tif (i == 4): \n\t\t\t\tcontinue\n\t\t\tif (i == 5): \n\t\t\t\tcontinue\n\t\t\tif (i == 6): \n\t\t\t\tcontinue\n\t\t\tif (i == 7): \n\t\t\t\tcontinue\n\t\t\tif (i == 8): \n\t\t\t\tcontinue\n\t\t\tif (i == 9): \n\t\t\t\tcontinue\n\t\t\tif (i == 10): \n\t\t\t\tcontinue\n\t\t\tif (i == 11): \n\t\t\t\tcontinue\n\t\t\tif (i == 12): \n\t\t\t\tcontinue\n\t\t\tif (i == 13): \n\t\t\t\tcontinue\n\t\t\tif (i == 14): \n\t\t\t\tcontinue\n\t\t\tif (i == 15): \n\t\t\t\tcontinue\n\t\t\tif (i == 16): \n\t\t\t\tcontinue\n\t\t\tif (i == 17): \n\t\t\t\tcontinue\n\t\t\tif (i == 18): \n\t\t\t\tcontinue\n\t\t\tif (i == 19): \n\t\t\t\tcontinue\n\t\t\tif (i == 20): \n\t\t\t\tcontinue\n\t\t\tif (i == 21): \n\t\t\t\tcontinue\n\t\t\tif (i == 22): \n\t\t\t\tcontinue\n\t\t\tif (i == 23): \n\t\t\t\tcontinue\n\t\t\tif (i == 24): \n\t\t\t\tcontinue\n\t\t\tif (i == 25): \n\t\t\t\tcontinue\n\t\t\tif (i == 26): \n\t\t\t\tcontinue\n\t\t\tif (i == 27): \n\t\t\t\tcontinue\n\t\t\tif (i == 28): \n\t\t\t\tcontinue\n\t\t\tif (i == 29): \n\t\t\t\tcontinue\n\t\t\tif (i == 30): \n\t\t\t\tcontinue\n\t\t\tif (i == 31): \n\t\t\t\tcontinue\n\t\t\tif (i == 32): \n\t\t\t\tcontinue\n\t\t\tif (i == 33): \n\t\t\t\tcontinue\n\t\t\tif (i == 34): \n\t\t\t\tcontinue\n\t\t\tif (i == 35): \n\t\t\t\tcontinue\n\t\t\tif (i == 36): \n\t\t\t\tcontinue\n\t\t\tif (i == 37): \n\t\t\t\tcontinue\n\t\t\tif (i == 38): \n\t\t\t\tcontinue\n\t\t\tif (i == 39): \n\t\t\t"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t\treturn (factorial(n)/(factorial(k)*factorial(n-k))) * (p**k) * ((1-p)**(n-k))\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (factorial(n)/(factorial(k)*factorial(n-k))) * (p**k) * ((1-p)**(n-k))\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):\n\treturn 1 - sum([binomial_probability(6, k, p) for k in range(0, 6)])\n\n\"\"\"\nWrite a function to compute the probability of getting at least 50 points in a game.\n\"\"\"\ndef probability_at_least_50_points(p):"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t\treturn sorted(tup, key = lambda x: x[1]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[1], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_sec(tup): \n\t\treturn sorted(tup, key = lambda x: x[2]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_sec_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[2], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third(tup): \n\t\treturn sorted(tup, key = lambda x: x[3]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[3], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth(tup): \n\t\treturn sorted(tup, key = lambda x: x[4]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[4], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fifth element in each tuple.\n\"\"\"\ndef sort_tuple_fifth(tup): \n\t\treturn sorted(tup, key = lambda x: x[5]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fifth element in each tuple.\n\"\"\"\ndef sort_tuple_fifth_dec(tup): \n\t\treturn sorted(tup, key = lambda", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(tup, key = lambda x: x[1]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[1], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_sec(tup): \n\t\treturn sorted(tup, key = lambda x: x[2]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple_sec_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[2], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third(tup): \n\t\treturn sorted(tup, key = lambda x: x[3]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the third element in each tuple.\n\"\"\"\ndef sort_tuple_third_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[3], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth(tup): \n\t\treturn sorted(tup, key = lambda x: x[4]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fourth element in each tuple.\n\"\"\"\ndef sort_tuple_fourth_dec(tup): \n\t\treturn sorted(tup, key = lambda x: x[4], reverse = True) \n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the fifth element in each tuple.\n\"\"\"\ndef sort_tuple_fifth(tup): \n\t\treturn sorted(tup, key = lambda x: x[5]) \n\n\"\"\"\nWrite a function to sort a list of tuples in decreasing order by the fifth element in each tuple.\n\"\"\"\ndef sort_tuple_fifth_dec(tup): "}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t\tif n%2 == 0 : \n\t\t\treturn -1\n\t\telse : \n\t\t\tsum = 0\n\t\t\tfor i in range(1,n+1) : \n\t\t\t\tif i%2!= 0 : \n\t\t\t\t\tsum += i\n\t\t\treturn sum/n\n\nprint(average_Odd(10))\nprint(average_Odd(11))\nprint(average_Odd(12))\nprint(average_Odd(13))\nprint(average_Odd(14))\nprint(average_Odd(15))\nprint(average_Odd(16))\nprint(average_Odd(17))\nprint(average_Odd(18))\nprint(average_Odd(19))\nprint(average_Odd(20))\nprint(average_Odd(21))\nprint(average_Odd(22))\nprint(average_Odd(23))\nprint(average_Odd(24))\nprint(average_Odd(25))\nprint(average_Odd(26))\nprint(average_Odd(27))\nprint(average_Odd(28))\nprint(average_Odd(29))\nprint(average_Odd(30))\nprint(average_Odd(31))\nprint(average_Odd(32))\nprint(average_Odd(33))\nprint(average_Odd(34))\nprint(average_Odd(35))\nprint(average_Odd(36))\nprint(average_Odd(37))\nprint(average_Odd(38))\nprint(average_Odd(39))\nprint(average_Odd(40))\nprint(average_Odd(41))\nprint(average_Odd(42))\nprint(average_Odd(43))\nprint(average_Odd(44))\nprint(average_Odd(45))\nprint(average_Odd(46))\nprint(average_Odd(47))\nprint(average_Odd(48))\nprint(average_Odd(49))\nprint(average_Odd(50))\nprint(average_Odd(51))\nprint(average_Odd(52))\nprint(average_Odd(53))\nprint(average_Odd(54))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(average_Odd(10))\nprint(average_Odd(11))\nprint(average_Odd(12))\nprint(average_Odd(13))\nprint(average_Odd(14))\nprint(average_Odd(15))\nprint(average_Odd(16))\nprint(average_Odd(17))\nprint(average_Odd(18))\nprint(average_Odd(19))\nprint(average_Odd(20))\nprint(average_Odd(21))\nprint(average_Odd(22))\nprint(average_Odd(23))\nprint(average_Odd(24))\nprint(average_Odd(25))\nprint(average_Odd(26))\nprint(average_Odd(27))\nprint(average_Odd(28))\nprint(average_Odd(29))\nprint(average_Odd(30))\nprint(average_Odd(31))\nprint(average_Odd(32))\nprint(average_Odd(33))\nprint(average_Odd(34))\nprint(average_Odd(35))\nprint(average_Odd(36))\nprint(average_Odd(37))\nprint(average_Odd(38))\nprint(average_Odd(39))\nprint(average_Odd(40))\nprint(average_Odd(41))\nprint(average_Odd(42))\nprint(average_Odd(43))\nprint(average_Odd(44))\nprint(average_Odd(45))\nprint(average_Odd(46))\nprint(average_Odd(47))\nprint(average_Odd(48))\nprint(average_Odd(49))\nprint(average_Odd(50))\nprint(average_Odd(51))\nprint(average_Odd(52))\nprint(average_Odd(53))\nprint(average_Odd(54))\nprint"}
{"ID": 878, "source": "MBPP:515", "prompt": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t", "predict": "\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\n\"\"\"\ndef modular_sum(arr, n, m): \n\t\n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n    return False\n\ndef subset_sum(arr, n, m): \n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n  \n    # Initialize a boolean array \"dp[n+1][sum+1]\" \n    # and fill it for all sums from 0 to sum \n    dp = [[False for i in range(sum + 1)] for i in range(n + 1)] \n  \n    # Fill the dp[][] array in bottom up manner \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (i == 0): \n                dp[i][j] = False\n            elif (j == 0): \n                dp[i][j] = True\n            elif (arr[i - 1] <= j): \n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] \n            else: \n                dp[i][j] = dp[i - 1][j] \n  \n    return dp[n][sum] \n\ndef subset_sum_mod(arr, n, m): \n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n  \n    # Initialize a boolean array \"dp[n+1][sum+1]\" \n    # and fill it for all sums from 0 to sum \n    dp = [[False for i in range(sum + 1)] for i in range(n + 1)] \n  \n    # Fill the dp[][] array in bottom up manner \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (i == 0): \n                dp[i][j] = False\n            elif (j == 0): \n                dp[i][j] = True\n            elif (arr[i - 1] <= j): \n                dp[i][j] = dp[i - 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "    # Initialize a boolean array \"dp[n+1][sum+1]\" \n    # and fill it for all sums from 0 to sum \n    dp = [[False for i in range(sum + 1)] for i in range(n + 1)] \n  \n    # Fill the dp[][] array in bottom up manner \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (i == 0): \n                dp[i][j] = False\n            elif (j == 0): \n                dp[i][j] = True\n            elif (arr[i - 1] <= j): \n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] \n            else: \n                dp[i][j] = dp[i - 1][j] \n  \n    return dp[n][sum] \n\ndef subset_sum_mod(arr, n, m): \n    # Initialize sum as 0 \n    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n  \n    if (sum == 0): \n        return True\n  \n    # Initialize a boolean array \"dp[n+1][sum+1]\" \n    # and fill it for all sums from 0 to sum \n    dp = [[False for i in range(sum + 1)] for i in range(n + 1)] \n  \n    # Fill the dp[][] array in bottom up manner \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (i == 0): \n                dp[i][j] = False\n            elif (j == 0): \n                dp[i][j] = True"}
{"ID": 880, "source": "MBPP:517", "prompt": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t", "predict": "\"\"\"\nWrite a python function to find the largest postive number from the given list.\n\"\"\"\ndef largest_pos(list1): \n\t\treturn max(list1)\n\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10]))\nprint(largest_pos([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]))\nprint(largest_pos([0,0,0,0,0,0,0,0,0,0]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(largest_pos([1,2,3,4,5,6,7,8,9,10]))\nprint(largest_pos([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]))\nprint(largest_pos([0,0,0,0,0,0,0,0,0,0]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(largest_pos([1,2,3,4,5,6,7,8,9,10,"}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t\n    sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum += i \n    if sum > n: \n        return True\n    else: \n        return False\n\ndef is_abundant(n):\n    if check_abundant(n):\n        return True\n    else:\n        return False\n\ndef is_abundant_sum(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_2(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_3(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_4(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_5(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_6(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_7(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_8(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_9(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "            sum += i \n    if sum > n: \n        return True\n    else: \n        return False\n\ndef is_abundant(n):\n    if check_abundant(n):\n        return True\n    else:\n        return False\n\ndef is_abundant_sum(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_2(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_3(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_4(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_5(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_6(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_7(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_8(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n\ndef is_abundant_sum_9(n):\n    for i in range(1, n):\n        if is_abundant(i) and is_abundant(n-i):\n            return True\n    return False\n"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x5555555", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\"\n\t\treturn (n & 0x55555555) | ((n & 0xaaaaaaaa) >> 1)\n\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t\t\"\"\"\n\t\t:param n: number\n\t\t:return: number with only first and last bits toggled\n\t\t\"\"\""}
{"ID": 911, "source": "MBPP:548", "prompt": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t", "predict": "\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\"\"\"\ndef longest_increasing_subsequence(arr): \n\t\tn = len(arr) \n\t\tlis = [1] * n \n\t\tfor i in range(1, n): \n\t\t\tfor j in range(0, i): \n\t\t\t\tif arr[i] > arr[j] and lis[i] < lis[j] + 1: \n\t\t\t\t\tlis[i] = lis[j] + 1 \n\t\treturn max(lis) \n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\nprint(longest_increasing_subsequence([7, 8, 9, 10, 11, 12]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))\nprint(longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]))\nprint(longest_increasing_subsequence([7, 8, 9, 10, 11, 12]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, "}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t\treturn list(word)\n\n\"\"\"\nWrite a python function to join a list of strings into one string.\n\"\"\"\ndef join(words): \n\t\treturn ''.join(words)\n\n\"\"\"\nWrite a python function to remove all the spaces from a string.\n\"\"\"\ndef remove_spaces(word): \n\t\treturn word.replace(\" \", \"\")\n\n\"\"\"\nWrite a python function to remove all the punctuations from a string.\n\"\"\"\ndef remove_punctuations(word): \n\t\treturn word.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a python function to remove all the vowels from a string.\n\"\"\"\ndef remove_vowels(word): \n\t\treturn word.translate(str.maketrans('', '', string.ascii_lowercase))\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(word): \n\t\treturn word == word[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a anagram of another string or not.\n\"\"\"\ndef is_anagram(word1, word2): \n\t\treturn sorted(word1) == sorted(word2)\n\n\"\"\"\nWrite a python function to check whether a string is a permutation of another string or not.\n\"\"\"\ndef is_permutation(word1, word2): \n\t\treturn sorted(word1) == sorted(word2)\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to join a list of strings into one string.\n\"\"\"\ndef join(words): \n\t\treturn ''.join(words)\n\n\"\"\"\nWrite a python function to remove all the spaces from a string.\n\"\"\"\ndef remove_spaces(word): \n\t\treturn word.replace(\" \", \"\")\n\n\"\"\"\nWrite a python function to remove all the punctuations from a string.\n\"\"\"\ndef remove_punctuations(word): \n\t\treturn word.translate(str.maketrans('', '', string.punctuation))\n\n\"\"\"\nWrite a python function to remove all the vowels from a string.\n\"\"\"\ndef remove_vowels(word): \n\t\treturn word.translate(str.maketrans('', '', string.ascii_lowercase))\n\n\"\"\"\nWrite a python function to check whether a string is a palindrome or not.\n\"\"\"\ndef is_palindrome(word): \n\t\treturn word == word[::-1]\n\n\"\"\"\nWrite a python function to check whether a string is a anagram of another string or not.\n\"\"\"\ndef is_anagram(word1, word2): \n\t\treturn sorted(word1) == sorted(word2)\n\n\"\"\"\nWrite a python function to check whether a string is a permutation of another string or not.\n\"\"\"\ndef is_permutation(word1, word2): \n\t\treturn sorted(word1) == sorted(word2)\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring of another string or not.\n\"\"\"\ndef is_substring(word1, word2): \n\t\treturn word1 in word2\n\n\"\"\"\nWrite a python function to check whether a string is a substring"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t\n    # Initialize result \n    max_sum = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "    max_sum}
{"ID": 938, "source": "MBPP:575", "prompt": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t", "predict": "\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\n\"\"\"\ndef count_no (A,N,L,R): \n\t\tif (N == 0): \n\t\t\treturn A[L] \n\t\tif (N == 1): \n\t\t\treturn A[R] \n\t\tif (N == 2): \n\t\t\treturn A[L] + A[R] \n\t\tif (N == 3): \n\t\t\treturn A[L] + A[R] + A[L+1] \n\t\tif (N == 4): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] \n\t\tif (N == 5): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] \n\t\tif (N == 6): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] \n\t\tif (N == 7): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] \n\t\tif (N == 8): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] \n\t\tif (N == 9): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] + A[L+4] \n\t\tif (N == 10): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] + A[L+4] + A[R-4] \n\t\tif (N == 11): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif (N == 0): \n\t\t\treturn A[L] \n\t\tif (N == 1): \n\t\t\treturn A[R] \n\t\tif (N == 2): \n\t\t\treturn A[L] + A[R] \n\t\tif (N == 3): \n\t\t\treturn A[L] + A[R] + A[L+1] \n\t\tif (N == 4): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] \n\t\tif (N == 5): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] \n\t\tif (N == 6): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] \n\t\tif (N == 7): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] \n\t\tif (N == 8): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] \n\t\tif (N == 9): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] + A[L+4] \n\t\tif (N == 10): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A[L+2] + A[R-2] + A[L+3] + A[R-3] + A[L+4] + A[R-4] \n\t\tif (N == 11): \n\t\t\treturn A[L] + A[R] + A[L+1] + A[R-1] + A["}
{"ID": 954, "source": "MBPP:591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t", "predict": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"\ndef swap_List(newList): \n\t\tnewList[0], newList[-1] = newList[-1], newList[0] \n\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn newList\n\nprint(swap_List([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\"\ndef max_min(newList): \n\treturn max(newList), min(newList)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum and minimum values in a list.\n\"\"\""}
{"ID": 955, "source": "MBPP:592", "prompt": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t", "predict": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\n\"\"\"\ndef sum_Of_product(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of co-efficients of binomial.\n\"\"\"\ndef sum_Of_coefficients(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of co-efficients of binomial.\n\"\"\"\ndef sum_Of_coefficients(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): \n\t\t\tsum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i))) \n\t\treturn sum\n\n\"\"\"\nWrite a python function to find sum of binomial co-efficients.\n\"\"\"\ndef sum_Of_binomial(n): \n\t\tsum = 0\n\t\tfor i in range(n+1): "}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t\treturn (a^b) & (a^b-1)\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (a^b) & (a^b-1)\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): \n\t\treturn (a^b) & (a^b-1) == 0\n\n\"\"\"\nWrite a python function to check whether the two numbers differ by one bit or not.\n\"\"\"\ndef differ_By_One_Bit(a,b): "}
