{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t\"\"\"\n\tThis function checks if the given integer is a prime number.\n\t\"\"\"\n\tif num > 1:\n\t\tfor i in range(2, num):\n\t\t\tif num % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(prime_num(1))\nprint(prime_num(2))\nprint(prime_num(3))\nprint(prime_num(4))\nprint(prime_num(5))\nprint(prime_num(6))\nprint(prime_num(7))\nprint(prime_num(8))\nprint(prime_num(9))\nprint(prime_num(10))\nprint(prime_num(11))\nprint(prime_num(12))\nprint(prime_num(13))\nprint(prime_num(14))\nprint(prime_num(15))\nprint(prime_num(16))\nprint(prime_num(17))\nprint(prime_num(18))\nprint(prime_num(19))\nprint(prime_num(20))\nprint(prime_num(21))\nprint(prime_num(22))\nprint(prime_num(23))\nprint(prime_num(24))\nprint(prime_num(25))\nprint(prime_num(26))\nprint(prime_num(27))\nprint(prime_num(28))\nprint(prime_num(29))\nprint(prime_num(30))\nprint(prime_num(31))\nprint(prime_num(32))\nprint(prime_num(33))\nprint(prime_num(34))\nprint(prime_num(35))\nprint(prime_num(36))\nprint(prime_num(37))\nprint(prime_num(38))\nprint(prime_num(39))\nprint(prime_num(40))\nprint(prime_num(41))\nprint(prime_num(42))\nprint(prime_num(43))\nprint(prime_num(44))\nprint(prime_num(45))\nprint(prime_num(46))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(prime_num(1))\nprint(prime_num(2))\nprint(prime_num(3))\nprint(prime_num(4))\nprint(prime_num(5))\nprint(prime_num(6))\nprint(prime_num(7))\nprint(prime_num(8))\nprint(prime_num(9))\nprint(prime_num(10))\nprint(prime_num(11))\nprint(prime_num(12))\nprint(prime_num(13))\nprint(prime_num(14))\nprint(prime_num(15))\nprint(prime_num(16))\nprint(prime_num(17))\nprint(prime_num(18))\nprint(prime_num(19))\nprint(prime_num(20))\nprint(prime_num(21))\nprint(prime_num(22))\nprint(prime_num(23))\nprint(prime_num(24))\nprint(prime_num(25))\nprint(prime_num(26))\nprint(prime_num(27))\nprint(prime_num(28))\nprint(prime_num(29))\nprint(prime_num(30))\nprint(prime_num(31))\nprint(prime_num(32))\nprint(prime_num(33))\nprint(prime_num(34))\nprint(prime_num(35))\nprint(prime_num(36))\nprint(prime_num(37))\nprint(prime_num(38))\nprint(prime_num(39))\nprint(prime_num(40))\nprint(prime_num(41))\nprint(prime_num(42))\nprint(prime_num(43))\nprint(prime_num(44))\nprint(prime_num(45))\nprint(prime_num(46))\n"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "heap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the largest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:\n\t\theappush(heap, value)\n\treturn [heappop(heap) for i in range(len(heap))]\n\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\theap = []\n\tfor value in iterable:"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t\"\"\"\n\tWrite a function to access the initial and last data of the given tuple record.\n\t\"\"\"\n\tres = test_tup[0], test_tup[-1]\n\treturn res\n\n\nprint(front_and_rear((1, 2, 3, 4, 5)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(front_and_rear((1, 2, 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(front_and_rear((1, 2, 3, 4, 5)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(front_and_rear((1, 2, 3"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t\"\"\"\n\tWrite a function to check if the given tuple contains all valid values or not.\n\t\"\"\"\n\tres = True\n\tfor ele in test_tup:\n\t\tif not ele:\n\t\t\tres = False\n\t\t\tbreak\n\treturn res\n\ntest_tup = (4, 5, 6, 7, 8)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 0)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, False)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, None)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, '')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, ' ')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, '0')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'False')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'None')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'True')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'a')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'b')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'c')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn res\n\ntest_tup = (4, 5, 6, 7, 8)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 0)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, False)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, None)\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, '')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, ' ')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, '0')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'False')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'None')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'True')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'a')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'b')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7, 'c')\nprint(check_valid(test_tup))\n\ntest_tup = (4, 5, 6, 7,"}
{"ID": 116, "source": "MBPP:717", "prompt": "\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the standard deviation.\n\"\"\"\ndef sd_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [(x - mean) ** 2 for x in data]\n\tvariance = sum(deviations) / n\n\treturn variance ** 0.5\n\n\n\"\"\"\nWrite a function to calculate the variance.\n\"\"\"\ndef var_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [(x - mean) ** 2 for x in data]\n\tvariance = sum(deviations) / n\n\treturn variance\n\n\n\"\"\"\nWrite a function to calculate the covariance.\n\"\"\"\ndef cov_calc(data1, data2):\n\tn = len(data1)\n\tmean1 = sum(data1) / n\n\tmean2 = sum(data2) / n\n\tdeviations1 = [(x - mean1) ** 2 for x in data1]\n\tdeviations2 = [(x - mean2) ** 2 for x in data2]\n\tcovariance = sum([x * y for x, y in zip(deviations1, deviations2)]) / n\n\treturn covariance\n\n\n\"\"\"\nWrite a function to calculate the correlation.\n\"\"\"\ndef cor_calc(data1, data2):\n\tn = len(data1)\n\tmean1 = sum(data1) / n\n\tmean2 = sum(data2) / n\n\tdeviations1 = [(x - mean1) ** 2 for x in data1]\n\tdeviations2 = [(x - mean2) ** 2 for x in data2]\n\tcovariance = sum([x * y for x, y in zip(deviations1, deviations2)]) / n\n\tstd1 = (sum(deviations1) / n) ** 0.5\n\tstd2 = (sum(deviations2) / n) ** 0.5\n\treturn covariance / (std1 * std2)\n\n\n\"\"\"\nWrite a function to calculate the mean absolute deviation.\n\"\"\"\ndef mad_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [abs(x - mean) for x in", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a function to calculate the covariance.\n\"\"\"\ndef cov_calc(data1, data2):\n\tn = len(data1)\n\tmean1 = sum(data1) / n\n\tmean2 = sum(data2) / n\n\tdeviations1 = [(x - mean1) ** 2 for x in data1]\n\tdeviations2 = [(x - mean2) ** 2 for x in data2]\n\tcovariance = sum([x * y for x, y in zip(deviations1, deviations2)]) / n\n\treturn covariance\n\n\n\"\"\"\nWrite a function to calculate the correlation.\n\"\"\"\ndef cor_calc(data1, data2):\n\tn = len(data1)\n\tmean1 = sum(data1) / n\n\tmean2 = sum(data2) / n\n\tdeviations1 = [(x - mean1) ** 2 for x in data1]\n\tdeviations2 = [(x - mean2) ** 2 for x in data2]\n\tcovariance = sum([x * y for x, y in zip(deviations1, deviations2)]) / n\n\tstd1 = (sum(deviations1) / n) ** 0.5\n\tstd2 = (sum(deviations2) / n) ** 0.5\n\treturn covariance / (std1 * std2)\n\n\n\"\"\"\nWrite a function to calculate the mean absolute deviation.\n\"\"\"\ndef mad_calc(data):\n\tn = len(data)\n\tmean = sum(data) / n\n\tdeviations = [abs(x - mean) for x in"}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\timport math\n\tl=math.sqrt(r**2+h**2)\n\tlateralsurface=math.pi*r*l\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a cone.\n\"\"\"\ndef totalsurface_cone(r,h):\n\timport math\n\tl=math.sqrt(r**2+h**2)\n\ttotalsurface=math.pi*r*(r+l)\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\timport math\n\tvolume=math.pi*r**2*h/3\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\timport math\n\tlateralsurface=2*math.pi*r*h\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef totalsurface_cylinder(r,h):\n\timport math\n\ttotalsurface=2*math.pi*r*(r+h)\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\timport math\n\tvolume=math.pi*r**2*h\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\timport math\n\tlateralsurface=4*math.pi*r**2\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a sphere.\n\"\"\"\ndef totalsurface_sphere(r):\n\timport math\n\ttotalsurface=4*math.pi*r**2\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\timport math\n\tvolume=4/3*math.pi*r**3\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "import math\n\tl=math.sqrt(r**2+h**2)\n\tlateralsurface=math.pi*r*l\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a cone.\n\"\"\"\ndef totalsurface_cone(r,h):\n\timport math\n\tl=math.sqrt(r**2+h**2)\n\ttotalsurface=math.pi*r*(r+l)\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\timport math\n\tvolume=math.pi*r**2*h/3\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\timport math\n\tlateralsurface=2*math.pi*r*h\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a cylinder.\n\"\"\"\ndef totalsurface_cylinder(r,h):\n\timport math\n\ttotalsurface=2*math.pi*r*(r+h)\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\timport math\n\tvolume=math.pi*r**2*h\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\timport math\n\tlateralsurface=4*math.pi*r**2\n\treturn lateralsurface\n\n\"\"\"\nWrite a function to find the total surface area of a sphere.\n\"\"\"\ndef totalsurface_sphere(r):\n\timport math\n\ttotalsurface=4*math.pi*r**2\n\treturn totalsurface\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\timport math\n\tvolume=4/3*math.pi*r**3\n\treturn volume\n\n\"\"\"\nWrite a function to find the lateral surface area of"}
{"ID": 132, "source": "MBPP:733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n\tleft, right = 0, len(A) - 1\n\tresult = -1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif A[mid] == x:\n\t\t\tresult = mid\n\t\t\tright = mid - 1\n\t\telif A[mid] > x:\n\t\t\tright = mid - 1\n\t\telse:\n\t\t\tleft = mid + 1\n\treturn result\n\n\nif __name__ == '__main__':\n\tA = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tA = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\tlo = 0\n\thi = len(a)\n\twhile lo < hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telse:\n\t\t\thi = mid\n\treturn lo\n\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\tlo = 0\n\thi = len(a)\n\twhile lo < hi:\n\t\tmid = (lo + hi) // 2\n\t\tif x < a[mid]:\n\t\t\thi = mid\n\t\telse:\n\t\t\tlo = mid + 1\n\treturn lo\n\n\"\"\"\nWrite a function to find the first occurrence of a specified value in a given sorted array.\n\"\"\"\ndef first_occurrence(a, x):\n\tlo = 0\n\thi = len(a) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telif a[mid] > x:\n\t\t\thi = mid - 1\n\t\telse:\n\t\t\tif mid == 0 or a[mid - 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\thi = mid - 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the last occurrence of a specified value in a given sorted array.\n\"\"\"\ndef last_occurrence(a, x):\n\tlo = 0\n\thi = len(a) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telif a[mid] > x:\n\t\t\thi = mid - 1\n\t\telse:\n\t\t\tif mid == len(a) - 1 or a[mid + 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tlo = mid + 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the first greater element than a specified value in a given sorted array.\n\"\"\"\ndef first_greater(a, x):\n\tlo = ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif x < a[mid]:\n\t\t\thi = mid\n\t\telse:\n\t\t\tlo = mid + 1\n\treturn lo\n\n\"\"\"\nWrite a function to find the first occurrence of a specified value in a given sorted array.\n\"\"\"\ndef first_occurrence(a, x):\n\tlo = 0\n\thi = len(a) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telif a[mid] > x:\n\t\t\thi = mid - 1\n\t\telse:\n\t\t\tif mid == 0 or a[mid - 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\thi = mid - 1\n\treturn -1\n\n\"\"\"\nWrite a function to find the last occurrence of a specified value in a given sorted array.\n\"\"\"\ndef last_occurrence(a, x):\n\tlo = 0\n\thi = len(a) - 1\n\twhile lo <= hi:\n\t\tmid = (lo + hi) // 2\n\t\tif a[mid] < x:\n\t\t\tlo = mid + 1\n\t\telif a[mid] > x:\n\t\t\thi = mid - 1\n\t\telse:\n\t\t\tif mid == len(a) - 1 or a[mid + 1] != x:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\tlo = mid + 1"}
{"ID": 137, "source": "MBPP:738", "prompt": "\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the geometric sum of n-1.\n\"\"\"\ndef geometric_sum(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: sum\n\t\"\"\"\n\tif n < 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 0\n\telse:\n\t\treturn 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_digits(n // 10)\n\n\n\"\"\"\nWrite a function that takes a positive integer as input and returns the number of digits the input has.\n\"\"\"\ndef count_digits(n):\n\t\"\"\"\n\t:param n: positive integer\n\t:return: number of digits\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:"}
{"ID": 148, "source": "MBPP:749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=int)\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt2(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt3(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt4(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt5(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt6(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt7(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt8(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=int)\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt2(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt3(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt4(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt5(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt6(nums_str):\n\t\"\"\"Given list of numbers as strings, return list sorted numerically.\"\"\"\n\n\tnums_str.sort(key=lambda num: int(num))\n\n\treturn nums_str\n\n\ndef sort_numeric_strings_alt7(nums_str):"}
{"ID": 154, "source": "MBPP:755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n\tsmallest = None\n\tsecond_smallest = None\n\tfor num in numbers:\n\t\tif smallest == None:\n\t\t\tsmallest = num\n\t\telif num < smallest:\n\t\t\tsecond_smallest = smallest\n\t\t\tsmallest = num\n\t\telif second_smallest == None:\n\t\t\tsecond_smallest = num\n\t\telif num < second_smallest:\n\t\t\tsecond_smallest = num\n\treturn second_smallest\n\nprint(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 0]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7, -8]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 2, 3, 4, 5, 0]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7, -8]))\nprint(second_smallest([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_one(\"ac\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one_or_more(text):\n\tpattern = 'ab+?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one_or_more(\"ab\"))\nprint(text_match_one_or_more(\"abc\"))\nprint(text_match_one_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more(text):\n\tpattern = 'ab*?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_or_more(\"ac\"))\nprint(text_match_zero_or_more(\"abc\"))\nprint(text_match_zero_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one_or_more(text):\n\tpattern = 'ab+?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one_or_more(\"ab\"))\nprint(text_match_one_or_more(\"abc\"))\nprint(text_match_one_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn '", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "pattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_one(\"ac\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one_or_more(text):\n\tpattern = 'ab+?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one_or_more(\"ab\"))\nprint(text_match_one_or_more(\"abc\"))\nprint(text_match_one_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match_zero_or_more(text):\n\tpattern = 'ab*?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_or_more(\"ac\"))\nprint(text_match_zero_or_more(\"abc\"))\nprint(text_match_zero_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one_or_more(text):\n\tpattern = 'ab+?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_one_or_more(\"ab\"))\nprint(text_match_one_or_more(\"abc\"))\nprint(text_match_one_or_more(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):"}
{"ID": 199, "source": "MBPP:800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to remove all whitespaces from a string.\n\"\"\"\ndef remove_all_spaces(text):\n\t\"\"\"\n\tRemove all spaces from a string.\n\t\"\"\"\n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char != \" \":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to remove all vowels from a string.\n\"\"\"\ndef remove_all_vowels(text):\n\t\"\"\"\n\tRemove all vowels from a string.\n\t\"\"\"\n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char not in \"aeiouAEIOU\":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to remove all consonants from a string.\n\"\"\"\ndef remove_all_consonants(text):\n\t\"\"\"\n\tRemove all consonants from a string.\n\t\"\"\"\n\tnew_text = \"\"\n\tfor char in text:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(text):\n\t\"\"\"\n\tCount the number of words in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\n\n\"\"\"\nWrite a function to count the number of characters in a string.\n\"\"\"\ndef count_characters(text):\n\t\"\"\"\n\tCount the number of characters in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char != \" \":\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to count the number of uppercase letters in a string.\n\"\"\"\ndef count_uppercase_letters(text):\n\t\"\"\"\n\tCount the number of uppercase letters in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to count the number of lowercase letters in a string.\n\"\"\"\ndef count_lowercase_letters(text):\n\t\"\"\"\n\tCount the number of lowercase letters in a string.\n\t\"\"\"\n\tcount = ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor char in text:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tnew_text += char\n\treturn new_text\n\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(text):\n\t\"\"\"\n\tCount the number of words in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\n\n\"\"\"\nWrite a function to count the number of characters in a string.\n\"\"\"\ndef count_characters(text):\n\t\"\"\"\n\tCount the number of characters in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char != \" \":\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to count the number of uppercase letters in a string.\n\"\"\"\ndef count_uppercase_letters(text):\n\t\"\"\"\n\tCount the number of uppercase letters in a string.\n\t\"\"\"\n\tcount = 0\n\tfor char in text:\n\t\tif char.isupper():\n\t\t\tcount += 1\n\treturn count\n\n\n\"\"\"\nWrite a function to count the number of lowercase letters in a string.\n\"\"\"\ndef count_lowercase_letters(text):\n\t\"\"\"\n\tCount the number of lowercase letters in a string.\n\t\"\"\"\n\tcount = "}
{"ID": 206, "source": "MBPP:807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n\t\"\"\"\n\t>>> first_odd([1, 2, 3, 4, 5])\n\t2\n\t>>> first_odd([2, 4, 6, 8, 10])\n\t>>> first_odd([1, 3, 5, 7, 9])\n\t1\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 1:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\"\"\"\n\t>>> first_even([1, 2, 3, 4, 5])\n\t1\n\t>>> first_even([2, 4, 6, 8, 10])\n\t2\n\t>>> first_even([1, 3, 5, 7, 9])\n\t>>> first_even([2, 4, 6, 8, 10])\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first number greater than a given number in a given list of numbers.\n\"\"\"\ndef first_greater_than(nums, n):\n\t\"\"\"\n\t>>> first_greater_than([1, 2, 3, 4, 5], 3)\n\t4\n\t>>> first_greater_than([2, 4, 6, 8, 10], 6)\n\t8\n\t>>> first_greater_than([1, 3, 5, 7, 9], 7)\n\t>>> first_greater_than([2, 4, 6, 8, 10], 11)\n\t\"\"\"\n\tfor num in nums:\n\t\tif num > n:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first number less than a given number in a given list of numbers.\n\"\"\"\ndef first_less_than(nums, n):\n\t\"\"\"\n\t>>> first_less_than([1, 2, 3, 4, 5], 3)\n\t1\n\t>>> first_less_than([", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> first_odd([1, 2, 3, 4, 5])\n\t2\n\t>>> first_odd([2, 4, 6, 8, 10])\n\t>>> first_odd([1, 3, 5, 7, 9])\n\t1\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 1:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\n\"\"\"\ndef first_even(nums):\n\t\"\"\"\n\t>>> first_even([1, 2, 3, 4, 5])\n\t1\n\t>>> first_even([2, 4, 6, 8, 10])\n\t2\n\t>>> first_even([1, 3, 5, 7, 9])\n\t>>> first_even([2, 4, 6, 8, 10])\n\t\"\"\"\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first number greater than a given number in a given list of numbers.\n\"\"\"\ndef first_greater_than(nums, n):\n\t\"\"\"\n\t>>> first_greater_than([1, 2, 3, 4, 5], 3)\n\t4\n\t>>> first_greater_than([2, 4, 6, 8, 10], 6)\n\t8\n\t>>> first_greater_than([1, 3, 5, 7, 9], 7)\n\t>>> first_greater_than([2, 4, 6, 8, 10], 11)\n\t\"\"\"\n\tfor num in nums:\n\t\tif num > n:\n\t\t\treturn num\n\n\n\"\"\"\nWrite a python function to find the first number less than a given number in a given list of numbers.\n\"\"\"\ndef first_less_than(nums, n):\n\t\"\"\""}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the sum of all the values in that column.\n\t\"\"\"\n\ttotal = 0\n\tfor row in list1:\n\t\ttotal = total + row[C]\n\treturn total\n\n\n\"\"\"\nWrite a function to sum a specific row of a list in a given list of lists.\n\"\"\"\ndef sum_row(list1, R):\n\t\"\"\"\n\tThis function takes a list of lists and a row number R.\n\tIt returns the sum of all the values in that row.\n\t\"\"\"\n\ttotal = 0\n\tfor col in list1[R]:\n\t\ttotal = total + col\n\treturn total\n\n\n\"\"\"\nWrite a function to find the maximum value in a specific column of a list in a given list of lists.\n\"\"\"\ndef max_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the maximum value in that column.\n\t\"\"\"\n\tmax_value = list1[0][C]\n\tfor row in list1:\n\t\tif row[C] > max_value:\n\t\t\tmax_value = row[C]\n\treturn max_value\n\n\n\"\"\"\nWrite a function to find the maximum value in a specific row of a list in a given list of lists.\n\"\"\"\ndef max_row(list1, R):\n\t\"\"\"\n\tThis function takes a list of lists and a row number R.\n\tIt returns the maximum value in that row.\n\t\"\"\"\n\tmax_value = list1[R][0]\n\tfor col in list1[R]:\n\t\tif col > max_value:\n\t\t\tmax_value = col\n\treturn max_value\n\n\n\"\"\"\nWrite a function to find the minimum value in a specific column of a list in a given list of lists.\n\"\"\"\ndef min_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the minimum value in that column.\n\t\"\"\"\n\tmin_value = list1[0][C]\n\tfor row in list1:\n\t\tif row[C] < min_value:\n\t\t\tmin_value = row[C]\n\treturn min_value\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tThis function takes a list of lists and a row number R.\n\tIt returns the sum of all the values in that row.\n\t\"\"\"\n\ttotal = 0\n\tfor col in list1[R]:\n\t\ttotal = total + col\n\treturn total\n\n\n\"\"\"\nWrite a function to find the maximum value in a specific column of a list in a given list of lists.\n\"\"\"\ndef max_column(list1, C):\n\t\"\"\"\n\tThis function takes a list of lists and a column number C.\n\tIt returns the maximum value in that column.\n\t\"\"\"\n\tmax_value = list1[0][C]\n\tfor row in list1:\n\t\tif row[C] > max_value:\n\t\t\tmax_value = row[C]\n\treturn max_value\n\n\n\"\"\"\nWrite a function to find the maximum value in a specific row of a list in a given list of lists.\n\"\"\"\ndef max_row(list1, R):\n\t\"\"\"\n\tThis function takes a list of lists and a row number R.\n\tIt returns the maximum value in that row.\n\t\"\"\"\n\tmax_value = list1[R][0]\n\tfor col in list1[R]:\n\t\tif col > max_value:\n\t\t\tmax_value = col\n\treturn max_value\n\n\n\"\"\"\nWrite a function to find the minimum value in a specific column of a list in a given list of lists.\n\"\"\""}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn max(numbers)\n\n\"\"\"\nWrite a function to extract the minimum numeric value from a string by using regex.\n\"\"\"\ndef extract_min(input): \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn min(numbers)\n\n\"\"\"\nWrite a function to extract the first occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_first(pattern, input): \n\tmatch = re.search(pattern, input) \n\tif match: \n\t\treturn match.group() \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract the second occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_second(pattern, input): \n\tmatches = re.findall(pattern, input) \n\tif len(matches) >= 2: \n\t\treturn matches[1] \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract the nth occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_nth(pattern, input, n): \n\tmatches = re.findall(pattern, input) \n\tif len(matches) >= n: \n\t\treturn matches[n-1] \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string by using regex.\n\"\"\"\ndef extract_all(pattern, input): \n\treturn re.findall(pattern, input)\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string, ignoring case by using regex.\n\"\"\"\ndef extract_all_ignore_case(pattern, input): \n\treturn re.findall(pattern, input, re.IGNORECASE)\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string, ignoring overlapping matches by using regex.\n\"\"\"\ndef extract_all_ignore_overlapping(pattern, input): \n\treturn re.findall(pattern, input, re.OVERLAPPED)\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tnumbers = map(int,numbers) \n\treturn min(numbers)\n\n\"\"\"\nWrite a function to extract the first occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_first(pattern, input): \n\tmatch = re.search(pattern, input) \n\tif match: \n\t\treturn match.group() \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract the second occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_second(pattern, input): \n\tmatches = re.findall(pattern, input) \n\tif len(matches) >= 2: \n\t\treturn matches[1] \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract the nth occurrence of a pattern from a string by using regex.\n\"\"\"\ndef extract_nth(pattern, input, n): \n\tmatches = re.findall(pattern, input) \n\tif len(matches) >= n: \n\t\treturn matches[n-1] \n\telse: \n\t\treturn None\n\n\"\"\"\nWrite a function to extract all occurrences of a pattern from a string by using regex.\n\"\"\"\ndef extract_all(pattern, input): \n\treturn re.findall(pattern, input)\n\n\"\"\""}
{"ID": 242, "source": "MBPP:843", "prompt": "\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef nth_super_ugly_number(n, primes):\n\t\"\"\"\n\t:type n: int\n\t:type primes: List[int]\n\t:rtype: int\n\t\"\"\"\n\tugly = [1]\n\tdef gen(prime):\n\t\tfor u in ugly:\n\t\t\tyield u * prime\n\tugly_gen = heapq.merge(*map(gen, primes))\n\twhile len(ugly) < n:\n\t\tu = next(ugly_gen)\n\t\tif u != ugly[-1]:\n\t\t\tugly.append(u)\n\treturn ugly[-1]\n\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\ndef n"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n"}
{"ID": 249, "source": "MBPP:850", "prompt": "\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a, b, c)): \n\tprint(\"Triangle Exists\") \nelse: \n\tprint(\"Triangle Doesn't Exist\") \n\n# This code is contributed by \n# Shashank Sharma \n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a, b, c)): \n\tprint(\"Triangle Exists\") \nelse: \n\tprint(\"Triangle Doesn't Exist\") \n\n# This code is contributed by \n# Shashank Sharma \n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a, b, c)): \n\tprint(\"Triangle Exists\") \nelse: \n\tprint(\"Triangle Doesn't Exist\") \n\n# This code is contributed by \n# Shashank Sharma \n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n# Driver Code \na = 70\nb = 60\nc = 60\nif (is_triangleexists(a, b, c)): \n\tprint(\"Triangle Exists\") \nelse: \n\tprint(\"Triangle Doesn't Exist\") \n\n# This code is contributed by \n# Shashank Sharma \n\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c): \n\t\n\t# Check for angles are greater than 0 \n\tif (a > 0 and b > 0 and c > 0): \n\t\n\t\t# Check if sum of angles is 180 \n\t\tif (a + b + c == 180): \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t\"\"\"\n\t>>> reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\t[[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\t\"\"\"\n\treturn [list(reversed(l)) for l in lists]\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\t[[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\t\"\"\"\n\treturn [list(reversed(l)) for l in lists]\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\"\n\treturn sum(nums)\n\n\n\"\"\"\nWrite a function to find the sum of the numbers in a given list.\n\"\"\"\ndef sum_list(nums):\n\t\"\"\"\n\t>>> sum_list([1, 2, 3, 4, 5])\n\t15\n\t\"\"\""}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\ttext = re.compile(r\"^5\")\n\tif text.match(string):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(match_num('5-2345861'))\nprint(match_num('6-2345861'))\n\n\"\"\"\nWrite a function that checks the validity of a password.\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_valid_password(\"2w3E*\"))\nprint(is_valid_password(\"2We3345\"))\n\n\"\"\"\nWrite a function that checks the validity of a password (taking into account the length of the password, with a minimum of 6 characters and a maximum of 12).\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_valid_password(\"2w3E*\"))\nprint(is_valid_password(\"2We3345\"))\n\n\"\"\"\nWrite a function that checks the validity of a password (taking into account the length of the password, with a minimum of 6 characters and a maximum of 12).\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_valid_password(\"2w3E*\"))\nprint(is_valid_password(\"2We3345\"))\n\n\"\"\"\nWrite a function that checks the validity of a password (taking into account the length of the password, with a minimum of 6 characters and a maximum of 12).\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_valid_password(\"2w3E*\"))\nprint(is_valid_password(\"2We3345\"))\n\n\"\"\"\nWrite a function that checks the validity of a password (taking into account the length of the password, with a minimum of 6 characters and a maximum of 12).\n\"\"\"\ndef is_valid_password(pas):\n\ttext = re.compile(r\"[a-zA-Z0-9@#$]{6,12}\")\n\tif text.fullmatch(pas):\n\t\treturn True\n\telse:\n\t\treturn False\nprint(is_valid_password(\"ABd1234@1\"))\nprint(is_valid_password(\"a F1#\"))\nprint(is_"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\twhile True:\n\t\tnum -= 1\n\t\tif str(num) == str(num)[::-1]:\n\t\t\treturn num\n\nprint(previous_palindrome(1234))\nprint(previous_palindrome(1221))\nprint(previous_palindrome(12321))\nprint(previous_palindrome(121))\nprint(previous_palindrome(123456789))\nprint(previous_palindrome(1234567890))\nprint(previous_palindrome(12345678901))\nprint(previous_palindrome(123456789012))\nprint(previous_palindrome(1234567890123))\nprint(previous_palindrome(12345678901234))\nprint(previous_palindrome(123456789012345))\nprint(previous_palindrome(1234567890123456))\nprint(previous_palindrome(12345678901234567))\nprint(previous_palindrome(123456789012345678))\nprint(previous_palindrome(1234567890123456789))\nprint(previous_palindrome(12345678901234567890))\nprint(previous_palindrome(123456789012345678901))\nprint(previous_palindrome(1234567890123456789012))\nprint(previous_palindrome(12345678901234567890123))\nprint(previous_palindrome(123456789012345678901234))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(previous_palindrome(1234))\nprint(previous_palindrome(1221))\nprint(previous_palindrome(12321))\nprint(previous_palindrome(121))\nprint(previous_palindrome(123456789))\nprint(previous_palindrome(1234567890))\nprint(previous_palindrome(12345678901))\nprint(previous_palindrome(123456789012))\nprint(previous_palindrome(1234567890123))\nprint(previous_palindrome(12345678901234))\nprint(previous_palindrome(123456789012345))\nprint(previous_palindrome(1234567890123456))\nprint(previous_palindrome(12345678901234567))\nprint(previous_palindrome(123456789012345678))\nprint(previous_palindrome(1234567890123456789))\nprint(previous_palindrome(12345678901234567890))\nprint(previous_palindrome(123456789012345678901))\nprint(previous_palindrome(1234567890123456789012))\nprint(previous_palindrome(12345678901234567890123))\nprint(previous_palindrome(123456789012345678901234))\n"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t\"\"\"\n\tCheck if a date is valid.\n\t\"\"\"\n\ttry:\n\t\tdate = datetime.date(y, m, d)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\""}
{"ID": 311, "source": "MBPP:912", "prompt": "\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find ln, m lobb number.\n\"\"\"\n)\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 312, "source": "MBPP:913", "prompt": "\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check for a number at the end of a string.\n\"\"\"\ndef end_num(string):\n\t\"\"\"\n\t>>> end_num('abcdef')\n\tFalse\n\t>>> end_num('abcdef6')\n\tTrue\n\t\"\"\"\n\ttry:\n\t\tint(string[-1])\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef palindrome(string):\n\t\"\"\"\n\t>>> palindrome('racecar')\n\tTrue\n\t>>> palindrome('race car')\n\tFalse\n\t\"\"\"\n\treturn string == string[::-1]\n\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(string):\n\t\"\"\"\n\t>>> count_words('How many words       here       ')\n\t4\n\t\"\"\"\n\treturn len(string.split())\n\n\n\"\"\"\nWrite a function to count the number of lines in a string.\n\"\"\"\ndef count_lines(string):\n\t\"\"\"\n\t>>> count_lines('How many words\\\\nhere')\n\t2\n\t\"\"\"\n\treturn len(string.split('\\n'))\n\n\n\"\"\"\nWrite a function to get the square root of a number.\n\"\"\"\ndef square_root(num):\n\t\"\"\"\n\t>>> square_root(100)\n\t10.0\n\t\"\"\"\n\treturn num ** 0.5\n\n\n\"\"\"\nWrite a function to get the cube root of a number.\n\"\"\"\ndef cube_root(num):\n\t\"\"\"\n\t>>> cube_root(1000)\n\t10.0\n\t\"\"\"\n\treturn num ** (1/3)\n\n\n\"\"\"\nWrite a function that performs a and b and returns the result as a string in binary.\n\"\"\"\ndef binary_and(a, b):\n\t\"\"\"\n\t>>> binary_and(5, 3)\n\t'0b101'\n\t>>> binary_and(5, 6)\n\t'0b100'\n\t\"\"\"\n\treturn bin(a & b)\n\n\n\"\"\"\nWrite a function that performs a and b and returns the result as a string in binary.\n\"\"\"\ndef binary_or(a, b):\n\t\"\"\"\n\t>>> binary_or(5, 3)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tTrue\n\t>>> palindrome('race car')\n\tFalse\n\t\"\"\"\n\treturn string == string[::-1]\n\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(string):\n\t\"\"\"\n\t>>> count_words('How many words       here       ')\n\t4\n\t\"\"\"\n\treturn len(string.split())\n\n\n\"\"\"\nWrite a function to count the number of lines in a string.\n\"\"\"\ndef count_lines(string):\n\t\"\"\"\n\t>>> count_lines('How many words\\\\nhere')\n\t2\n\t\"\"\"\n\treturn len(string.split('\\n'))\n\n\n\"\"\"\nWrite a function to get the square root of a number.\n\"\"\"\ndef square_root(num):\n\t\"\"\"\n\t>>> square_root(100)\n\t10.0\n\t\"\"\"\n\treturn num ** 0.5\n\n\n\"\"\"\nWrite a function to get the cube root of a number.\n\"\"\"\ndef cube_root(num):\n\t\"\"\"\n\t>>> cube_root(1000)\n\t10.0\n\t\"\"\"\n\treturn num ** (1/3)\n\n\n\"\"\"\nWrite a function that performs a and b and returns the result as a string in binary.\n\"\"\"\ndef binary_and(a, b):\n\t\"\"\"\n\t>>> binary_and(5, 3)\n\t'0b101'\n\t>>> binary_and(5, 6)\n\t'0b100'\n\t\"\"\"\n\treturn bin(a & b)\n\n\n\"\"\"\nWrite a function that performs a and b and returns the result as a string in binary."}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "temp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\nnums = (2, 4, 8, 8, 3, 2, 9)\nprint(\"\\nOriginal Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));\n\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\ttemp = list(nums)\n\tproduct = 1\n\tfor x in temp:\n\t\tproduct *= x\n\treturn product\n\nnums = (4, 3, 2, 2, -1, 18)\nprint(\"Original Tuple: \")\nprint(nums)\nprint(\"Product - multiplying all the numbers of the said tuple:\",mutiple_tuple(nums));"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t\"\"\"\n\t>>> rencontres_number(1, 1)\n\t1\n\t>>> rencontres_number(2, 1)\n\t0\n\t>>> rencontres_number(2, 2)\n\t1\n\t>>> rencontres_number(3, 1)\n\t0\n\t>>> rencontres_number(3, 2)\n\t1\n\t>>> rencontres_number(3, 3)\n\t0\n\t>>> rencontres_number(4, 1)\n\t0\n\t>>> rencontres_number(4, 2)\n\t0\n\t>>> rencontres_number(4, 3)\n\t1\n\t>>> rencontres_number(4, 4)\n\t0\n\t>>> rencontres_number(5, 1)\n\t0\n\t>>> rencontres_number(5, 2)\n\t0\n\t>>> rencontres_number(5, 3)\n\t0\n\t>>> rencontres_number(5, 4)\n\t1\n\t>>> rencontres_number(5, 5)\n\t0\n\t>>> rencontres_number(6, 1)\n\t0\n\t>>> rencontres_number(6, 2)\n\t0\n\t>>> rencontres_number(6, 3)\n\t0\n\t>>> rencontres_number(6, 4)\n\t0\n\t>>> rencontres_number(6, 5)\n\t1\n\t>>> rencontres_number(6, 6)\n\t0\n\t>>> rencontres_number(7, 1)\n\t0\n\t>>> rencontres_number(7, 2)\n\t0\n\t>>> rencontres_number(7, 3)\n\t0\n\t>>> rencontres_number(7, 4)\n\t0\n\t>>> rencontres_number(7, 5)\n\t0\n\t>>> rencontres_number(7, 6)\n\t1\n\t>>> rencontres_number(7, 7)\n\t0\n\t>>> rencontres_number(8, 1)\n\t0\n\t>>> rencontres_number(8, 2)\n\t0\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> rencontres_number(1, 1)\n\t1\n\t>>> rencontres_number(2, 1)\n\t0\n\t>>> rencontres_number(2, 2)\n\t1\n\t>>> rencontres_number(3, 1)\n\t0\n\t>>> rencontres_number(3, 2)\n\t1\n\t>>> rencontres_number(3, 3)\n\t0\n\t>>> rencontres_number(4, 1)\n\t0\n\t>>> rencontres_number(4, 2)\n\t0\n\t>>> rencontres_number(4, 3)\n\t1\n\t>>> rencontres_number(4, 4)\n\t0\n\t>>> rencontres_number(5, 1)\n\t0\n\t>>> rencontres_number(5, 2)\n\t0\n\t>>> rencontres_number(5, 3)\n\t0\n\t>>> rencontres_number(5, 4)\n\t1\n\t>>> rencontres_number(5, 5)\n\t0\n\t>>> rencontres_number(6, 1)\n\t0\n\t>>> rencontres_number(6, 2)\n\t0\n\t>>> rencontres_number(6, 3)\n\t0\n\t>>> rencontres_number(6, 4)\n\t0\n\t>>> rencontres_number(6, 5)\n\t1\n\t>>> rencontres_number(6, 6)\n\t0\n\t>>> rencontres_number(7, 1)\n\t0\n\t>>> rencontres_number(7, 2)\n\t0\n\t>>> rencontres_number(7, 3)\n\t0\n\t>>> rencontres_number(7, 4)\n\t0\n\t>>> rencontres_number(7, 5)\n\t0\n\t>>> rencontres_number(7, 6)\n\t1\n\t>>> rencontres_number(7, 7)\n\t0\n\t>>> rencontres_number(8, 1)\n\t0\n\t>>> rencontres_number(8, 2)"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t\"\"\"\n\t>>> tuple_to_set((1,2,3,4,5))\n\t{1, 2, 3, 4, 5}\n\t>>> tuple_to_set(('a','b','c','d','e'))\n\t{'a', 'b', 'c', 'd', 'e'}\n\t>>> tuple_to_set((1,2,3,4,5,1,2,3,4,5))\n\t{1, 2, 3, 4, 5}\n\t>>> tuple_to_set(('a','b','c','d','e','a','b','c','d','e'))\n\t{'a', 'b', 'c', 'd', 'e'}\n\t\"\"\"\n\treturn set(t)\n\n\n\"\"\"\nWrite a function to convert the given list into set.\n\"\"\"\ndef list_to_set(l):\n\t\"\"\"\n\t>>> list_to_set([1,2,3,4,5])\n\t{1, 2, 3, 4, 5}\n\t>>> list_to_set(['a','b','c','d','e'])\n\t{'a', 'b', 'c', 'd', 'e'}\n\t>>> list_to_set([1,2,3,4,5,1,2,3,4,5])\n\t{1, 2, 3, 4, 5}\n\t>>> list_to_set(['a','b','c','d','e','a','b','c','d','e'])\n\t{'a', 'b', 'c', 'd', 'e'}\n\t\"\"\"\n\treturn set(l)\n\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\"\"\"\n\t>>> set_to_list({1,2,3,4,5})\n\t[1, 2, 3, 4, 5]\n\t>>> set_to_list({'a','b','c','d','e'})\n\t['a', 'b', 'c', 'd', 'e']\n\t>>> set_to_list({1,2,3,4,5,1,2,3,4,5})\n\t[1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t{1, 2, 3, 4, 5}\n\t>>> list_to_set(['a','b','c','d','e','a','b','c','d','e'])\n\t{'a', 'b', 'c', 'd', 'e'}\n\t\"\"\"\n\treturn set(l)\n\n\n\"\"\"\nWrite a function to convert the given set into list.\n\"\"\"\ndef set_to_list(s):\n\t\"\"\"\n\t>>> set_to_list({1,2,3,4,5})\n\t[1, 2, 3, 4, 5]\n\t>>> set_to_list({'a','b','c','d','e'})\n\t['a', 'b', 'c', 'd', 'e']\n\t>>> set_to_list({1,2,3,4,5,1,2,3,4,5})\n\t[1"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n\n\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t\"\"\"\n\t:param tup1: tuple\n\t:param index: index of the item\n\t:return: item of the tuple\n\t\"\"\"\n\treturn tup1[index]\n\n"}
{"ID": 362, "source": "MBPP:963", "prompt": "\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n\t\"\"\"\n\tThis function calculates the discriminant value.\n\t\"\"\"\n\tdiscriminant = y**2 - 4*x*z\n\treturn discriminant\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y/(2*x)\n\t\treturn root\n\telse:\n\t\treturn None\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots_2(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y/(2*x)\n\t\treturn root\n\telse:\n\t\treturn None\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots_3(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tdiscriminant = y**2 - 4*x*z\n\treturn discriminant\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y/(2*x)\n\t\treturn root\n\telse:\n\t\treturn None\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots_2(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation.\n\t\"\"\"\n\tdiscriminant = discriminant_value(x,y,z)\n\tif discriminant > 0:\n\t\troot1 = (-y + discriminant**0.5)/(2*x)\n\t\troot2 = (-y - discriminant**0.5)/(2*x)\n\t\treturn root1, root2\n\telif discriminant == 0:\n\t\troot = -y/(2*x)\n\t\treturn root\n\telse:\n\t\treturn None\n\n\"\"\"\nWrite a function to calculate the roots of the quadratic equation.\n\"\"\"\ndef quadratic_roots_3(x,y,z):\n\t\"\"\"\n\tThis function calculates the roots of the quadratic equation."}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three( x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of four numbers.\n\"\"\"\ndef min_of_four( w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of five numbers.\n\"\"\"\ndef min_of_five( v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of six numbers.\n\"\"\"\ndef min_of_six( u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of seven numbers.\n\"\"\"\ndef min_of_seven( t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of eight numbers.\n\"\"\"\ndef min_of_eight( s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of nine numbers.\n\"\"\"\ndef min_of_nine( r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of ten numbers.\n\"\"\"\ndef min_of_ten( q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of eleven numbers.\n\"\"\"\ndef min_of_eleven( p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of twelve numbers.\n\"\"\"\ndef min_of_twelve( o, p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of thirteen numbers.\n\"\"\"\ndef min_of_thirteen( n, o, p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of fourteen numbers.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "pass\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three( x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of four numbers.\n\"\"\"\ndef min_of_four( w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of five numbers.\n\"\"\"\ndef min_of_five( v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of six numbers.\n\"\"\"\ndef min_of_six( u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of seven numbers.\n\"\"\"\ndef min_of_seven( t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of eight numbers.\n\"\"\"\ndef min_of_eight( s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of nine numbers.\n\"\"\"\ndef min_of_nine( r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of ten numbers.\n\"\"\"\ndef min_of_ten( q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of eleven numbers.\n\"\"\"\ndef min_of_eleven( p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of twelve numbers.\n\"\"\"\ndef min_of_twelve( o, p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of thirteen numbers.\n\"\"\"\ndef min_of_thirteen( n, o, p, q, r, s, t, u, v, w, x, y, z ):\n\tpass\n\n\"\"\"\nWrite a function to find minimum of fourteen numbers.\n\"\"\"\ndef"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\"\"\"\n\t>>> count_common(['a', 'a', 'b', 'c', 'c', 'c'])\n\t['c', 'a']\n\t\"\"\"\n\tcounts = {}\n\tfor word in words:\n\t\tif word in counts:\n\t\t\tcounts[word] += 1\n\t\telse:\n\t\t\tcounts[word] = 1\n\n\tmax_count = max(counts.values())\n\tmost_common = []\n\tfor word, count in counts.items():\n\t\tif count == max_count:\n\t\t\tmost_common.append(word)\n\n\treturn most_common\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file(filename):\n\t\"\"\"\n\t>>> count_common_file('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\treturn count_common(words)\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file_2(filename):\n\t\"\"\"\n\t>>> count_common_file_2('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\tcounts = {}\n\tfor word in words:\n\t\tif word in counts:\n\t\t\tcounts[word] += 1\n\t\telse:\n\t\t\tcounts[word] = 1\n\n\tmax_count = max(counts.values())\n\tmost_common = []\n\tfor word, count in counts.items():\n\t\tif count == max_count:\n\t\t\tmost_common.append(word)\n\n\treturn most_common\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file_3(filename):\n\t\"\"\"\n\t>>> count_common_file_3('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\tcounts = {}\n\tfor word in words:\n\t\tif word in", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmax_count = max(counts.values())\n\tmost_common = []\n\tfor word, count in counts.items():\n\t\tif count == max_count:\n\t\t\tmost_common.append(word)\n\n\treturn most_common\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file(filename):\n\t\"\"\"\n\t>>> count_common_file('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\treturn count_common(words)\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file_2(filename):\n\t\"\"\"\n\t>>> count_common_file_2('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()\n\tcounts = {}\n\tfor word in words:\n\t\tif word in counts:\n\t\t\tcounts[word] += 1\n\t\telse:\n\t\t\tcounts[word] = 1\n\n\tmax_count = max(counts.values())\n\tmost_common = []\n\tfor word, count in counts.items():\n\t\tif count == max_count:\n\t\t\tmost_common.append(word)\n\n\treturn most_common\n\n\n\"\"\"\nWrite a function to count the most common words in a file.\n\"\"\"\ndef count_common_file_3(filename):\n\t\"\"\"\n\t>>> count_common_file_3('test.txt')\n\t['the', 'a']\n\t\"\"\"\n\twith open(filename, 'r') as f:\n\t\twords = f.read().split()"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\"\"\"\n\t>>> split_lowerstring(\"Hello World\")\n\t['Hello', 'World']\n\t>>> split_lowerstring(\"HiThere\")\n\t['Hi', 'There']\n\t>>> split_lowerstring(\"\")\n\t[]\n\t>>> split_lowerstring(\"a\")\n\t['a']\n\t>>> split_lowerstring(\"A\")\n\t['A']\n\t>>> split_lowerstring(\"AA\")\n\t['AA']\n\t>>> split_lowerstring(\"aA\")\n\t['a', 'A']\n\t>>> split_lowerstring(\"aAA\")\n\t['a', 'AA']\n\t>>> split_lowerstring(\"AAa\")\n\t['AA', 'a']\n\t>>> split_lowerstring(\"AAA\")\n\t['AAA']\n\t>>> split_lowerstring(\"aAa\")\n\t['a', 'A', 'a']\n\t>>> split_lowerstring(\"aAAa\")\n\t['a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAA\")\n\t['a', 'AAA']\n\t>>> split_lowerstring(\"aAaA\")\n\t['a', 'A', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAa\")\n\t['a', 'AAA', 'a']\n\t>>> split_lowerstring(\"aAAAaA\")\n\t['a', 'AAA', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAaAA\")\n\t['a', 'AAA', 'a', 'AA']\n\t>>> split_lowerstring(\"aAAAaAAa\")\n\t['a', 'AAA', 'a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAAaAAaA\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAaAAaAA\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'AA']\n\t>>> split_lowerstring(\"aAAAaAAaAAa\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAAaAAaAAaA", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t>>> split_lowerstring(\"Hello World\")\n\t['Hello', 'World']\n\t>>> split_lowerstring(\"HiThere\")\n\t['Hi', 'There']\n\t>>> split_lowerstring(\"\")\n\t[]\n\t>>> split_lowerstring(\"a\")\n\t['a']\n\t>>> split_lowerstring(\"A\")\n\t['A']\n\t>>> split_lowerstring(\"AA\")\n\t['AA']\n\t>>> split_lowerstring(\"aA\")\n\t['a', 'A']\n\t>>> split_lowerstring(\"aAA\")\n\t['a', 'AA']\n\t>>> split_lowerstring(\"AAa\")\n\t['AA', 'a']\n\t>>> split_lowerstring(\"AAA\")\n\t['AAA']\n\t>>> split_lowerstring(\"aAa\")\n\t['a', 'A', 'a']\n\t>>> split_lowerstring(\"aAAa\")\n\t['a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAA\")\n\t['a', 'AAA']\n\t>>> split_lowerstring(\"aAaA\")\n\t['a', 'A', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAa\")\n\t['a', 'AAA', 'a']\n\t>>> split_lowerstring(\"aAAAaA\")\n\t['a', 'AAA', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAaAA\")\n\t['a', 'AAA', 'a', 'AA']\n\t>>> split_lowerstring(\"aAAAaAAa\")\n\t['a', 'AAA', 'a', 'AA', 'a']\n\t>>> split_lowerstring(\"aAAAaAAaA\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'A']\n\t>>> split_lowerstring(\"aAAAaAAaAA\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'AA']\n\t>>> split_lowerstring(\"aAAAaAAaAAa\")\n\t['a', 'AAA', 'a', 'AA', 'a', 'AA', 'a']"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\tperimeter = 4 * a\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a):\n\tarea = a * a\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\tperimeter = 2 * (a + b)\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\tarea = a * b\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\tperimeter = 2 * 3.14 * r\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea = 3.14 * r * r\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\tperimeter = a + b + c\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a + b + c) / 2\n\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a, b, c, d):\n\tperimeter = a + b + c + d\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\tarea = (a + b) / 2 * h\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(a, b):\n\tperimeter = 2 * (a + b)\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef par", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "perimeter = 4 * a\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a):\n\tarea = a * a\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\tperimeter = 2 * (a + b)\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\tarea = a * b\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\tperimeter = 2 * 3.14 * r\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea = 3.14 * r * r\n\treturn area\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\tperimeter = a + b + c\n\treturn perimeter\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t\"\"\"\n\t>>> is_woodall(123)\n\tTrue\n\t>>> is_woodall(1234)\n\tFalse\n\t>>> is_woodall(12345)\n\tFalse\n\t>>> is_woodall(123456)\n\tFalse\n\t>>> is_woodall(1234567)\n\tFalse\n\t>>> is_woodall(12345678)\n\tFalse\n\t>>> is_woodall(123456789)\n\tFalse\n\t>>> is_woodall(1234567890)\n\tFalse\n\t>>> is_woodall(12345678901)\n\tFalse\n\t>>> is_woodall(123456789012)\n\tFalse\n\t>>> is_woodall(1234567890123)\n\tFalse\n\t>>> is_woodall(12345678901234)\n\tFalse\n\t>>> is_woodall(123456789012345)\n\tFalse\n\t>>> is_woodall(1234567890123456)\n\tFalse\n\t>>> is_woodall(12345678901234567)\n\tFalse\n\t>>> is_woodall(123456789012345678)\n\tFalse\n\t>>> is_woodall(1234567890123456789)\n\tFalse\n\t>>> is_woodall(12345678901234567890)\n\tFalse\n\t>>> is_woodall(123456789012345678901)\n\tFalse\n\t>>> is_woodall(1234567890123456789012)\n\tFalse\n\t>>> is_woodall(1234567890123", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> is_woodall(123)\n\tTrue\n\t>>> is_woodall(1234)\n\tFalse\n\t>>> is_woodall(12345)\n\tFalse\n\t>>> is_woodall(123456)\n\tFalse\n\t>>> is_woodall(1234567)\n\tFalse\n\t>>> is_woodall(12345678)\n\tFalse\n\t>>> is_woodall(123456789)\n\tFalse\n\t>>> is_woodall(1234567890)\n\tFalse\n\t>>> is_woodall(12345678901)\n\tFalse\n\t>>> is_woodall(123456789012)\n\tFalse\n\t>>> is_woodall(1234567890123)\n\tFalse\n\t>>> is_woodall(12345678901234)\n\tFalse\n\t>>> is_woodall(123456789012345)\n\tFalse\n\t>>> is_woodall(1234567890123456)\n\tFalse\n\t>>> is_woodall(12345678901234567)\n\tFalse\n\t>>> is_woodall(123456789012345678)\n\tFalse\n\t>>> is_woodall(1234567890123456789)\n\tFalse\n\t>>> is_woodall(12345678901234567890)\n\tFalse\n\t>>> is_woodall(123456789012345678901)\n\tFalse\n\t>>> is_woodall(1234567890123456789012)\n\tFalse\n\t>>> is_woodall(1234567890123"}
{"ID": 394, "source": "MBPP:31", "prompt": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\"\"\"\ndef func(nums, k):\n\tfrom heapq import heappush, heappop\n\tfrom collections import Counter\n\tcounter = Counter(nums)\n\theap = []\n\tfor key, value in counter.items():\n\t\theappush(heap, (value, key))\n\t\tif len(heap) > k:\n\t\t\theappop(heap)\n\tresult = []\n\twhile heap:\n\t\tresult.append(heappop(heap)[1])\n\treturn result\n\n\nif __name__ == '__main__':\n\tnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  \n\t  "}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfrom collections import Counter\n\tresult = Counter(nums)\n\treturn result\n\nnums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "nums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t\"\"\"\n\tReturns the nth tetrahedral number.\n\t\"\"\"\n\treturn (n * (n + 1) * (n + 2)) / 6\n\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_number(n): \n\t\"\"\"\n\tReturns the nth pentagonal number.\n\t\"\"\"\n\treturn (n * (3 * n - 1)) / 2\n\n\n\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_number(n): \n\t\"\"\"\n\tReturns the nth hexagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_number(n): \n\t\"\"\"\n\tReturns the nth heptagonal number.\n\t\"\"\"\n\treturn (n * (5 * n - 3)) / 2\n\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_number(n): \n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\n\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef nonagonal_number(n): \n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn (n * (7 * n - 5)) / 2\n\n\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef decagonal_number(n): \n\t\"\"\"\n\tReturns the nth decagonal number.\n\t\"\"\"\n\treturn (n * (4 * n - 3)) / 2\n\n\n\"\"\"\nWrite a function to find the nth dodecagonal number.\n\"\"\"\ndef dodecagonal_number(n): \n\t\"\"\"\n\tReturns the nth dodecagonal number.\n\t\"\"\"\n\treturn (n * (11 * n - 9)) / 2\n\n\n\"\"\"\nWrite a function to find the nth tridecagonal number.\n\"\"\"\ndef tridecagonal_number(n): \n\t\"\"\"\n\tReturns the nth tridecagonal", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\tReturns the nth tetrahedral number.\n\t\"\"\"\n\treturn (n * (n + 1) * (n + 2)) / 6\n\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_number(n): \n\t\"\"\"\n\tReturns the nth pentagonal number.\n\t\"\"\"\n\treturn (n * (3 * n - 1)) / 2\n\n\n\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_number(n): \n\t\"\"\"\n\tReturns the nth hexagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_number(n): \n\t\"\"\"\n\tReturns the nth heptagonal number.\n\t\"\"\"\n\treturn (n * (5 * n - 3)) / 2\n\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_number(n): \n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\n\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef nonagonal_number(n): \n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn (n * (7 * n - 5)) / 2\n\n\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef decagonal_number(n): \n\t\"\"\"\n\tReturns the nth decagonal number.\n\t\"\"\"\n\treturn (n * (4 * n - 3)) / 2\n\n\n\"\"\"\nWrite a function to find the nth dodecagonal number.\n\"\"\"\ndef dodecagonal_number(n): \n\t\"\"\"\n\tReturns the nth dodecagonal number.\n\t\"\"\"\n\treturn (n * (11 * n - 9)) / 2\n\n\n\"\"\"\nWrite a function to find the nth tridecagonal number.\n\"\"\"\ndef tridecagonal_number(n): \n\t\"\"\""}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\"\"\"\n\t>>> closest_num(100)\n\t99\n\t>>> closest_num(1000)\n\t999\n\t>>> closest_num(10000)\n\t9999\n\t>>> closest_num(100000)\n\t99999\n\t>>> closest_num(1000000)\n\t999999\n\t>>> closest_num(10000000)\n\t9999999\n\t>>> closest_num(100000000)\n\t99999999\n\t>>> closest_num(1000000000)\n\t999999999\n\t>>> closest_num(10000000000)\n\t9999999999\n\t>>> closest_num(100000000000)\n\t99999999999\n\t>>> closest_num(1000000000000)\n\t999999999999\n\t>>> closest_num(10000000000000)\n\t9999999999999\n\t>>> closest_num(100000000000000)\n\t99999999999999\n\t>>> closest_num(1000000000000000)\n\t999999999999999\n\t>>> closest_num(10000000000000000)\n\t9999999999999999\n\t>>> closest_num(100000000000000000)\n\t99999999999999999\n\t>>> closest_num(1000000000000000000)\n\t99", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> closest_num(100)\n\t99\n\t>>> closest_num(1000)\n\t999\n\t>>> closest_num(10000)\n\t9999\n\t>>> closest_num(100000)\n\t99999\n\t>>> closest_num(1000000)\n\t999999\n\t>>> closest_num(10000000)\n\t9999999\n\t>>> closest_num(100000000)\n\t99999999\n\t>>> closest_num(1000000000)\n\t999999999\n\t>>> closest_num(10000000000)\n\t9999999999\n\t>>> closest_num(100000000000)\n\t99999999999\n\t>>> closest_num(1000000000000)\n\t999999999999\n\t>>> closest_num(10000000000000)\n\t9999999999999\n\t>>> closest_num(100000000000000)\n\t99999999999999\n\t>>> closest_num(1000000000000000)\n\t999999999999999\n\t>>> closest_num(10000000000000000)\n\t9999999999999999\n\t>>> closest_num(100000000000000000)\n\t99999999999999999\n\t>>> closest_num(1000000000000000000)"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\tn = str(n)\n\tif len(n) < 3:\n\t\treturn False\n\tfor i in range(len(n)-2):\n\t\tif n[i] == n[i+2]:\n\t\t\treturn False\n\treturn True\n\nprint(is_undulating(121))\nprint(is_undulating(12))\nprint(is_undulating(12121))\nprint(is_undulating(1212121))\nprint(is_undulating(121212121))\nprint(is_undulating(12121212121))\nprint(is_undulating(1212121212121))\nprint(is_undulating(121212121212121))\nprint(is_undulating(12121212121212121))\nprint(is_undulating(1212121212121212121))\nprint(is_undulating(121212121212121212121))\nprint(is_undulating(12121212121212121212121))\nprint(is_undulating(1212121212121212121212121))\nprint(is_undulating(121212121212121212121212121))\nprint(is_undulating(12121212121212121212121212121))\nprint(is_undulating(1212121212121212121212121212121))\nprint(is_undulating(121212121212121212121212121212121))\nprint(is_undulating(12121212", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_undulating(121))\nprint(is_undulating(12))\nprint(is_undulating(12121))\nprint(is_undulating(1212121))\nprint(is_undulating(121212121))\nprint(is_undulating(12121212121))\nprint(is_undulating(1212121212121))\nprint(is_undulating(121212121212121))\nprint(is_undulating(12121212121212121))\nprint(is_undulating(1212121212121212121))\nprint(is_undulating(121212121212121212121))\nprint(is_undulating(12121212121212121212121))\nprint(is_undulating(1212121212121212121212121))\nprint(is_undulating(121212121212121212121212121))\nprint(is_undulating(12121212121212121212121212121))\nprint(is_undulating(1212121212121212121212121212121))\nprint(is_undulating(121212121212121212121212121212121))\nprint(is_undulating(12121212"}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t\"\"\"\n\tThis function takes list of lists as input and returns frequency count of list of lists.\n\t\"\"\"\n\tcount = {}\n\tfor i in list1:\n\t\tif (str(i) in count.keys()):\n\t\t\tcount[str(i)] += 1\n\t\telse:\n\t\t\tcount[str(i)] = 1\n\treturn count\n\n\nlist1 = [[1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "list1 = [[1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\"\"\"\n\t>>> next_smallest_palindrome(123)\n\t131\n\t>>> next_smallest_palindrome(131)\n\t141\n\t>>> next_smallest_palindrome(141)\n\t151\n\t>>> next_smallest_palindrome(151)\n\t202\n\t>>> next_smallest_palindrome(202)\n\t212\n\t>>> next_smallest_palindrome(212)\n\t222\n\t>>> next_smallest_palindrome(222)\n\t232\n\t>>> next_smallest_palindrome(232)\n\t242\n\t>>> next_smallest_palindrome(242)\n\t252\n\t>>> next_smallest_palindrome(252)\n\t262\n\t>>> next_smallest_palindrome(262)\n\t272\n\t>>> next_smallest_palindrome(272)\n\t282\n\t>>> next_smallest_palindrome(282)\n\t292\n\t>>> next_smallest_palindrome(292)\n\t303\n\t>>> next_smallest_palindrome(303)\n\t313\n\t>>> next_smallest_palindrome(313)\n\t323\n\t>>> next_smallest_palindrome(323)\n\t333\n\t>>> next_smallest_palindrome(333)\n\t343\n\t>>> next_smallest_palindrome(343)\n\t353\n\t>>> next_smallest_palindrome(353)\n\t363\n\t>>> next_smallest_palindrome(363)\n\t373\n\t>>> next_smallest_palindrome(373)\n\t383\n\t>>> next_smallest_palindrome(383)\n\t393\n\t>>> next_smallest_palindrome(393)\n\t404\n\t>>> next_smallest", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> next_smallest_palindrome(123)\n\t131\n\t>>> next_smallest_palindrome(131)\n\t141\n\t>>> next_smallest_palindrome(141)\n\t151\n\t>>> next_smallest_palindrome(151)\n\t202\n\t>>> next_smallest_palindrome(202)\n\t212\n\t>>> next_smallest_palindrome(212)\n\t222\n\t>>> next_smallest_palindrome(222)\n\t232\n\t>>> next_smallest_palindrome(232)\n\t242\n\t>>> next_smallest_palindrome(242)\n\t252\n\t>>> next_smallest_palindrome(252)\n\t262\n\t>>> next_smallest_palindrome(262)\n\t272\n\t>>> next_smallest_palindrome(272)\n\t282\n\t>>> next_smallest_palindrome(282)\n\t292\n\t>>> next_smallest_palindrome(292)\n\t303\n\t>>> next_smallest_palindrome(303)\n\t313\n\t>>> next_smallest_palindrome(313)\n\t323\n\t>>> next_smallest_palindrome(323)\n\t333\n\t>>> next_smallest_palindrome(333)\n\t343\n\t>>> next_smallest_palindrome(343)\n\t353\n\t>>> next_smallest_palindrome(353)\n\t363\n\t>>> next_smallest_palindrome(363)\n\t373\n\t>>> next_smallest_palindrome(373)\n\t383\n\t>>> next_smallest_palindrome(383)\n\t393\n\t>>> next_smallest_palindrome(393)"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\timport heapq\n\tnums = [num1,num2,num3]\n\theapq.heapify(nums)\n\twhile nums:\n\t\tsmallest = heapq.heappop(nums)\n\t\ttry:\n\t\t\tyield smallest.next()\n\t\t\theapq.heappush(nums,smallest)\n\t\texcept StopIteration:\n\t\t\tpass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 473, "source": "MBPP:110", "prompt": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\n\t\"\"\"\n\tFunction to extract the ranges that are missing from the given list with the given start range and end range values.\n\t\"\"\"\n\tres = []\n\tstrt_val = strt_val\n\tfor i in range(len(test_list)):\n\t\tif test_list[i] != strt_val:\n\t\t\tres.append((strt_val, test_list[i]-1))\n\t\tstrt_val = test_list[i] + 1\n\tif strt_val <= stop_val:\n\t\tres.append((strt_val, stop_val))\n\treturn res\n\ntest_list = [1, 2, 3, 5, 7, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = [1, 2, 3, 5, 7, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, "}
{"ID": 474, "source": "MBPP:111", "prompt": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\"\"\"\ndef common_in_nested_lists(nestedlist):\n\t\"\"\"\n\t>>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 31], [14, 19, 25, 45, 46]])\n\t[12, 18, 25]\n\t\"\"\"\n\tcommon = []\n\tfor i in nestedlist[0]:\n\t\tif i in nestedlist[1] and i in nestedlist[2]:\n\t\t\tcommon.append(i)\n\treturn common\n\n\n\"\"\"\nWrite a function to find the difference of two lists.\n\"\"\"\ndef difference_of_two_lists(list1, list2):\n\t\"\"\"\n\t>>> difference_of_two_lists([1, 2, 3, 4], [1, 2])\n\t[3, 4]\n\t\"\"\"\n\tdifference = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tdifference.append(i)\n\treturn difference\n\n\n\"\"\"\nWrite a function to find symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference_of_two_lists(list1, list2):\n\t\"\"\"\n\t>>> symmetric_difference_of_two_lists([1, 2, 3, 4], [1, 2])\n\t[3, 4]\n\t\"\"\"\n\tsymmetric_difference = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tsymmetric_difference.append(i)\n\tfor i in list2:\n\t\tif i not in list1:\n\t\t\tsymmetric_difference.append(i)\n\treturn symmetric_difference\n\n\n\"\"\"\nWrite a function to find the cumulative sum of a list.\n\"\"\"\ndef cumulative_sum_of_a_list(list1):\n\t\"\"\"\n\t>>> cumulative_sum_of_a_list([1, 2, 3, 4])\n\t[1, 3, 6, 10]\n\t\"\"\"\n\tcumulative_sum = []\n\tfor i in range(len(list1)):\n\t\tcumulative_sum.append(sum(list1[:i+", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcommon = []\n\tfor i in nestedlist[0]:\n\t\tif i in nestedlist[1] and i in nestedlist[2]:\n\t\t\tcommon.append(i)\n\treturn common\n\n\n\"\"\"\nWrite a function to find the difference of two lists.\n\"\"\"\ndef difference_of_two_lists(list1, list2):\n\t\"\"\"\n\t>>> difference_of_two_lists([1, 2, 3, 4], [1, 2])\n\t[3, 4]\n\t\"\"\"\n\tdifference = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tdifference.append(i)\n\treturn difference\n\n\n\"\"\"\nWrite a function to find symmetric difference of two lists.\n\"\"\"\ndef symmetric_difference_of_two_lists(list1, list2):\n\t\"\"\"\n\t>>> symmetric_difference_of_two_lists([1, 2, 3, 4], [1, 2])\n\t[3, 4]\n\t\"\"\"\n\tsymmetric_difference = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tsymmetric_difference.append(i)"}
{"ID": 493, "source": "MBPP:130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t\"\"\"Find the most common number in nums.\"\"\"\n\tcounts = {}\n\tmax_count = 0\n\tmax_num = None\n\n\tfor num in nums:\n\t\tcounts[num] = counts.get(num, 0) + 1\n\n\t\tif counts[num] > max_count:\n\t\t\tmax_count = counts[num]\n\t\t\tmax_num = num\n\n\treturn max_num\n\n\nprint(max_occurrences([1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_occurrences([1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t\"\"\"\n\tReturns the nth hexagonal number.\n\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_num(n): \n\t\"\"\"\n\tReturns the nth pentagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 1) / 2\n\n\n\"\"\"\nWrite a function to find the nth triangular number.\n\"\"\"\ndef triangular_num(n): \n\t\"\"\"\n\tReturns the nth triangular number.\n\t\"\"\"\n\treturn n * (n + 1) / 2\n\n\n\"\"\"\nWrite a function to find the nth square number.\n\"\"\"\ndef square_num(n): \n\t\"\"\"\n\tReturns the nth square number.\n\t\"\"\"\n\treturn n * n\n\n\n\"\"\"\nWrite a function to find the nth pyramidal number.\n\"\"\"\ndef pyramidal_num(n): \n\t\"\"\"\n\tReturns the nth pyramidal number.\n\t\"\"\"\n\treturn n * (n + 1) * (2 * n + 1) / 6\n\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_num(n): \n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_num(n): \n\t\"\"\"\n\tReturns the nth heptagonal number.\n\t\"\"\"\n\treturn n * (5 * n - 3) / 2\n\n\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef nonagonal_num(n): \n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn n * (7 * n - 5) / 2\n\n\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef decagonal_num(n): \n\t\"\"\"\n\tReturns the nth decagonal number.\n\t\"\"\"\n\treturn n * (9 * n - 7) / 2\n\n\n\"\"\"\nWrite a function to find the", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\treturn n * (2 * n - 1)\n\n\n\"\"\"\nWrite a function to find the nth pentagonal number.\n\"\"\"\ndef pentagonal_num(n): \n\t\"\"\"\n\tReturns the nth pentagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 1) / 2\n\n\n\"\"\"\nWrite a function to find the nth triangular number.\n\"\"\"\ndef triangular_num(n): \n\t\"\"\"\n\tReturns the nth triangular number.\n\t\"\"\"\n\treturn n * (n + 1) / 2\n\n\n\"\"\"\nWrite a function to find the nth square number.\n\"\"\"\ndef square_num(n): \n\t\"\"\"\n\tReturns the nth square number.\n\t\"\"\"\n\treturn n * n\n\n\n\"\"\"\nWrite a function to find the nth pyramidal number.\n\"\"\"\ndef pyramidal_num(n): \n\t\"\"\"\n\tReturns the nth pyramidal number.\n\t\"\"\"\n\treturn n * (n + 1) * (2 * n + 1) / 6\n\n\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef octagonal_num(n): \n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\treturn n * (3 * n - 2)\n\n\n\"\"\"\nWrite a function to find the nth heptagonal number.\n\"\"\"\ndef heptagonal_num(n): \n\t\"\"\"\n\tReturns the nth heptagonal number.\n\t\"\"\"\n\treturn n * (5 * n - 3) / 2\n\n\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef nonagonal_num(n): \n\t\"\"\"\n\tReturns the nth nonagonal number.\n\t\"\"\"\n\treturn n * (7 * n - 5) / 2\n\n\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"\ndef decagonal_num(n): \n\t\"\"\"\n\tReturns the nth decagonal number.\n\t\"\"\"\n\treturn n * (9 * n - 7) / 2\n\n\n\"\"\"\nWrite a function to find the"}
{"ID": 504, "source": "MBPP:141", "prompt": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort a list of elements using pancake sort.\n\"\"\"\ndef pancake_sort(nums):\n\t\"\"\"\n\t>>> pancake_sort([1, 5, 3, 2, 4])\n\t[1, 2, 3, 4, 5]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> pancake_sort([1, 5, 3, 2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> pancake_sort([1, 5, 3, 2, 4])\n\t[1, 2, 3, 4, 5]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> pancake_sort([1, 5, 3, 2, 4, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> pancake_sort([1, 5, 3, 2"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\tspring = ['March','April','May']\n\tsummer = ['June','July','August']\n\tfall = ['September','October','November']\n\twinter = ['December','January','February']\n\tif month in spring:\n\t\tprint(\"Spring\")\n\telif month in summer:\n\t\tprint(\"Summer\")\n\telif month in fall:\n\t\tprint(\"Fall\")\n\telif month in winter:\n\t\tprint(\"Winter\")\n\telse:\n\t\tprint(\"Invalid month\")\n\nmonth_season('March',31)\nmonth_season('June',30)\nmonth_season('September',30)\nmonth_season('December',31)\nmonth_season('January',31)\nmonth_season('February',28)\nmonth_season('April',30)\nmonth_season('July',31)\nmonth_season('October',31)\nmonth_season('November',30)\nmonth_season('May',31)\nmonth_season('August',31)\nmonth_season('October',31)\nmonth_season('November',30)\nmonth_season('February',29)\nmonth_season('February',28)\nmonth_season('April',31)\nmonth_season('July',32)\nmonth_season('October',32)\nmonth_season('November',31)\nmonth_season('May',32)\nmonth_season('August',32)\nmonth_season('October',32)\nmonth_season('November',31)\nmonth_season('February',30)\nmonth_season('April',32)\nmonth_season('July',33)\nmonth_season('October',33)\nmonth_season('November',32)\nmonth_season('May',33)\nmonth_season('August',33)\nmonth_season('October',33)\nmonth_season('November',32)\nmonth_season('February',31)\nmonth_season('April',33)\nmonth_season('July',34)\nmonth_season('October',34)\nmonth_season('November',33)\nmonth_season('May',34)\nmonth_season", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "month_season('March',31)\nmonth_season('June',30)\nmonth_season('September',30)\nmonth_season('December',31)\nmonth_season('January',31)\nmonth_season('February',28)\nmonth_season('April',30)\nmonth_season('July',31)\nmonth_season('October',31)\nmonth_season('November',30)\nmonth_season('May',31)\nmonth_season('August',31)\nmonth_season('October',31)\nmonth_season('November',30)\nmonth_season('February',29)\nmonth_season('February',28)\nmonth_season('April',31)\nmonth_season('July',32)\nmonth_season('October',32)\nmonth_season('November',31)\nmonth_season('May',32)\nmonth_season('August',32)\nmonth_season('October',32)\nmonth_season('November',31)\nmonth_season('February',30)\nmonth_season('April',32)\nmonth_season('July',33)\nmonth_season('October',33)\nmonth_season('November',32)\nmonth_season('May',33)\nmonth_season('August',33)\nmonth_season('October',33)\nmonth_season('November',32)\nmonth_season('February',31)\nmonth_season('April',33)\nmonth_season('July',34)\nmonth_season('October',34)\nmonth_season('November',33)\nmonth_season('May',34)\nmonth_season"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(slat)\n\tlon1 = radians(slon)\n\tlat2 = radians(elat)\n\tlon2 = radians(elon)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\tc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\tdistance = R * c\n\treturn distance\n\n\n\"\"\"\nWrite a function to calculate distance between two points using zip codes.\n\"\"\"\ndef distance_zip(zip1,zip2):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(zip1)\n\tlon1 = radians(zip2)\n\tlat2 = radians(elat)\n\tlon2 = radians(elon)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\tc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\tdistance = R * c\n\treturn distance\n\n\n\"\"\"\nWrite a function to calculate distance between two points using city and state.\n\"\"\"\ndef distance_city_state(city1,state1,city2,state2):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(city1)\n\tlon1 = radians(state1)\n\tlat2 = radians(city2)\n\tlon2 = radians(state2)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "from math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(slat)\n\tlon1 = radians(slon)\n\tlat2 = radians(elat)\n\tlon2 = radians(elon)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\tc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\tdistance = R * c\n\treturn distance\n\n\n\"\"\"\nWrite a function to calculate distance between two points using zip codes.\n\"\"\"\ndef distance_zip(zip1,zip2):\n\tfrom math import sin, cos, sqrt, atan2, radians\n\tR = 6373.0\n\tlat1 = radians(zip1)\n\tlon1 = radians(zip2)\n\tlat2 = radians(elat)\n\tlon2 = radians(elon)\n\tdlon = lon2 - lon1\n\tdlat = lat2 - lat1\n\ta = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n\tc = 2 * atan2(sqrt(a), sqrt(1 - a))"}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t\"\"\"\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 1, 1, 1, 1, 1, 1, 1])\n\t[1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 1, 1, 1, 1, 1, 1, 1])\n\t[1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n\t[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\t>>> decode_list([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])"}
{"ID": 588, "source": "MBPP:225", "prompt": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\n\"\"\"\ndef find_Min(arr,low,high): \n\tmin = arr[low] \n\ti = low \n\tfor i in range(high+1): \n\t\tif arr[i] < min: \n\t\t\tmin = arr[i] \n\treturn min \n\narr1 = [5, 6, 1, 2, 3, 4] \nn1 = len(arr1) \nprint(\"The minimum element is \" + str(find_Min(arr1, 0, n1-1))) \n\narr2 = [1, 2, 3, 4] \nn2 = len(arr2) \nprint(\"The minimum element is \" + str(find_Min(arr2, 0, n2-1))) \n\narr3 = [1] \nn3 = len(arr3) \nprint(\"The minimum element is \" + str(find_Min(arr3, 0, n3-1))) \n\narr4 = [1, 2] \nn4 = len(arr4) \nprint(\"The minimum element is \" + str(find_Min(arr4, 0, n4-1))) \n\narr5 = [2, 1] \nn5 = len(arr5) \nprint(\"The minimum element is \" + str(find_Min(arr5, 0, n5-1))) \n\narr6 = [5, 6, 7, 1, 2, 3, 4] \nn6 = len(arr6) \nprint(\"The minimum element is \" + str(find_Min(arr6, 0, n6-1))) \n\narr7 = [1, 2, 3, 4, 5, 6, 7] \nn7 = len(arr7) \nprint(\"The minimum element is \" + str(find_Min(arr7, 0, n7-1))) \n\narr8 = [2, 3, 4, 5, 6, 7, 8, 1] \nn8 = len(arr8) \nprint(\"The minimum element is \" + str(find_Min(arr8, 0, n8-1))) \n\narr9 = [3,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\narr1 = [5, 6, 1, 2, 3, 4] \nn1 = len(arr1) \nprint(\"The minimum element is \" + str(find_Min(arr1, 0, n1-1))) \n\narr2 = [1, 2, 3, 4] \nn2 = len(arr2) \nprint(\"The minimum element is \" + str(find_Min(arr2, 0, n2-1))) \n\narr3 = [1] \nn3 = len(arr3) \nprint(\"The minimum element is \" + str(find_Min(arr3, 0, n3-1))) \n\narr4 = [1, 2] \nn4 = len(arr4) \nprint(\"The minimum element is \" + str(find_Min(arr4, 0, n4-1))) \n\narr5 = [2, 1] \nn5 = len(arr5) \nprint(\"The minimum element is \" + str(find_Min(arr5, 0, n5-1))) \n\narr6 = [5, 6, 7, 1, 2, 3, 4] \nn6 = len(arr6) \nprint(\"The minimum element is \" + str(find_Min(arr6, 0, n6-1))) \n\narr7 = [1, 2, 3, 4, 5, 6, 7] \nn7 = len(arr7) \nprint(\"The minimum element is \" + str(find_Min(arr7, 0, n7-1))) \n\narr8 = [2, 3, 4, 5, 6, 7, 8, 1] \nn8 = len(arr8) \nprint(\"The minimum element is \" + str(find_Min(arr8, 0, n8-1))) "}
{"ID": 609, "source": "MBPP:246", "prompt": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function for computing square roots using the babylonian method.\n\"\"\"\ndef babylonian_squareroot(number):\n\t\"\"\"\n\tComputes the square root of a number using the babylonian method.\n\t\"\"\"\n\tguess = number / 2.0\n\twhile abs(guess * guess - number) > 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\twhile abs(guess * guess - number) > 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\tprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 59", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 59"}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t\"\"\"\n\tFind the n'th star number.\n\t\"\"\"\n\tstar_num = 0\n\twhile n > 0:\n\t\tstar_num += 1\n\t\tif is_star_num(star_num):\n\t\t\tn -= 1\n\treturn star_num\n\ndef is_star_num(n):\n\t\"\"\"\n\tCheck if a number is a star number.\n\t\"\"\"\n\twhile n > 0:\n\t\tif n % 10 == 6:\n\t\t\treturn True\n\t\tn //= 10\n\treturn False\n\nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10))\nprint(find_star_num(11))\nprint(find_star_num(12))\nprint(find_star_num(13))\nprint(find_star_num(14))\nprint(find_star_num(15))\nprint(find_star_num(16))\nprint(find_star_num(17))\nprint(find_star_num(18))\nprint(find_star_num(19))\nprint(find_star_num(20))\nprint(find_star_num(21))\nprint(find_star_num(22))\nprint(find_star_num(23))\nprint(find_star_num(24))\nprint(find_star_num(25))\nprint(find_star_num(26))\nprint(find_star_num(27))\nprint(find_star_num(28))\nprint(find_star_num(29))\nprint(find_star_num(30))\nprint(find_star_num(31))\nprint(find_star_num(32))\nprint(find_star_num(33))\nprint"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\tpattern = 'ab{2,3}'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_two_three(\"ab\"))\nprint(text_match_two_three(\"aabbbbbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_one(\"ab\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\tpattern = 'ab{3}'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"ababbbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\"\ndef text_match_anything_end_b(text):\n\tpattern = 'ab*?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_anything_end_b(\"ac\"))\nprint(text_match_anything_end_b(\"abc\"))\nprint(text_match_anything_end_b(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_beginning(text):\n\tpattern = '^\\w+'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_beginning(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_beginning(\" The quick brown fox jumps over", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "pattern = 'ab{2,3}'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_two_three(\"ab\"))\nprint(text_match_two_three(\"aabbbbbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\tpattern = 'ab?'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_zero_one(\"ab\"))\nprint(text_match_zero_one(\"abc\"))\nprint(text_match_zero_one(\"abbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\tpattern = 'ab{3}'\n\tif re.search(pattern, text):\n\t\treturn 'Found a match!'\n\telse:\n\t\treturn 'Not matched!'\n\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"ababbbc\"))\n\n\"\"\"\nWrite a function that matches a string that has an a followed by anything, ending in 'b'.\n\"\"\""}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmax_val = listval[0]\n\tfor i in listval:\n\t\tif i > max_val:\n\t\t\tmax_val = i\n\treturn max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t\"\"\"\n\tThis function finds the maximum of two numbers.\n\t\"\"\"\n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 686, "source": "MBPP:323", "prompt": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\n\"\"\"\ndef re_arrange(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\ndef re_arrange_2(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\telse:\n\t\t\tbreak\n\tif i == 0 or i == n:\n\t\treturn\n\tk = 0\n\twhile k < n and i < n:\n\t\tarr[k], arr[i] = arr[i], arr[k]\n\t\ti += 1\n\t\tk += 2\n\ndef re_arrange_3(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\telse:\n\t\t\tbreak\n\tif i == 0 or i == n:\n\t\treturn\n\tk = 0\n\twhile k < n and i < n:\n\t\tarr[k], arr[i] = arr[i], arr[k]\n\t\ti += 1\n\t\tk += 2\n\ndef re_arrange_4(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def re_arrange_2(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\telse:\n\t\t\tbreak\n\tif i == 0 or i == n:\n\t\treturn\n\tk = 0\n\twhile k < n and i < n:\n\t\tarr[k], arr[i] = arr[i], arr[k]\n\t\ti += 1\n\t\tk += 2\n\ndef re_arrange_3(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:\n\t\t\ti += 1\n\t\twhile j >= 0 and arr[j] < 0:\n\t\t\tj -= 1\n\t\tif i < j:\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\telse:\n\t\t\tbreak\n\tif i == 0 or i == n:\n\t\treturn\n\tk = 0\n\twhile k < n and i < n:\n\t\tarr[k], arr[i] = arr[i], arr[k]\n\t\ti += 1\n\t\tk += 2\n\ndef re_arrange_4(arr, n):\n\ti = 0\n\tj = n-1\n\twhile i < j:\n\t\twhile i < n and arr[i] > 0:"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t\"\"\"\n\t>>> set_to_tuple({1, 2, 3})\n\t((1, 2, 3),)\n\t>>> set_to_tuple({1, 2, 3, 4})\n\t((1, 2, 3, 4),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5})\n\t((1, 2, 3, 4, 5),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6})\n\t((1, 2, 3, 4, 5, 6),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7})\n\t((1, 2, 3, 4, 5, 6, 7),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8})\n\t((1, 2, 3, 4, 5, 6, 7, 8),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9})\n\t((1, 2,3, 4, 5, 6, 7, 8, 9),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\t((1, 2, 3, 4, 5, 6, 7, 8, 9, 10),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11})\n\t((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),)\n\t>>> set_to_tuple({1, 2, 3, 4", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\t>>> set_to_tuple({1, 2, 3})\n\t((1, 2, 3),)\n\t>>> set_to_tuple({1, 2, 3, 4})\n\t((1, 2, 3, 4),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5})\n\t((1, 2, 3, 4, 5),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6})\n\t((1, 2, 3, 4, 5, 6),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7})\n\t((1, 2, 3, 4, 5, 6, 7),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8})\n\t((1, 2, 3, 4, 5, 6, 7, 8),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9})\n\t((1, 2,3, 4, 5, 6, 7, 8, 9),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\t((1, 2, 3, 4, 5, 6, 7, 8, 9, 10),)\n\t>>> set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11})\n\t((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),)\n\t>>> set_to_tuple({1, 2, 3, 4"}
{"ID": 725, "source": "MBPP:362", "prompt": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(nums):\n\tmax_count = 0\n\tmax_item = None\n\tcount = {}\n\tfor i in nums:\n\t\tif i not in count:\n\t\t\tcount[i] = 1\n\t\telse:\n\t\t\tcount[i] += 1\n\t\tif count[i] > max_count:\n\t\t\tmax_count = count[i]\n\t\t\tmax_item = i\n\treturn max_item\n\nprint(max_occurrences([1, 3, 2, 1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_occurrences([1, 3, 2, 1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, 4, 1, 5, -1, -1, 2, -1, "}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume_cuboid=l*w*h\n\treturn volume_cuboid\n\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume_cuboid=l*w*h\n\treturn volume_cuboid\n\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "lateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume_cuboid=l*w*h\n\treturn volume_cuboid\n\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\tvolume_cuboid=l*w*h\n\treturn volume_cuboid\n\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\tlateralsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn lateralsurface_cuboid\n\n\"\"\"\nWrite a function to find the total surface area of cuboid\n\"\"\"\ndef totalsurface_cuboid(l,w,h):\n\ttotalsurface_cuboid=2*(l*w+w*h+h*l)\n\treturn totalsurface_cuboid\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\nurl = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(url) == True):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\nurl = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(url) == True):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\nurl = \"https://www.geeksforgeeks.org\"\nif(is_valid_URL(url) == True):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t\"\"\"\n\tThis function finds the minimum of two numbers.\n\t\"\"\"\n\tif a<b:\n\t\treturn a\n\telse:\n\t\treturn b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\tminval = listval[0]\n\tfor i in listval:\n\t\tif i < minval:\n\t\t\tminval = i\n\treturn minval\n\nprint(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,"}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t\"\"\"\n\t>>> multiple_to_single([11, 33, 50])\n\t113350\n\t\"\"\"\n\tresult = 0\n\tfor i in L:\n\t\tresult = result * 10 + i\n\treturn result\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(L):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in L:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn [even_sum, odd_sum]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the number of even numbers in the list.\nThe second element should be the number of odd numbers in the list.\n\"\"\"\ndef count_even_and_odd(L):\n\t\"\"\"\n\t>>> count_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[3, 3]\n\t\"\"\"\n\teven_count = 0\n\todd_count = 0\n\tfor i in L:\n\t\tif i % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\treturn [even_count, odd_count]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(L):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t113350\n\t\"\"\"\n\tresult = 0\n\tfor i in L:\n\t\tresult = result * 10 + i\n\treturn result\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(L):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in L:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn [even_sum, odd_sum]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the number of even numbers in the list.\nThe second element should be the number of odd numbers in the list.\n\"\"\"\ndef count_even_and_odd(L):\n\t\"\"\"\n\t>>> count_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[3, 3]\n\t\"\"\"\n\teven_count = 0\n\todd_count = 0\n\tfor i in L:\n\t\tif i % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\treturn [even_count, odd_count]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list."}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\tarea=l*b\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\tarea=s*s\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea=3.14*r*r\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\tarea=0.5*b*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\tarea=0.5*(a+b)*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(p,q):\n\tarea=0.5*p*q\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\tarea=b*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(d1,d2):\n\tarea=0.5*d1*d2\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(s):\n\tarea=(3*1.732*s*s)/2\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(s):\n\tarea=(7*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef octagon_area(s):\n\tarea=(4*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef nonagon_area(s):\n\tarea=(9*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\tarea=s*s\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\tarea=3.14*r*r\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\tarea=0.5*b*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\tarea=0.5*(a+b)*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(p,q):\n\tarea=0.5*p*q\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\tarea=b*h\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(d1,d2):\n\tarea=0.5*d1*d2\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(s):\n\tarea=(3*1.732*s*s)/2\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(s):\n\tarea=(7*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef octagon_area(s):\n\tarea=(4*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef nonagon_area(s):\n\tarea=(9*1.732*s*s)/4\n\treturn area\n\n\"\"\"\nWrite a function to"}
{"ID": 849, "source": "MBPP:486", "prompt": "\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to compute binomial probability for the given number.\n\"\"\"\ndef binomial_probability(n, k, p): \n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial\n\tn_choose_k = factorial(n) / (factorial(k) * factorial(n - k))\n\tprobability = n_choose_k * (p ** k) * ((1 - p) ** (n - k))\n\treturn probability\n\n\n\"\"\"\nWrite a function to compute binomial cumulative probability for the given number.\n\"\"\"\ndef binomial_cumulative_probability(n, k, p):\n\t\"\"\"\n\tn: number of trials\n\tk: number of successes\n\tp: probability of success\n\t\"\"\"\n\tfrom math import factorial"}
{"ID": 871, "source": "MBPP:508", "prompt": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\n\"\"\"\ndef same_order(l1, l2):\n\tl1_set = set(l1)\n\tl2_set = set(l2)\n\tcommon_elements = l1_set.intersection(l2_set)\n\tcommon_elements_l1 = [i for i in l1 if i in common_elements]\n\tcommon_elements_l2 = [i for i in l2 if i in common_elements]\n\treturn common_elements_l1 == common_elements_l2\n\n\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1,"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t\"\"\"\n\tThis function will count the element frequency in the mixed nested tuple.\n\t\"\"\"\n\tres = {}\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tfor sub in ele:\n\t\t\t\tres[sub] = res.get(sub, 0) + 1\n\t\telse:\n\t\t\tres[ele] = res.get(ele, 0) + 1\n\treturn res\n\n\ntest_tuple = (4, 5, 4, 5, 6, 6, 5, (5, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_tuple = (4, 5, 4, 5, 6, 6, 5, (5, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, 6, 5, 5, 6, 7, 8, 5, 4, 5, 4, 5, 6, "}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t\"\"\"\n\tCheck if two strings are permutations of each other.\n\t\"\"\"\n\tif len(str1) != len(str2):\n\t\treturn False\n\n\tchar_count = {}\n\tfor char in str1:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\n\tfor char in str2:\n\t\tif char not in char_count:\n\t\t\treturn False\n\t\tchar_count[char] -= 1\n\t\tif char_count[char] < 0:\n\t\t\treturn False\n\n\treturn True\n\n\ndef main():\n\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tstr1 = \"abc\"\n\tstr2 = \"bca\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tMain function.\n\t\"\"\"\n\tstr1 = \"abc\"\n\tstr2 = \"bca\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))\n\n\tstr1 = \"abc\"\n\tstr2 = \"bcaa\"\n\tprint(check_permutation(str1, str2))"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t\"\"\"\n\tWrite a function to convert the given tuple to a floating-point number.\n\t\"\"\"\n\treturn float('.'.join(str(ele) for ele in test_tup))\n\nprint(tuple_to_float((1, 2, 3)))\nprint(tuple_to_float((1, 2, 3, 4)))\nprint(tuple_to_float((1, 2, 3, 4, 5)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(tuple_to_float((1, 2, 3)))\nprint(tuple_to_float((1, 2, 3, 4)))\nprint(tuple_to_float((1, 2, 3, 4, 5)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(tuple_to_float((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "}
{"ID": 924, "source": "MBPP:561", "prompt": "\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\"\"\"\ndef assign_elements(test_list):\n\tres = []\n\tfor i in test_list:\n\t\tif i not in res:\n\t\t\tres.append(i)\n\t\telse:\n\t\t\tres.remove(i)\n\treturn res\n\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 6", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 6"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t\"\"\"\n\t>>> sort_sublists([['green', 'eggs', 'and'], ['ham'], ['then', 'comes', 'the', 'eggs', 'and', 'ham']])\n\t[['and', 'eggs', 'green'], ['ham'], ['and', 'comes', 'eggs', 'ham', 'the']]\n\t\"\"\"\n\tlist2 = []\n\tfor i in list1:\n\t\tlist2.append(sorted(i))\n\treturn list2\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list with two elements:\n\nThe first element should be the sum of all even numbers in the list.\nThe second element should be the sum of all odd numbers in the list.\n\"\"\"\ndef sum_even_and_odd(list1):\n\t\"\"\"\n\t>>> sum_even_and_odd([1, 2, 3, 4, 5, 6])\n\t[12, 9]\n\t\"\"\"\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn [even_sum, odd_sum]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef second_largest(list1):\n\t\"\"\"\n\t>>> second_largest([1, 2, 3, 4, 5, 6])\n\t5\n\t\"\"\"\n\tlist1.sort()\n\treturn list1[-2]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest(list1):\n\t\"\"\"\n\t>>> largest([1, 2, 3, 4, 5, 6])\n\t6\n\t\"\"\"\n\tlist1.sort()\n\treturn list1[-1]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest(list1):\n\t\"\"\"\n\t>>> smallest([1, 2, 3, 4, 5, 6])\n\t1\n\t\"\"\"\n\tlist1.sort()", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i % 2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn [even_sum, odd_sum]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the second largest number in the list.\n\"\"\"\ndef second_largest(list1):\n\t\"\"\"\n\t>>> second_largest([1, 2, 3, 4, 5, 6])\n\t5\n\t\"\"\"\n\tlist1.sort()\n\treturn list1[-2]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\"\"\"\ndef largest(list1):\n\t\"\"\"\n\t>>> largest([1, 2, 3, 4, 5, 6])\n\t6\n\t\"\"\"\n\tlist1.sort()\n\treturn list1[-1]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\"\"\"\ndef smallest(list1):\n\t\"\"\"\n\t>>> smallest([1, 2, 3, 4, 5, 6])\n\t1\n\t\"\"\""}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "<｜begin▁of▁sentence｜>\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\timport math\n\tr = math.sqrt(x**2 + y**2)\n\ttheta = math.atan(y/x)\n\treturn r, theta\n\n\"\"\"\nWrite a function to convert rectangular coordinates to polar coordinates.\n\"\"\"\ndef rect_polar(r,theta):\n\timport math\n\tx = r*math.cos(theta)\n\ty = r*math.sin(theta)\n\treturn x, y\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance(r1,theta1,r2,theta2):\n\timport math\n\tx1, y1 = rect_polar(r1,theta1)\n\tx2, y2 = rect_polar(r2,theta2)\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in rectangular coordinates.\n\"\"\"\ndef distance_rect(x1,y1,x2,y2):\n\timport math\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_polar(r1,theta1,r2,theta2):\n\timport math\n\td = math.sqrt((r1-r2)**2 + (theta1-theta2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_polar_rect(r1,theta1,r2,theta2):\n\timport math\n\tx1, y1 = rect_polar(r1,theta1)\n\tx2, y2 = rect_polar(r2,theta2)\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_rect_polar(x1,y1,x2,y2):\n\timport math\n\tr", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance(r1,theta1,r2,theta2):\n\timport math\n\tx1, y1 = rect_polar(r1,theta1)\n\tx2, y2 = rect_polar(r2,theta2)\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in rectangular coordinates.\n\"\"\"\ndef distance_rect(x1,y1,x2,y2):\n\timport math\n\td = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_polar(r1,theta1,r2,theta2):\n\timport math\n\td = math.sqrt((r1-r2)**2 + (theta1-theta2)**2)\n\treturn d\n\n\"\"\"\nWrite a function to calculate the distance between two points in polar coordinates.\n\"\"\"\ndef distance_polar_rect(r1,theta1,r2,theta2):\n\timport math\n\tx1, y1 = rect_polar(r1,theta1)\n\tx2, y2 = rect_polar(r2,theta2)"}
