{"ID": 8, "source": "MBPP:609", "prompt": "\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\n\"\"\"\ndef floor_Min(A,B,N):\n\tmin_val = A\n\tfor i in range(N):\n\t\tif (A+i*B) < min_val:\n\t\t\tmin_val = A+i*B\n\treturn min_val\n\nprint(floor_Min(10, 3, 5))\nprint(floor_Min(10, 3, 6))\nprint(floor_Min(10, 3, 7))\nprint(floor_Min(10, 3, 8))\nprint(floor_Min(10, 3, 9))\nprint(floor_Min(10, 3, 10))\nprint(floor_Min(10, 3, 11))\nprint(floor_Min(10, 3, 12))\nprint(floor_Min(10, 3, 13))\nprint(floor_Min(10, 3, 14))\nprint(floor_Min(10, 3, 15))\nprint(floor_Min(10, 3, 16))\nprint(floor_Min(10, 3, 17))\nprint(floor_Min(10, 3, 18))\nprint(floor_Min(10, 3, 19))\nprint(floor_Min(10, 3, 20))\nprint(floor_Min(10, 3, 21))\nprint(floor_Min(10, 3, 22))\nprint(floor_Min(10, 3, 23))\nprint(floor_Min(10, 3, 24))\nprint(floor_Min(10, 3, 25))\nprint(floor_Min(10, 3, 26))\nprint(floor_Min(10, 3, 27))\nprint(floor_Min(10, 3, 28))\nprint(floor_Min(10, 3, 29))\nprint(floor_Min(10, 3, 30))\nprint(floor_Min(10, 3, 31))\nprint(floor_Min(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(floor_Min(10, 3, 5))\nprint(floor_Min(10, 3, 6))\nprint(floor_Min(10, 3, 7))\nprint(floor_Min(10, 3, 8))\nprint(floor_Min(10, 3, 9))\nprint(floor_Min(10, 3, 10))\nprint(floor_Min(10, 3, 11))\nprint(floor_Min(10, 3, 12))\nprint(floor_Min(10, 3, 13))\nprint(floor_Min(10, 3, 14))\nprint(floor_Min(10, 3, 15))\nprint(floor_Min(10, 3, 16))\nprint(floor_Min(10, 3, 17))\nprint(floor_Min(10, 3, 18))\nprint(floor_Min(10, 3, 19))\nprint(floor_Min(10, 3, 20))\nprint(floor_Min(10, 3, 21))\nprint(floor_Min(10, 3, 22))\nprint(floor_Min(10, 3, 23))\nprint(floor_Min(10, 3, 24))\nprint(floor_Min(10, 3, 25))\nprint(floor_Min(10, 3, 26))\nprint(floor_Min(10, 3, 27))\nprint(floor_Min(10, 3, 28))\nprint(floor_Min(10, 3, 29))\nprint(floor_Min(10, 3, 30))\nprint(floor_Min(10, 3, 31))\nprint(floor_Min(1"}
{"ID": 9, "source": "MBPP:610", "prompt": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n\treturn list1[:L-1] + list1[L:]\n\nprint(remove_kth_element([1,2,3,4,5], 3))\n\n\"\"\"\nWrite a python function to check whether a given integer is a power of 2 or not.\n\"\"\"\ndef check_power_of_2(n):\n\treturn n > 0 and (n & (n - 1)) == 0\n\nprint(check_power_of_2(16))\n\n\"\"\"\nWrite a python function to find the maximum depth of a directory.\n\"\"\"\nimport os\n\ndef max_depth(path):\n\treturn max(map(len, path.split(os.path.sep)))\n\nprint(max_depth('/home/user/Documents/folder/subfolder/file.txt'))\n\n\"\"\"\nWrite a python function to find the maximum and minimum value of a list.\n\"\"\"\ndef max_min(list1):\n\treturn max(list1), min(list1)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list up to the last element.\n\"\"\"\ndef sum_upto_last(list1):\n\treturn sum(list1[:-1])\n\nprint(sum_upto_last([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list excluding the first element.\n\"\"\"\ndef sum_excluding_first(list1):\n\treturn sum(list1[1:])\n\nprint(sum_excluding_first([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list excluding the last element.\n\"\"\"\ndef sum_excluding_last(list1):\n\treturn sum(list1[:-1])\n\nprint(sum_excluding_last([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list excluding the first and last element.\n\"\"\"\ndef sum_excluding_first_last(list1):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a python function to find the maximum and minimum value of a list.\n\"\"\"\ndef max_min(list1):\n\treturn max(list1), min(list1)\n\nprint(max_min([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list up to the last element.\n\"\"\"\ndef sum_upto_last(list1):\n\treturn sum(list1[:-1])\n\nprint(sum_upto_last([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list excluding the first element.\n\"\"\"\ndef sum_excluding_first(list1):\n\treturn sum(list1[1:])\n\nprint(sum_excluding_first([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list excluding the last element.\n\"\"\"\ndef sum_excluding_last(list1):\n\treturn sum(list1[:-1])\n\nprint(sum_excluding_last([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of the elements of a list excluding the first and last element.\n\"\"\"\ndef sum_excluding_first_last(list1):\n\t"}
{"ID": 20, "source": "MBPP:621", "prompt": "\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n\tresult = []\n\tfor i in test_list:\n\t\ttemp = ''\n\t\tfor j in i:\n\t\t\tif j.isdigit():\n\t\t\t\ttemp += str(int(j) + K)\n\t\t\telse:\n\t\t\t\ttemp += j\n\t\tresult.append(temp)\n\treturn result\n\n\nif __name__ == '__main__':\n\ttest_list = ['123', 'abc', 'xyz']\n\tK = 1\n\tprint(increment_numerics(test_list, K))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\tfor i in range(start,end+1): \n\t\tif i not in array: \n\t\t\treturn i \n\treturn end+1\n\ndef find_Missing_Number(array): \n\tstart = 0\n\tend = len(array)-1\n\twhile start <= end: \n\t\tmid = (start + end)//2\n\t\tif array[mid] != mid: \n\t\t\tend = mid-1\n\t\telse: \n\t\t\tstart = mid+1\n\treturn find_First_Missing(array,start,end) \n\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 9", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 9"}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\treturn re.sub(r\"\\s+\", \"_\", text)\n\ndef replace_underscores(text):\n\treturn re.sub(r\"_+\", \" \", text)\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_character(text):\n\tchar_count = {}\n\tfor char in text:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in text:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_character(text):\n\tchar_count = {}\n\tfor char in text:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in text:\n\t\tif char_count[char] > 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(text):\n\twords = text.split()\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\tfor word in words:\n\t\tif word_count[word] > 1:\n\t\t\treturn word\n\treturn None\n\n\"\"\"\nWrite a function to find the first repeated substring in a given string.\n\"\"\"\ndef first_repeated_substring(text):\n\tsubstring_count = {}\n\tfor i in range(len(text)):\n\t\tfor j in range(i+1, len(text)+1):\n\t\t\tsubstring = text[i:j]\n\t\t\tif substring in substring_count:\n\t\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef replace_underscores(text):\n\treturn re.sub(r\"_+\", \" \", text)\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_character(text):\n\tchar_count = {}\n\tfor char in text:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in text:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_character(text):\n\tchar_count = {}\n\tfor char in text:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in text:\n\t\tif char_count[char] > 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(text):\n\twords = text.split()\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<s> \"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\th = []\n\tfor value in iterable:\n\t\theappush(h, value)\n\treturn [heappop(h) for i in range(len(h))]\n\n\"\"\"\nWrite a function to sort a list of lists by the sum of its elements.\n\"\"\"\ndef sort_list_of_lists(list_of_lists):\n\treturn sorted(list_of_lists, key=sum)\n\n\"\"\"\nWrite a function to sort a list of lists in descending order by the sum of its elements.\n\"\"\"\ndef sort_list_of_lists_descending(list_of_lists):\n\treturn sorted(list_of_lists, key=sum, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of lists in descending order by the sum of its elements and the first element of each list.\n\"\"\"\ndef sort_list_of_lists_descending_first(list_of_lists):\n\treturn sorted(list_of_lists, key=lambda x: (sum(x), x[0]), reverse=True)\n\n\"\"\"\nWrite a function to sort a list of strings in descending order by the sum of its characters.\n\"\"\"\ndef sort_list_of_strings(list_of_strings):\n\treturn sorted(list_of_strings, key=lambda x: sum(map(ord, x)))\n\n\"\"\"\nWrite a function to sort a list of strings in descending order by the sum of its characters and the first character of each string.\n\"\"\"\ndef sort_list_of_strings_descending_first(list_of_strings):\n\treturn sorted(list_of_strings, key=lambda x: (sum(map(ord, x)), x[0]))\n\n\"\"\"\nWrite a function to sort a list of strings in descending order by the sum of its characters and the first character of each string.\n\"\"\"\ndef sort_list_of_strings_descending_first(list_of_strings):\n\treturn sorted(list_of_strings, key=lambda x: (sum(map(ord, x)), x[0]))\n\n\"\"\"\nWrite a function to sort a list of strings in descending order by the sum of its characters and the first", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "Write a function to sort a list of strings in descending order by the sum of its characters and the first"}
{"ID": 35, "source": "MBPP:636", "prompt": "\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b*b - 4*a*c\n\tif d == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(1,2,28))\nprint(Check_Solution(1,2,29))\nprint(Check_Solution(1,2,30))\nprint(Check_Solution(1,2,31))\nprint(Check_Solution(1,2,32))\nprint(Check_Sol", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(1,2,28))\nprint(Check_Solution(1,2,29))\nprint(Check_Solution(1,2,30))\nprint(Check_Solution(1,2,31))\nprint(Check_Solution(1,2,32))\nprint(Check_Sol"}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "<s> \"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\treturn sum(len(name) for name in sample_names if name[0].isupper())\n\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):"}
{"ID": 39, "source": "MBPP:640", "prompt": "\"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove the parenthesis area in a string.\n\"\"\"\ndef remove_parenthesis(items):\n\t\"\"\"\n\t:param items: string\n\t:return: string\n\t\"\"\"\n\tresult = \"\"\n\tcount = 0\n\tfor item in items:\n\t\tif item == \"(\":\n\t\t\tcount += 1\n\t\telif item == \")\":\n\t\t\tcount -= 1\n\t\telse:\n\t\t\tif count == 0:\n\t\t\t\tresult += item\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(remove_parenthesis(\"(abcd)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n(o)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n(o)p\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n(o)p(q)\"))\n\tprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(remove_parenthesis(\"(abcd)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n(o)\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n(o)p\"))\n\tprint(remove_parenthesis(\"(ab(cd)e)f(g)h(i)j(k)l(m)n(o)p(q)\"))\n\tprint"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\timport re\n\treturn re.findall(r'^[^z]*z[^z]*$', text)\n\n\"\"\"\nWrite a function that matches a word"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\timport collections\n\td = collections.defaultdict(list)\n\tfor k, v in l:\n\t\td[k].append(v)\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of dictionaries using collections module.\n\"\"\"\ndef grouping_dictionary_of_dictionaries(l):\n\timport collections\n\td = collections.defaultdict(dict)\n\tfor k, v in l:\n\t\td[k][v] = v\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of sets using collections module.\n\"\"\"\ndef grouping_dictionary_of_sets(l):\n\timport collections\n\td = collections.defaultdict(set)\n\tfor k, v in l:\n\t\td[k].add(v)\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of counters using collections module.\n\"\"\"\ndef grouping_dictionary_of_counters(l):\n\timport collections\n\td = collections.defaultdict(collections.Counter)\n\tfor k, v in l:\n\t\td[k][v] += 1\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using itertools module.\n\"\"\"\ndef grouping_dictionary_itertools(l):\n\timport itertools\n\td = {}\n\tfor k, v in itertools.groupby(l, lambda x: x[0]):\n\t\td[k] = [i[1] for i in v]\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of dictionaries using itertools module.\n\"\"\"\ndef grouping_dictionary_of_dictionaries_itertools(l):\n\timport itertools\n\td = {}\n\tfor k, v in itertools.groupby(l, lambda x: x[0]):\n\t\td[k] = dict(v)\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of sets using itertools module.\n\"\"\"\ndef grouping_dictionary_of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport collections\n\td = collections.defaultdict(list)\n\tfor k, v in l:\n\t\td[k].append(v)\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of dictionaries using collections module.\n\"\"\"\ndef grouping_dictionary_of_dictionaries(l):\n\timport collections\n\td = collections.defaultdict(dict)\n\tfor k, v in l:\n\t\td[k][v] = v\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of sets using collections module.\n\"\"\"\ndef grouping_dictionary_of_sets(l):\n\timport collections\n\td = collections.defaultdict(set)\n\tfor k, v in l:\n\t\td[k].add(v)\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of counters using collections module.\n\"\"\"\ndef grouping_dictionary_of_counters(l):\n\timport collections\n\td = collections.defaultdict(collections.Counter)\n\tfor k, v in l:\n\t\td[k][v] += 1\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using itertools module.\n\"\"\"\ndef grouping_dictionary_itertools(l):\n\timport itertools\n\td = {}\n\tfor k, v in itertools.groupby(l, lambda x: x[0]):\n\t\td[k] = [i[1] for i in v]\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of dictionaries using itertools module.\n\"\"\"\ndef grouping_dictionary_of_dictionaries_itertools(l):\n\timport itertools\n\td = {}\n\tfor k, v in itertools.groupby(l, lambda x: x[0]):\n\t\td[k] = dict(v)\n\treturn d\n\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of sets using itertools module.\n\"\"\"\ndef grouping_dictionary_of"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\ndef trapezium_perimeter(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(d1,d2):\n\treturn 4*d1\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef cube_area(s):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\ndef trapezium_perimeter(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(d1,d2):\n\treturn 4*d1\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef cube_area(s):"}
{"ID": 57, "source": "MBPP:658", "prompt": "\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n\treturn max(set(list1), key=list1.count)\n\nprint(max_occurrences([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(max_occurrences([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,"}
{"ID": 68, "source": "MBPP:669", "prompt": "\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\n\"\"\"\ndef check_IP(Ip): \n\timport re\n\tregex = r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n\tpattern = re.compile(regex)\n\treturn pattern.match(Ip)\n\nprint(check_IP(\"192.168.1.1\"))\nprint(check_IP(\"192.168.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1.1.1\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_IP(\"192.168.1.1\"))\nprint(check_IP(\"192.168.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1.1\"))\nprint(check_IP(\"192.168.1.1.1.1.1.1.1.1.1.1.1.1.1.1\"))"}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four(num1,num2,num3,num4): \n\treturn max(num1,num2,num3,num4)\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five(num1,num2,num3,num4,num5): \n\treturn max(num1,num2,num3,num4,num5)\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six(num1,num2,num3,num4,num5,num6): \n\treturn max(num1,num2,num3,num4,num5,num6)\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven(num1,num2,num3,num4,num5,num6,num7): \n\treturn max(num1,num2,num3,num4,num5,num6,num7)\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight(num1,num2,num3,num4,num5,num6,num7,num8): \n\treturn max(num1,num2,num3,num4,num5,num6,num7,num8)\n\n\"\"\"\nWrite a function to find maximum of nine numbers.\n\"\"\"\ndef max_of_nine(num1,num2,num3,num4,num5,num6,num7,num8,num9): \n\treturn max(num1,num2,num3,num4,num5,num6,num7,num8,num9)\n\n\"\"\"\nWrite a function to find maximum of ten numbers.\n\"\"\"\ndef max_of_ten(num1,num2,num3,num4,num5,num6,num7,num8,num9,num10): \n\treturn max(num1,num2,num3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max(num1,num2,num3)\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four(num1,num2,num3,num4): \n\treturn max(num1,num2,num3,num4)\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five(num1,num2,num3,num4,num5): \n\treturn max(num1,num2,num3,num4,num5)\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six(num1,num2,num3,num4,num5,num6): \n\treturn max(num1,num2,num3,num4,num5,num6)\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven(num1,num2,num3,num4,num5,num6,num7): \n\treturn max(num1,num2,num3,num4,num5,num6,num7)\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight(num1,num2,num3,num4,num5,num6,num7,num8): "}
{"ID": 73, "source": "MBPP:674", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\n\"\"\"\ndef remove_duplicate(string):\n\timport collections\n\treturn \" \".join(collections.OrderedDict.fromkeys(string.split()))\n\n\"\"\"\nWrite a function to check whether a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check whether a given string is a pangram or not.\n\"\"\"\ndef is_pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check whether a given string is a isogram or not.\n\"\"\"\ndef is_isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check whether a given string is a anagram or not.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check whether a given string is a permutation or not.\n\"\"\"\ndef is_permutation(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check whether a given string is a one time pad or not.\n\"\"\"\ndef is_one_time_pad(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check whether a given string is a palindrome or not using recursion.\n\"\"\"\ndef is_palindrome_recursion(string):\n\tif len(string) <= 1:\n\t\treturn True\n\tif string[0] == string[-1]:\n\t\treturn is_palindrome_recursion(string[1:-1])\n\treturn False\n\n\"\"\"\nWrite a function to check whether a given string is a pangram or not using recursion.\n\"\"\"\ndef is_pangram_recursion(string):\n\tif len(string) == 0:\n\t\treturn False\n\tif len(string) == 1:\n\t\treturn True\n\tif string[0].lower() in 'abcdefghijkl", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport collections\n\treturn \" \".join(collections.OrderedDict.fromkeys(string.split()))\n\n\"\"\"\nWrite a function to check whether a given string is a palindrome or not.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check whether a given string is a pangram or not.\n\"\"\"\ndef is_pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check whether a given string is a isogram or not.\n\"\"\"\ndef is_isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check whether a given string is a anagram or not.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check whether a given string is a permutation or not.\n\"\"\"\ndef is_permutation(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check whether a given string is a one time pad or not.\n\"\"\"\ndef is_one_time_pad(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check whether a given string is a palindrome or not using recursion.\n\"\"\""}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\treturn all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\nprint(increasing_trend([1,2,3,4,5]))\nprint(increasing_trend([1,2,3,4,5,6]))\nprint(increasing_trend([1,2,3,4,5,6,7]))\nprint(increasing_trend([1,2,3,4,5,6,7,8]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(increasing_trend([1,2,3,4,5]))\nprint(increasing_trend([1,2,3,4,5,6]))\nprint(increasing_trend([1,2,3,4,5,6,7]))\nprint(increasing_trend([1,2,3,4,5,6,7,8]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,"}
{"ID": 81, "source": "MBPP:682", "prompt": "\"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\n\"\"\"\nWrite a function to find the maximum element in a list.\n\"\"\"\ndef max_list(nums):\n\treturn max(nums)\n\n\"\"\"\nWrite a function to find the minimum element in a list.\n\"\"\"\ndef min_list(nums):\n\treturn min(nums)\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\n\"\"\"\nWrite a function to find the length of a list.\n\"\"\"\ndef len_list(nums):\n\treturn len(nums)\n\n\"\"\"\nWrite a function to find the average of all the elements in a list.\n\"\"\"\ndef avg_list(nums):\n\treturn sum(nums)/len(nums)\n\n\"\"\"\nWrite a function to find the frequency of each element in a list.\n\"\"\"\ndef freq_list(nums):\n\treturn {i:nums.count(i) for i in nums}\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using map and lambda function.\n\"\"\"\ndef freq_list_map(nums):\n\treturn list(map(lambda x:nums.count(x),nums))\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using filter and lambda function.\n\"\"\"\ndef freq_list_filter(nums):\n\treturn list(filter(lambda x:nums.count(x),nums))\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using reduce and lambda function.\n\"\"\"\ndef freq_list_reduce(nums):\n\tfrom functools import reduce\n\treturn reduce(lambda x,y:x+y,nums)\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using map, filter and lambda function.\n\"\"\"\ndef freq_list_map_filter(nums):\n\treturn list(map(lambda x:nums.count(x),filter", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\n\"\"\"\nWrite a function to find the maximum element in a list.\n\"\"\"\ndef max_list(nums):\n\treturn max(nums)\n\n\"\"\"\nWrite a function to find the minimum element in a list.\n\"\"\"\ndef min_list(nums):\n\treturn min(nums)\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\n\"\"\"\nWrite a function to find the length of a list.\n\"\"\"\ndef len_list(nums):\n\treturn len(nums)\n\n\"\"\"\nWrite a function to find the average of all the elements in a list.\n\"\"\"\ndef avg_list(nums):\n\treturn sum(nums)/len(nums)\n\n\"\"\"\nWrite a function to find the frequency of each element in a list.\n\"\"\"\ndef freq_list(nums):\n\treturn {i:nums.count(i) for i in nums}\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using map and lambda function.\n\"\"\"\ndef freq_list_map(nums):\n\treturn list(map(lambda x:nums.count(x),nums))\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using filter and lambda function.\n\"\"\"\ndef freq_list_filter(nums):\n\treturn list(filter(lambda x:nums.count(x),nums))\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using reduce and lambda function.\n\"\"\"\ndef freq_list_reduce(nums):\n\tfrom functools import reduce\n\treturn reduce(lambda x,y:x+y,nums)\n\n\"\"\"\nWrite a function to find the frequency of each element in a list using map, filter and lambda function.\n\"\"\""}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\tfor i in range(1, n) : \n\t\tfor j in range(1, n) : \n\t\t\tif (i * i + j * j == n) : \n\t\t\t\treturn True\n\treturn False\n\nprint(sum_Square(10))\nprint(sum_Square(11))\nprint(sum_Square(12))\nprint(sum_Square(13))\nprint(sum_Square(14))\nprint(sum_Square(15))\nprint(sum_Square(16))\nprint(sum_Square(17))\nprint(sum_Square(18))\nprint(sum_Square(19))\nprint(sum_Square(20))\nprint(sum_Square(21))\nprint(sum_Square(22))\nprint(sum_Square(23))\nprint(sum_Square(24))\nprint(sum_Square(25))\nprint(sum_Square(26))\nprint(sum_Square(27))\nprint(sum_Square(28))\nprint(sum_Square(29))\nprint(sum_Square(30))\nprint(sum_Square(31))\nprint(sum_Square(32))\nprint(sum_Square(33))\nprint(sum_Square(34))\nprint(sum_Square(35))\nprint(sum_Square(36))\nprint(sum_Square(37))\nprint(sum_Square(38))\nprint(sum_Square(39))\nprint(sum_Square(40))\nprint(sum_Square(41))\nprint(sum_Square(42))\nprint(sum_Square(43))\nprint(sum_Square(44))\nprint(sum_Square(45))\nprint(sum_Square(46))\nprint(sum_Square(47))\nprint(sum_Square(48))\nprint(sum_Square(49))\nprint(sum_Square(50))\nprint(sum_S", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_Square(10))\nprint(sum_Square(11))\nprint(sum_Square(12))\nprint(sum_Square(13))\nprint(sum_Square(14))\nprint(sum_Square(15))\nprint(sum_Square(16))\nprint(sum_Square(17))\nprint(sum_Square(18))\nprint(sum_Square(19))\nprint(sum_Square(20))\nprint(sum_Square(21))\nprint(sum_Square(22))\nprint(sum_Square(23))\nprint(sum_Square(24))\nprint(sum_Square(25))\nprint(sum_Square(26))\nprint(sum_Square(27))\nprint(sum_Square(28))\nprint(sum_Square(29))\nprint(sum_Square(30))\nprint(sum_Square(31))\nprint(sum_Square(32))\nprint(sum_Square(33))\nprint(sum_Square(34))\nprint(sum_Square(35))\nprint(sum_Square(36))\nprint(sum_Square(37))\nprint(sum_Square(38))\nprint(sum_Square(39))\nprint(sum_Square(40))\nprint(sum_Square(41))\nprint(sum_Square(42))\nprint(sum_Square(43))\nprint(sum_Square(44))\nprint(sum_Square(45))\nprint(sum_Square(46))\nprint(sum_Square(47))\nprint(sum_Square(48))\nprint(sum_Square(49))\nprint(sum_Square(50))\nprint(sum_S"}
{"ID": 86, "source": "MBPP:687", "prompt": "\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\telse:\n\t\treturn recur_gcd(b % a, a)\n\nprint(recur_gcd(12, 15))\nprint(recur_gcd(12, 18))\nprint(recur_gcd(12, 24))\nprint(recur_gcd(12, 48))\nprint(recur_gcd(12, 72))\nprint(recur_gcd(12, 96))\nprint(recur_gcd(12, 120))\nprint(recur_gcd(12, 144))\nprint(recur_gcd(12, 168))\nprint(recur_gcd(12, 192))\nprint(recur_gcd(12, 216))\nprint(recur_gcd(12, 240))\nprint(recur_gcd(12, 264))\nprint(recur_gcd(12, 288))\nprint(recur_gcd(12, 312))\nprint(recur_gcd(12, 336))\nprint(recur_gcd(12, 360))\nprint(recur_gcd(12, 384))\nprint(recur_gcd(12, 408))\nprint(recur_gcd(12, 432))\nprint(recur_gcd(12, 456))\nprint(recur_gcd(12, 480))\nprint(recur_gcd(12, 504))\nprint(recur_gcd(12, 528))\nprint(recur_gcd(12, 552))\nprint(recur_gcd(12, 576))\nprint(recur_gcd(12, 600))\nprint(recur_gcd(12, 624))\nprint(recur_gcd(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(recur_gcd(12, 15))\nprint(recur_gcd(12, 18))\nprint(recur_gcd(12, 24))\nprint(recur_gcd(12, 48))\nprint(recur_gcd(12, 72))\nprint(recur_gcd(12, 96))\nprint(recur_gcd(12, 120))\nprint(recur_gcd(12, 144))\nprint(recur_gcd(12, 168))\nprint(recur_gcd(12, 192))\nprint(recur_gcd(12, 216))\nprint(recur_gcd(12, 240))\nprint(recur_gcd(12, 264))\nprint(recur_gcd(12, 288))\nprint(recur_gcd(12, 312))\nprint(recur_gcd(12, 336))\nprint(recur_gcd(12, 360))\nprint(recur_gcd(12, 384))\nprint(recur_gcd(12, 408))\nprint(recur_gcd(12, 432))\nprint(recur_gcd(12, 456))\nprint(recur_gcd(12, 480))\nprint(recur_gcd(12, 504))\nprint(recur_gcd(12, 528))\nprint(recur_gcd(12, 552))\nprint(recur_gcd(12, 576))\nprint(recur_gcd(12, 600))\nprint(recur_gcd(12, 624))\nprint(recur_gcd(1"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 +", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):"}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "<s> \"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\tif n <= 0:\n\t\treturn 0\n\tif arr[0] == 0:\n\t\treturn float('inf')\n\tmax_reachable_index = arr[0]\n\tstep = arr[0]\n\tfor i in range(1, n):\n\t\tif i > max_reachable_index:\n\t\t\treturn float('inf')\n\t\tmax_reachable_index = max(max_reachable_index, i + arr[i])\n\t\tif i == n - 1:\n\t\t\treturn 1\n\t\tstep -= 1\n\t\tif step == 0:\n\t\t\tstep = max_reachable_index - i\n\treturn 1 + min_jumps(arr, max_reachable_index)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\timport re\n\treturn re.sub(r'\\s+', ' ', text1)\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split() and join().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn \" \".join(text1.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.replace(\"  \", \" \")\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using rstrip().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.rstrip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using lstrip().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.lstrip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using rjust().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.rjust()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using ljust().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.ljust()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using center().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.center()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using expandtabs().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.expandtabs()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using translate().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.translate()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using maketrans().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.maketrans()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'\\s+', ' ', text1)\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using split() and join().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn \" \".join(text1.split())\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using replace().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.replace(\"  \", \" \")\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using strip().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.strip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using rstrip().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.rstrip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using lstrip().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.lstrip()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using rjust().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.rjust()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using ljust().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.ljust()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using center().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.center()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using expandtabs().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.expandtabs()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using translate().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.translate()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by using maketrans().\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn text1.maketrans()\n\n\"\"\"\nWrite a function to remove multiple spaces in a string by"}
{"ID": 99, "source": "MBPP:700", "prompt": "\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n\tcount = 0\n\tfor i in li:\n\t\tif min <= i <= max:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 2))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 2))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 0))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 0))\nprint(count_range_in_list([1, 2, 3, 4, 5], 0, 0))\nprint(count_range_in_list([1, 2, 3, 4, 5], 0, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5], 0, 2))\nprint(count_range_in_list([1,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_range_in_list([1, 2, 3, 4, 5], 2, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 4))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 5))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 3))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 2))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 2))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5], 1, 0))\nprint(count_range_in_list([1, 2, 3, 4, 5], 2, 0))\nprint(count_range_in_list([1, 2, 3, 4, 5], 0, 0))\nprint(count_range_in_list([1, 2, 3, 4, 5], 0, 1))\nprint(count_range_in_list([1, 2, 3, 4, 5], 0, 2))\nprint(count_range_in_list([1,"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\treturn sorted(list1, key=lambda x: (len(x), x))\n\nprint(sort_sublists([[1, 2], [1, 2, 3], [1, 2], [1, 3], [2, 3], [2], [3], [3], [2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(sort_sublists([[1, 2], [1, 2, 3], [1, 2], [1, 3], [2, 3], [2], [3], [3], [2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\treturn list(string)\n\nprint(Convert(\"Python\"))\nprint(Convert(\"Java\"))\nprint(Convert(\"C++\"))\nprint(Convert(\"C#\"))\nprint(Convert(\"PHP\"))\nprint(Convert(\"Ruby\"))\nprint(Convert(\"Perl\"))\nprint(Convert(\"Go\"))\nprint(Convert(\"Kotlin\"))\nprint(Convert(\"Swift\"))\nprint(Convert(\"Dart\"))\nprint(Convert(\"JavaScript\"))\nprint(Convert(\"TypeScript\"))\nprint(Convert(\"React\"))\nprint(Convert(\"Angular\"))\nprint(Convert(\"Vue\"))\nprint(Convert(\"MongoDB\"))\nprint(Convert(\"MySQL\"))\nprint(Convert(\"PostgreSQL\"))\nprint(Convert(\"SQLite\"))\nprint(Convert(\"Oracle\"))\nprint(Convert(\"Microsoft\"))\nprint(Convert(\"Linux\"))\nprint(Convert(\"Windows\"))\nprint(Convert(\"Mac\"))\nprint(Convert(\"Chrome\"))\nprint(Convert(\"Firefox\"))\nprint(Convert(\"Safari\"))\nprint(Convert(\"Opera\"))\nprint(Convert(\"Mozilla\"))\nprint(Convert(\"IE\"))\nprint(Convert(\"Edge\"))\nprint(Convert(\"Google\"))\nprint(Convert(\"Amazon\"))\nprint(Convert(\"Apple\"))\nprint(Convert(\"Microsoft\"))\nprint(Convert(\"Adobe\"))\nprint(Convert(\"Intel\"))\nprint(Convert(\"AMD\"))\nprint(Convert(\"NVIDIA\"))\nprint(Convert(\"Qualcomm\"))\nprint(Convert(\"Facebook\"))\nprint(Convert(\"Twitter\"))\nprint(Convert(\"Instagram\"))\nprint(Convert(\"LinkedIn\"))\nprint(Convert(\"YouTube\"))\nprint(Convert(\"TikTok\"))\nprint(Convert(\"Reddit\"))\nprint(Convert(\"Stack Overflow\"))\nprint(Convert(\"Quora\"))\nprint(Convert(\"GitHub\"))\nprint(Convert(\"Git\"))\nprint(Convert(\"BitBucket\"))\nprint(Convert(\"Linux\"))\nprint(Convert(\"Windows\"))\nprint(Convert(\"Mac\"))\nprint(Convert(\"Chrome\"))\nprint(Convert(\"Firefox\"))\nprint(Convert(\"Safari\"))\nprint(Convert(\"Opera\"))\nprint(Convert(\"Mozilla\"))\nprint(Convert(\"IE\"))\nprint(Convert(\"Edge\"))\nprint(Convert(\"Google\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Convert(\"Python\"))\nprint(Convert(\"Java\"))\nprint(Convert(\"C++\"))\nprint(Convert(\"C#\"))\nprint(Convert(\"PHP\"))\nprint(Convert(\"Ruby\"))\nprint(Convert(\"Perl\"))\nprint(Convert(\"Go\"))\nprint(Convert(\"Kotlin\"))\nprint(Convert(\"Swift\"))\nprint(Convert(\"Dart\"))\nprint(Convert(\"JavaScript\"))\nprint(Convert(\"TypeScript\"))\nprint(Convert(\"React\"))\nprint(Convert(\"Angular\"))\nprint(Convert(\"Vue\"))\nprint(Convert(\"MongoDB\"))\nprint(Convert(\"MySQL\"))\nprint(Convert(\"PostgreSQL\"))\nprint(Convert(\"SQLite\"))\nprint(Convert(\"Oracle\"))\nprint(Convert(\"Microsoft\"))\nprint(Convert(\"Linux\"))\nprint(Convert(\"Windows\"))\nprint(Convert(\"Mac\"))\nprint(Convert(\"Chrome\"))\nprint(Convert(\"Firefox\"))\nprint(Convert(\"Safari\"))\nprint(Convert(\"Opera\"))\nprint(Convert(\"Mozilla\"))\nprint(Convert(\"IE\"))\nprint(Convert(\"Edge\"))\nprint(Convert(\"Google\"))\nprint(Convert(\"Amazon\"))\nprint(Convert(\"Apple\"))\nprint(Convert(\"Microsoft\"))\nprint(Convert(\"Adobe\"))\nprint(Convert(\"Intel\"))\nprint(Convert(\"AMD\"))\nprint(Convert(\"NVIDIA\"))\nprint(Convert(\"Qualcomm\"))\nprint(Convert(\"Facebook\"))\nprint(Convert(\"Twitter\"))\nprint(Convert(\"Instagram\"))\nprint(Convert(\"LinkedIn\"))\nprint(Convert(\"YouTube\"))\nprint(Convert(\"TikTok\"))\nprint(Convert(\"Reddit\"))\nprint(Convert(\"Stack Overflow\"))\nprint(Convert(\"Quora\"))\nprint(Convert(\"GitHub\"))\nprint(Convert(\"Git\"))\nprint(Convert(\"BitBucket\"))\nprint(Convert(\"Linux\"))\nprint(Convert(\"Windows\"))\nprint(Convert(\"Mac\"))\nprint(Convert(\"Chrome\"))\nprint(Convert(\"Firefox\"))\nprint(Convert(\"Safari\"))\nprint(Convert(\"Opera\"))\nprint(Convert(\"Mozilla\"))\nprint(Convert(\"IE\"))\nprint(Convert(\"Edge\"))\nprint(Convert(\"Google\"))\n"}
{"ID": 109, "source": "MBPP:710", "prompt": "\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn test_tup[0], test_tup[-1]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test_list):\n\treturn sum(test_list[0::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef sum_odd_indexes(test_list):\n\treturn sum(test_list[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef sum_even_indexes(test"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\treturn all(test_tup)\n\nif __name__ == \"__main__\":\n\tprint(check_valid((1, 2, 3, 4, 5)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n\tprint(check_valid((1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(check_valid((1, 2, 3, 4, 5)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n\tprint(check_valid((1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n\tprint(check_valid((1"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\twhile n > 1:  \n\t\tcount += 1\n\t\tn /= 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:  \n\t\tp = count_Fac(n)  \n\t\tcount += 1\n\t\tn /= p\n\treturn count\n\nprint(count_distinct_power_of_prime_factor(12))\nprint(count_distinct_power_of_prime_factor(15))\nprint(count_distinct_power_of_prime_factor(16))\nprint(count_distinct_power_of_prime_factor(24))\nprint(count_distinct_power_of_prime_factor(32))\nprint(count_distinct_power_of_prime_factor(64))\nprint(count_distinct_power_of_prime_factor(128))\nprint(count_distinct_power_of_prime_factor(256))\nprint(count_distinct_power_of_prime_factor(512))\nprint(count_distinct_power_of_prime_factor(1024))\nprint(count_distinct_power_of_prime_factor(2048))\nprint(count_distinct_power_of_prime_factor(4096))\nprint(count_distinct_power_of_prime_factor(8192))\nprint(count_distinct_power_of_prime_factor(16384))\nprint(count_distinct_power_of_prime_factor(32768))\nprint(count_distinct_power_of_prime_factor(65536))\nprint(count_distinct_power_of_prime_factor(131072))\nprint(count_distinct_power_of_prime_factor(262144))\nprint(count_distinct_power_of_prime_factor(524288))\nprint(count_distinct_power_of_prime_factor(104857", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_distinct_power_of_prime_factor(12))\nprint(count_distinct_power_of_prime_factor(15))\nprint(count_distinct_power_of_prime_factor(16))\nprint(count_distinct_power_of_prime_factor(24))\nprint(count_distinct_power_of_prime_factor(32))\nprint(count_distinct_power_of_prime_factor(64))\nprint(count_distinct_power_of_prime_factor(128))\nprint(count_distinct_power_of_prime_factor(256))\nprint(count_distinct_power_of_prime_factor(512))\nprint(count_distinct_power_of_prime_factor(1024))\nprint(count_distinct_power_of_prime_factor(2048))\nprint(count_distinct_power_of_prime_factor(4096))\nprint(count_distinct_power_of_prime_factor(8192))\nprint(count_distinct_power_of_prime_factor(16384))\nprint(count_distinct_power_of_prime_factor(32768))\nprint(count_distinct_power_of_prime_factor(65536))\nprint(count_distinct_power_of_prime_factor(131072))\nprint(count_distinct_power_of_prime_factor(262144))\nprint(count_distinct_power_of_prime_factor(524288))\nprint(count_distinct_power_of_prime_factor(104857"}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\treturn tuple(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a list.\n\"\"\"\ndef str_to_list(test_str):\n\treturn list(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a set.\n\"\"\"\ndef str_to_set(test_str):\n\treturn set(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a dictionary.\n\"\"\"\ndef str_to_dict(test_str):\n\treturn dict(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a frozenset.\n\"\"\"\ndef str_to_frozenset(test_str):\n\treturn frozenset(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a deque.\n\"\"\"\ndef str_to_deque(test_str):\n\tfrom collections import deque\n\treturn deque(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a bytearray.\n\"\"\"\ndef str_to_bytearray(test_str):\n\treturn bytearray(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a bytes.\n\"\"\"\ndef str_to_bytes(test_str):\n\treturn bytes(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a complex number.\n\"\"\"\ndef str_to_complex(test_str):\n\treturn complex(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a decimal.\n\"\"\"\ndef str_to_decimal(test_str):\n\tfrom decimal import Decimal\n\treturn Decimal(int(i) for i in test_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a list.\n\"\"\"\ndef str_to_list(test_str):\n\treturn list(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a set.\n\"\"\"\ndef str_to_set(test_str):\n\treturn set(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a dictionary.\n\"\"\"\ndef str_to_dict(test_str):\n\treturn dict(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a frozenset.\n\"\"\"\ndef str_to_frozenset(test_str):\n\treturn frozenset(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a deque.\n\"\"\"\ndef str_to_deque(test_str):\n\tfrom collections import deque\n\treturn deque(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a bytearray.\n\"\"\"\ndef str_to_bytearray(test_str):\n\treturn bytearray(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a bytes.\n\"\"\"\ndef str_to_bytes(test_str):\n\treturn bytes(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a complex number.\n\"\"\"\ndef str_to_complex(test_str):\n\treturn complex(int(i) for i in test_str.split())\n\n\"\"\"\nWrite a function to convert the given string of integers into a decimal.\n\"\"\""}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list in reverse order.\n\"\"\"\ndef alternate_elements_reverse(list1):\n\treturn list1[::-2]\n\n\"\"\"\nWrite a function to create a list of tuples from given list where tuple contains all duplicates elements in a sublist.\n\"\"\"\ndef duplicate_elements(list1):\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] in list1[i+1:]:\n\t\t\tlist2.append((list1[i], list1[i+1:].index(list1[i])+i+1))\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K.\n\"\"\"\ndef sublist_length(list1, k):\n\tlist2 = []\n\tfor i in range(0, len(list1), k):\n\t\tlist2.append(list1[i:i+k])\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K in reverse order.\n\"\"\"\ndef sublist_length_reverse(list1, k):\n\tlist2 = []\n\tfor i in range(len(list1)-k, -1, -k):\n\t\tlist2.append(list1[i:i+k])\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K and sublist elements are in reverse order.\n\"\"\"\ndef sublist_length_reverse_elements(list1, k):\n\tlist2 = []\n\tfor i in range(len(list1)-k, -1, -k):\n\t\tlist2.append(list1[i:i+k][::-1])\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K and sublist elements are in reverse order.\n\"\"\"\ndef sublist_length_reverse_elements(list1, k):\n\tlist2 = []\n\tfor i in range(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tlist2.append((list1[i], list1[i+1:].index(list1[i])+i+1))\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K.\n\"\"\"\ndef sublist_length(list1, k):\n\tlist2 = []\n\tfor i in range(0, len(list1), k):\n\t\tlist2.append(list1[i:i+k])\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K in reverse order.\n\"\"\"\ndef sublist_length_reverse(list1, k):\n\tlist2 = []\n\tfor i in range(len(list1)-k, -1, -k):\n\t\tlist2.append(list1[i:i+k])\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K and sublist elements are in reverse order.\n\"\"\"\ndef sublist_length_reverse_elements(list1, k):\n\tlist2 = []\n\tfor i in range(len(list1)-k, -1, -k):\n\t\tlist2.append(list1[i:i+k][::-1])\n\treturn list2\n\n\"\"\"\nWrite a function to create a list of lists from given list where sublist length is K and sublist elements are in reverse order."}
{"ID": 118, "source": "MBPP:719", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a*b*\"\n\treturn re.match(pattern, text)\n"}
{"ID": 123, "source": "MBPP:724", "prompt": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n\treturn sum([int(digit) for digit in str(base ** power)])\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\"\"\"\ndef reverse_string(string):\n\treturn string[::-1]\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers at even indices.\n\"\"\"\ndef sum_even_indices(numbers):\n\treturn sum([numbers[i] for i in range(0, len(numbers), 2)])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers at odd indices.\n\"\"\"\ndef sum_odd_indices(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers), 2)])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are greater than the previous number.\n\"\"\"\ndef sum_greater_than_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] > numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are greater than the previous number.\n\"\"\"\ndef sum_less_than_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] < numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are equal to the previous number.\n\"\"\"\ndef sum_equal_to_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] == numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are different from the previous number.\n\"\"\"\ndef sum_different_from_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] != numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers at odd indices.\n\"\"\"\ndef sum_odd_indices(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers), 2)])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are greater than the previous number.\n\"\"\"\ndef sum_greater_than_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] > numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are greater than the previous number.\n\"\"\"\ndef sum_less_than_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] < numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are equal to the previous number.\n\"\"\"\ndef sum_equal_to_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] == numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that are different from the previous number.\n\"\"\"\ndef sum_different_from_previous(numbers):\n\treturn sum([numbers[i] for i in range(1, len(numbers)) if numbers[i] != numbers[i-1]])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers that"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):"}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and add function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(add,nums1,nums2))\n\ndef add(x,y):\n\treturn x+y\n\n\"\"\"\nWrite a function to add two lists using map and reduce function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and filter function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and sorted function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and any function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and all function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and enumerate function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and zip function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def add_list(nums1,nums2):\n\treturn list(map(add,nums1,nums2))\n\ndef add(x,y):\n\treturn x+y\n\n\"\"\"\nWrite a function to add two lists using map and reduce function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and filter function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and sorted function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and any function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and all function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and enumerate function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add two lists using map and zip function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n\"\"\"\nWrite a function to add"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] >= x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] > x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted order.\n\"\"\"\ndef insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] >= x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted order.\n\"\"\"\ndef insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] > x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted order.\n\"\"\"\ndef insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] >= x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"\ndef right_insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] > x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted order.\n\"\"\"\ndef insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] >= x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted order.\n\"\"\"\ndef insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] > x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted order.\n\"\"\"\ndef insertion(a, x):\n\tlow = 0\n\thigh = len(a)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] >= x:\n\t\t\thigh = mid\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn low\n\n\"\"\"\nWrite a function to locate the insertion point for a specified value in sorted"}
{"ID": 138, "source": "MBPP:739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\n\"\"\"\ndef find_Index(n): \n\treturn int((n * (n + 1)) / 2)\n\nprint(find_Index(3))\nprint(find_Index(5))\nprint(find_Index(10))\nprint(find_Index(100))\nprint(find_Index(1000))\nprint(find_Index(10000))\nprint(find_Index(100000))\nprint(find_Index(1000000))\nprint(find_Index(10000000))\nprint(find_Index(100000000))\nprint(find_Index(1000000000))\nprint(find_Index(10000000000))\nprint(find_Index(100000000000))\nprint(find_Index(1000000000000))\nprint(find_Index(10000000000000))\nprint(find_Index(100000000000000))\nprint(find_Index(1000000000000000))\nprint(find_Index(10000000000000000))\nprint(find_Index(100000000000000000))\nprint(find_Index(1000000000000000000))\nprint(find_Index(10000000000000000000))\nprint(find_Index(100000000000000000000))\nprint(find_Index(1000000000000000000000))\nprint(find_Index(10000000000000000000000))\nprint(find_Index(10000000000000000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_Index(3))\nprint(find_Index(5))\nprint(find_Index(10))\nprint(find_Index(100))\nprint(find_Index(1000))\nprint(find_Index(10000))\nprint(find_Index(100000))\nprint(find_Index(1000000))\nprint(find_Index(10000000))\nprint(find_Index(100000000))\nprint(find_Index(1000000000))\nprint(find_Index(10000000000))\nprint(find_Index(100000000000))\nprint(find_Index(1000000000000))\nprint(find_Index(10000000000000))\nprint(find_Index(100000000000000))\nprint(find_Index(1000000000000000))\nprint(find_Index(10000000000000000))\nprint(find_Index(100000000000000000))\nprint(find_Index(1000000000000000000))\nprint(find_Index(10000000000000000000))\nprint(find_Index(100000000000000000000))\nprint(find_Index(1000000000000000000000))\nprint(find_Index(10000000000000000000000))\nprint(find_Index(10000000000000000000"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\nprint(all_Characters_Same(\"a\"))\nprint(all_Characters_Same(\"aa\"))\nprint(all_Characters_Same(\"ab\"))\nprint(all_Characters_Same(\"abc\"))\nprint(all_Characters_Same(\"aab\"))\nprint(all_Characters_Same(\"aabb\"))\nprint(all_Characters_Same(\"aabbc\"))\nprint(all_Characters_Same(\"aabbcc\"))\nprint(all_Characters_Same(\"aabbccd\"))\nprint(all_Characters_Same(\"aabbccde\"))\nprint(all_Characters_Same(\"aabbccdef\"))\nprint(all_Characters_Same(\"aabbccdefg\"))\nprint(all_Characters_Same(\"aabbccdefgh\"))\nprint(all_Characters_Same(\"aabbccdefghi\"))\nprint(all_Characters_Same(\"aabbccdefghij\"))\nprint(all_Characters_Same(\"aabbccdefghijk\"))\nprint(all_Characters_Same(\"aabbccdefghijkl\"))\nprint(all_Characters_Same(\"aabbccdefghijklm\"))\nprint(all_Characters_Same(\"aabbccdefghijklmn\"))\nprint(all_Characters_Same(\"aabbccdefghijklmno\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnop\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopq\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqr\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrs\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrst\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrstu\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrstuv\"))\nprint(all_Characters_Same(\"a", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(all_Characters_Same(\"a\"))\nprint(all_Characters_Same(\"aa\"))\nprint(all_Characters_Same(\"ab\"))\nprint(all_Characters_Same(\"abc\"))\nprint(all_Characters_Same(\"aab\"))\nprint(all_Characters_Same(\"aabb\"))\nprint(all_Characters_Same(\"aabbc\"))\nprint(all_Characters_Same(\"aabbcc\"))\nprint(all_Characters_Same(\"aabbccd\"))\nprint(all_Characters_Same(\"aabbccde\"))\nprint(all_Characters_Same(\"aabbccdef\"))\nprint(all_Characters_Same(\"aabbccdefg\"))\nprint(all_Characters_Same(\"aabbccdefgh\"))\nprint(all_Characters_Same(\"aabbccdefghi\"))\nprint(all_Characters_Same(\"aabbccdefghij\"))\nprint(all_Characters_Same(\"aabbccdefghijk\"))\nprint(all_Characters_Same(\"aabbccdefghijkl\"))\nprint(all_Characters_Same(\"aabbccdefghijklm\"))\nprint(all_Characters_Same(\"aabbccdefghijklmn\"))\nprint(all_Characters_Same(\"aabbccdefghijklmno\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnop\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopq\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqr\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrs\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrst\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrstu\"))\nprint(all_Characters_Same(\"aabbccdefghijklmnopqrstuv\"))\nprint(all_Characters_Same(\"a"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\timport re\n\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\nprint(capital_words_spaces(\"HelloWorld\"))\nprint(capital_words_spaces(\"Hello World\"))\nprint(capital_words_spaces(\"HelloWorld World\"))\nprint(capital_words_spaces(\"HelloWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorld World World\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld\"))\nprint(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(capital_words_spaces(\"HelloWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorldWorld"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "<s> \"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\tindex_list = []\n\tfor i in range(len(l1)):\n\t\tif l1[i] in l2 and l1[i] in l3:\n\t\t\tindex_list.append(l1[i])\n\treturn index_list\n\n\nif __name__ == '__main__':\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "if __name__ == '__main__':\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5]\n\tl3 = [1, 2, 3, 4, 5]\n\tprint(extract_index_list(l1, l2, l3))\n\n\tl1 = [1, 2, 3, 4, 5]\n\tl2 = [1, 2, 3, 4, 5"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\timport re\n\tpattern = re.compile(r'ab?')\n\tif pattern.search(text):\n\t\treturn True\n\telse:\n\t\treturn False\n\n#print(text_match_zero_one('ab'))\n#print(text_match_zero_one('a'))\n#print(text_match_zero_one('ac'))\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by any number of 'b's.\n\"\"\"\ndef text_match_any_number(text):\n\timport re\n\tpattern = re.compile(r'ab*')\n\tif pattern.search(text):\n\t\treturn True\n\telse:\n\t\treturn False\n\n#print(text_match_any_number('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "#print(text_match_any_number('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"ID": 156, "source": "MBPP:757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n\tcount = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j][::-1]:\n\t\t\t\tcount += 1\n\treturn count\n\ntest_list = [\"abc\", \"bcd\", \"cde\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn count\n\ntest_list = [\"abc\", \"bcd\", \"cde\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\"]\nprint(count_reverse_pairs(test_list))\n\ntest_list = [\"abc\", \"bcd\", \"cde\", \"def\", \"fgh\", \"ghi\", \"hij"}
{"ID": 157, "source": "MBPP:758", "prompt": "\"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list)\n\nprint(unique_sublists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(unique_sublists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1"}
{"ID": 158, "source": "MBPP:759", "prompt": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n\treturn num % 1 == 0\n\nprint(is_decimal(1.23))\nprint(is_decimal(1.234))\nprint(is_decimal(1.2345))\nprint(is_decimal(1.23456))\nprint(is_decimal(1.234567))\nprint(is_decimal(1.2345678))\nprint(is_decimal(1.23456789))\nprint(is_decimal(1.234567890))\nprint(is_decimal(1.2345678901))\nprint(is_decimal(1.23456789012))\nprint(is_decimal(1.234567890123))\nprint(is_decimal(1.2345678901234))\nprint(is_decimal(1.23456789012345))\nprint(is_decimal(1.234567890123456))\nprint(is_decimal(1.2345678901234567))\nprint(is_decimal(1.23456789012345678))\nprint(is_decimal(1.234567890123456789))\nprint(is_decimal(1.2345678901234567890))\nprint(is_decimal(1.23456789012345678901))\nprint(is_decimal(1.234567890123456789012))\nprint(is_decimal(1.2345678901234567890123))\nprint(is_decimal(1.2345678901", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_decimal(1.23))\nprint(is_decimal(1.234))\nprint(is_decimal(1.2345))\nprint(is_decimal(1.23456))\nprint(is_decimal(1.234567))\nprint(is_decimal(1.2345678))\nprint(is_decimal(1.23456789))\nprint(is_decimal(1.234567890))\nprint(is_decimal(1.2345678901))\nprint(is_decimal(1.23456789012))\nprint(is_decimal(1.234567890123))\nprint(is_decimal(1.2345678901234))\nprint(is_decimal(1.23456789012345))\nprint(is_decimal(1.234567890123456))\nprint(is_decimal(1.2345678901234567))\nprint(is_decimal(1.23456789012345678))\nprint(is_decimal(1.234567890123456789))\nprint(is_decimal(1.2345678901234567890))\nprint(is_decimal(1.23456789012345678901))\nprint(is_decimal(1.234567890123456789012))\nprint(is_decimal(1.2345678901234567890123))\nprint(is_decimal(1.2345678901"}
{"ID": 165, "source": "MBPP:766", "prompt": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\t", "predict": "<s> \"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n\tfor i in range(len(l1)-1):\n\t\tyield l1[i], l1[i+1]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns a list that contains only the prime numbers\n\"\"\"\ndef prime_numbers(l1):\n\tprime_list = []\n\tfor i in l1:\n\t\tif i > 1:\n\t\t\tfor j in range(2, i):\n\t\t\t\tif i % j == 0:\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprime_list.append(i)\n\treturn prime_list\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the minimum number in that list.\n\"\"\"\ndef min_num(l1):\n\treturn min(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the maximum number in that list.\n\"\"\"\ndef max_num(l1):\n\treturn max(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of all numbers in that list.\n\"\"\"\ndef sum_num(l1):\n\treturn sum(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the average of all numbers in that list.\n\"\"\"\ndef avg_num(l1):\n\treturn sum(l1)/len(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the median of all numbers in that list.\n\"\"\"\ndef median_num(l1):\n\tl1.sort()\n\tif len(l1) % 2 == 0:\n\t\treturn (l1[len(l1)//2] + l1[len(l1)//2 - 1])/2\n\telse:\n\t\treturn l1[len(l1)//2]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the mode of all numbers in that list.\n\"\"\"\ndef mode_num(l1):\n\treturn max(set(l1), key=l1.count)\n\n\n\"\"\"\nWrite a function that takes", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the minimum number in that list.\n\"\"\"\ndef min_num(l1):\n\treturn min(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the maximum number in that list.\n\"\"\"\ndef max_num(l1):\n\treturn max(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of all numbers in that list.\n\"\"\"\ndef sum_num(l1):\n\treturn sum(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the average of all numbers in that list.\n\"\"\"\ndef avg_num(l1):\n\treturn sum(l1)/len(l1)\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the median of all numbers in that list.\n\"\"\"\ndef median_num(l1):\n\tl1.sort()\n\tif len(l1) % 2 == 0:\n\t\treturn (l1[len(l1)//2] + l1[len(l1)//2 - 1])/2\n\telse:\n\t\treturn l1[len(l1)//2]\n\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the mode of all numbers in that list.\n\"\"\"\ndef mode_num(l1):"}
{"ID": 167, "source": "MBPP:768", "prompt": "\"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x): \n\treturn bin(x).count('1') % 2 == 1\n\nprint(check_Odd_Parity(15))\nprint(check_Odd_Parity(16))\nprint(check_Odd_Parity(17))\nprint(check_Odd_Parity(18))\nprint(check_Odd_Parity(19))\nprint(check_Odd_Parity(20))\nprint(check_Odd_Parity(21))\nprint(check_Odd_Parity(22))\nprint(check_Odd_Parity(23))\nprint(check_Odd_Parity(24))\nprint(check_Odd_Parity(25))\nprint(check_Odd_Parity(26))\nprint(check_Odd_Parity(27))\nprint(check_Odd_Parity(28))\nprint(check_Odd_Parity(29))\nprint(check_Odd_Parity(30))\nprint(check_Odd_Parity(31))\nprint(check_Odd_Parity(32))\nprint(check_Odd_Parity(33))\nprint(check_Odd_Parity(34))\nprint(check_Odd_Parity(35))\nprint(check_Odd_Parity(36))\nprint(check_Odd_Parity(37))\nprint(check_Odd_Parity(38))\nprint(check_Odd_Parity(39))\nprint(check_Odd_Parity(40))\nprint(check_Odd_Parity(41))\nprint(check_Odd_Parity(42))\nprint(check_Odd_Parity(43))\nprint(check_Odd_Parity(44))\nprint(check_Odd_Parity(45))\nprint(check_Odd_Parity(46))\nprint(check_Odd_Parity(47))\nprint(check_Odd_Parity(48))\nprint(check_Odd_Parity(49))\nprint(check_O", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Odd_Parity(15))\nprint(check_Odd_Parity(16))\nprint(check_Odd_Parity(17))\nprint(check_Odd_Parity(18))\nprint(check_Odd_Parity(19))\nprint(check_Odd_Parity(20))\nprint(check_Odd_Parity(21))\nprint(check_Odd_Parity(22))\nprint(check_Odd_Parity(23))\nprint(check_Odd_Parity(24))\nprint(check_Odd_Parity(25))\nprint(check_Odd_Parity(26))\nprint(check_Odd_Parity(27))\nprint(check_Odd_Parity(28))\nprint(check_Odd_Parity(29))\nprint(check_Odd_Parity(30))\nprint(check_Odd_Parity(31))\nprint(check_Odd_Parity(32))\nprint(check_Odd_Parity(33))\nprint(check_Odd_Parity(34))\nprint(check_Odd_Parity(35))\nprint(check_Odd_Parity(36))\nprint(check_Odd_Parity(37))\nprint(check_Odd_Parity(38))\nprint(check_Odd_Parity(39))\nprint(check_Odd_Parity(40))\nprint(check_Odd_Parity(41))\nprint(check_Odd_Parity(42))\nprint(check_Odd_Parity(43))\nprint(check_Odd_Parity(44))\nprint(check_Odd_Parity(45))\nprint(check_Odd_Parity(46))\nprint(check_Odd_Parity(47))\nprint(check_Odd_Parity(48))\nprint(check_Odd_Parity(49))\nprint(check_O"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\tstack = []\n\tfor char in exp:\n\t\tif char in ['(', '{', '[']:\n\t\t\tstack.append(char)\n\t\telif char in [')', '}', ']']:\n\t\t\tif not stack:\n\t\t\t\treturn False\n\t\t\ttop = stack.pop()\n\t\t\tif char == ')' and top != '(':\n\t\t\t\treturn False\n\t\t\telif char == '}' and top != '{':\n\t\t\t\treturn False\n\t\t\telif char == ']' and top != '[':\n\t\t\t\treturn False\n\treturn not stack\n\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_expression(\"(a + b) * (c + d)\"))\nprint(check_"}
{"ID": 172, "source": "MBPP:773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\n\"\"\"\ndef occurance_substring(text,pattern):\n\toccurance = 0\n\tposition = []\n\tfor i in range(len(text)):\n\t\tif text[i:i+len(pattern)] == pattern:\n\t\t\toccurance += 1\n\t\t\tposition.append(i)\n\treturn occurance,position\n\nprint(occurance_substring(\"banana\",\"na\"))\nprint(occurance_substring(\"banana\",\"an\"))\nprint(occurance_substring(\"banana\",\"a\"))\nprint(occurance_substring(\"banana\",\"b\"))\nprint(occurance_substring(\"banana\",\"n\"))\nprint(occurance_substring(\"banana\",\"ba\"))\nprint(occurance_substring(\"banana\",\"anan\"))\nprint(occurance_substring(\"banana\",\"ban\"))\nprint(occurance_substring(\"banana\",\"anana\"))\nprint(occurance_substring(\"banana\",\"banana\"))\nprint(occurance_substring(\"banana\",\"banan\"))\nprint(occurance_substring(\"banana\",\"ananan\"))\nprint(occurance_substring(\"banana\",\"bananan\"))\nprint(occurance_substring(\"banana\",\"ananana\"))\nprint(occurance_substring(\"banana\",\"bananana\"))\nprint(occurance_substring(\"banana\",\"anananan\"))\nprint(occurance_substring(\"banana\",\"banananan\"))\nprint(occurance_substring(\"banana\",\"anananana\"))\nprint(occurance_substring(\"banana\",\"banananana\"))\nprint(occurance_substring(\"banana\",\"ananananan\"))\nprint(occurance_substring(\"banana\",\"bananananan\"))\nprint(occurance_substring(\"banana\",\"ananananana\"))\nprint(occurance_substring(\"banana\",\"bananananana\"))\nprint(occurance_substring(\"banana\",\"anananananan\"))\nprint(occurance_substring(\"banana\",\"banananananan\"))\nprint(occurance_substring(\"banana\",\"anananananana\"))\nprint(occurance_substring(\"banana\",\"banananananana\"))\nprint(occurance_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(occurance_substring(\"banana\",\"na\"))\nprint(occurance_substring(\"banana\",\"an\"))\nprint(occurance_substring(\"banana\",\"a\"))\nprint(occurance_substring(\"banana\",\"b\"))\nprint(occurance_substring(\"banana\",\"n\"))\nprint(occurance_substring(\"banana\",\"ba\"))\nprint(occurance_substring(\"banana\",\"anan\"))\nprint(occurance_substring(\"banana\",\"ban\"))\nprint(occurance_substring(\"banana\",\"anana\"))\nprint(occurance_substring(\"banana\",\"banana\"))\nprint(occurance_substring(\"banana\",\"banan\"))\nprint(occurance_substring(\"banana\",\"ananan\"))\nprint(occurance_substring(\"banana\",\"bananan\"))\nprint(occurance_substring(\"banana\",\"ananana\"))\nprint(occurance_substring(\"banana\",\"bananana\"))\nprint(occurance_substring(\"banana\",\"anananan\"))\nprint(occurance_substring(\"banana\",\"banananan\"))\nprint(occurance_substring(\"banana\",\"anananana\"))\nprint(occurance_substring(\"banana\",\"banananana\"))\nprint(occurance_substring(\"banana\",\"ananananan\"))\nprint(occurance_substring(\"banana\",\"bananananan\"))\nprint(occurance_substring(\"banana\",\"ananananana\"))\nprint(occurance_substring(\"banana\",\"bananananana\"))\nprint(occurance_substring(\"banana\",\"anananananan\"))\nprint(occurance_substring(\"banana\",\"banananananan\"))\nprint(occurance_substring(\"banana\",\"anananananana\"))\nprint(occurance_substring(\"banana\",\"banananananana\"))\nprint(occurance_"}
{"ID": 175, "source": "MBPP:776", "prompt": "\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n\tcount = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i] in 'aeiou':\n\t\t\tif i > 0 and test_str[i-1] in 'aeiou':\n\t\t\t\tcount += 1\n\t\t\telif i < len(test_str) - 1 and test_str[i+1] in 'aeiou':\n\t\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels('hello'))\nprint(count_vowels('aeiou'))\nprint(count_vowels('aeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_vowels('hello'))\nprint(count_vowels('aeiou'))\nprint(count_vowels('aeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint(count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))\nprint("}
{"ID": 178, "source": "MBPP:779", "prompt": "\"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn len(unique_list)\n\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3"}
{"ID": 184, "source": "MBPP:785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n\treturn tuple(map(int, test_str[1:-1].split(',')))\n\n\nif __name__ == '__main__':\n\tprint(tuple_str_int(\"(1, 2, 3)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(tuple_str_int(\"(1, 2, 3)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\"))\n\tprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r'abbb'\n\tresult = re.search(pattern, text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by three 'b's.\n\"\"\"\ndef text_match_three(text):\n\timport re"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\nimport math\ndef area_circle(r):\n\treturn math.pi*r**2\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*math.pi*r**3\n\n\"\"\"\nWrite a function to calculate the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to calculate the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,h):\n\treturn ((a+b)/2)*h\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a pentagon.\n\"\"\"\ndef area_pentagon(s,a):\n\treturn (5*s*s)/(4*math.tan(math.pi/5))\n\n\"\"\"\nWrite a function to calculate the area of a hexagon.\n\"\"\"\ndef area_hexagon(s,a):\n\treturn (6*s*s)/(2*math.tan(math.pi/6))\n\n\"\"\"\nWrite a function to calculate the area of a heptagon.\n\"\"\"\ndef area_heptagon(s,a):\n\treturn (7*", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn s*l\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\nimport math\ndef area_circle(r):\n\treturn math.pi*r**2\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*math.pi*r**3\n\n\"\"\"\nWrite a function to calculate the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to calculate the volume of a rectangular prism.\n\"\"\"\ndef volume_prism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,h):\n\treturn ((a+b)/2)*h\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a pentagon.\n\"\"\"\ndef area_pentagon(s,a):\n\treturn (5*s*s)/(4*math.tan(math.pi/5))\n\n\"\"\"\nWrite a function to calculate the area of a hexagon.\n\"\"\"\ndef area_hexagon(s,a):\n\treturn (6*s*s)/(2*math.tan(math.pi/6))\n\n\"\"\"\nWrite a function to calculate the area of a heptagon.\n\"\"\""}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\treturn len(input_list)\n\nprint(count_list([1,2,3,4,5]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_list([1,2,3,4,5]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(count_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a.*b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least one character in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a.+b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a.{3,}b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between, with no 'c' in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a[^c]{3,}b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between, with no 'c' in between, with at least one digit in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a[^c]*\\d+[^c]*b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between, with no 'c' in between, with at least one digit in between, with no 'd' after.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a[^c]*\\d+[^c]*b(?!d)\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least one character in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a.+b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a.{3,}b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between, with no 'c' in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a[^c]{3,}b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between, with no 'c' in between, with at least one digit in between.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a[^c]*\\d+[^c]*b\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b', with at least 3 characters in between, with no 'c' in between, with at least one digit in between, with no 'd' after.\n\"\"\"\ndef text_starta_endb(text):\n\timport re\n\tpattern = r\"a[^c]*\\d+[^c]*b(?!d)\"\n\tresult = re.match(pattern, text)\n\treturn result\n\n\"\"\""}
{"ID": 194, "source": "MBPP:795", "prompt": "\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef cheap_items(items,n):\n\tif n > len(items):\n\t\treturn None\n\theap = []\n\tfor item in items:\n\t\tif len(heap) < n:\n\t\t\theapq.heappush(heap,item)\n\t\telse:\n\t\t\theapq.heappushpop(heap,item)\n\treturn heap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\tcount = 0\n\tif x == y:\n\t\tcount += 1\n\tif y == z:\n\t\tcount += 1\n\tif x == z:\n\t\tcount += 1\n\treturn count\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(test_three_equal(1,2,3))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2,1))\nprint(test_three_equal(2,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(2,1,1))\nprint(test_three_equal(1,2,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(2,2,2))\nprint(test_three_equal(2,2"}
{"ID": 201, "source": "MBPP:802", "prompt": "\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr,n):   \n\tfor i in range(1,n):\n\t\tif arr[i] < arr[i-1]:\n\t\t\treturn i\n\treturn 0\n\nprint(count_Rotation([64,25,12,22,11],5))\nprint(count_Rotation([1,2,3,4,5],5))\nprint(count_Rotation([1,2,3,4,5,6],6))\nprint(count_Rotation([1,2,3,4,5,6,7],7))\nprint(count_Rotation([1,2,3,4,5,6,7,8],8))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9],9))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10],10))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11],11))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12],12))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13],13))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14],14))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],15))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],16))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Rotation([64,25,12,22,11],5))\nprint(count_Rotation([1,2,3,4,5],5))\nprint(count_Rotation([1,2,3,4,5,6],6))\nprint(count_Rotation([1,2,3,4,5,6,7],7))\nprint(count_Rotation([1,2,3,4,5,6,7,8],8))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9],9))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10],10))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11],11))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12],12))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13],13))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14],14))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],15))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],16))\nprint(count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\treturn n**0.5 == int(n**0.5)\n\nprint(is_Perfect_Square(16))\nprint(is_Perfect_Square(21))\nprint(is_Perfect_Square(25))\nprint(is_Perfect_Square(36))\nprint(is_Perfect_Square(49))\nprint(is_Perfect_Square(64))\nprint(is_Perfect_Square(81))\nprint(is_Perfect_Square(100))\nprint(is_Perfect_Square(121))\nprint(is_Perfect_Square(144))\nprint(is_Perfect_Square(169))\nprint(is_Perfect_Square(196))\nprint(is_Perfect_Square(225))\nprint(is_Perfect_Square(256))\nprint(is_Perfect_Square(289))\nprint(is_Perfect_Square(324))\nprint(is_Perfect_Square(361))\nprint(is_Perfect_Square(400))\nprint(is_Perfect_Square(441))\nprint(is_Perfect_Square(484))\nprint(is_Perfect_Square(529))\nprint(is_Perfect_Square(576))\nprint(is_Perfect_Square(625))\nprint(is_Perfect_Square(676))\nprint(is_Perfect_Square(729))\nprint(is_Perfect_Square(784))\nprint(is_Perfect_Square(841))\nprint(is_Perfect_Square(900))\nprint(is_Perfect_Square(961))\nprint(is_Perfect_Square(1024))\nprint(is_Perfect_Square(1089))\nprint(is_Perfect_Square(1156))\nprint(is_Perfect_Square(1225))\nprint(is", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Perfect_Square(16))\nprint(is_Perfect_Square(21))\nprint(is_Perfect_Square(25))\nprint(is_Perfect_Square(36))\nprint(is_Perfect_Square(49))\nprint(is_Perfect_Square(64))\nprint(is_Perfect_Square(81))\nprint(is_Perfect_Square(100))\nprint(is_Perfect_Square(121))\nprint(is_Perfect_Square(144))\nprint(is_Perfect_Square(169))\nprint(is_Perfect_Square(196))\nprint(is_Perfect_Square(225))\nprint(is_Perfect_Square(256))\nprint(is_Perfect_Square(289))\nprint(is_Perfect_Square(324))\nprint(is_Perfect_Square(361))\nprint(is_Perfect_Square(400))\nprint(is_Perfect_Square(441))\nprint(is_Perfect_Square(484))\nprint(is_Perfect_Square(529))\nprint(is_Perfect_Square(576))\nprint(is_Perfect_Square(625))\nprint(is_Perfect_Square(676))\nprint(is_Perfect_Square(729))\nprint(is_Perfect_Square(784))\nprint(is_Perfect_Square(841))\nprint(is_Perfect_Square(900))\nprint(is_Perfect_Square(961))\nprint(is_Perfect_Square(1024))\nprint(is_Perfect_Square(1089))\nprint(is_Perfect_Square(1156))\nprint(is_Perfect_Square(1225))\nprint(is"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\tmax_sum = 0\n\tmax_list = []\n\tfor l in lists:\n\t\tsum = 0\n\t\tfor e in l:\n\t\t\tsum += e\n\t\tif sum > max_sum:\n\t\t\tmax_sum = sum\n\t\t\tmax_list = l\n\treturn max_list\n\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_sum_list([[1,2,3],[4,5,6],[7,8,9]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27]]))\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,"}
{"ID": 205, "source": "MBPP:806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n\tmax_run = 0\n\tcurrent_run = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i].isupper():\n\t\t\tcurrent_run += 1\n\t\telse:\n\t\t\tcurrent_run = 0\n\t\tmax_run = max(max_run, current_run)\n\treturn max_run\n\nprint(max_run_uppercase(\"Hello World\"))\nprint(max_run_uppercase(\"HELLO WORLD\"))\nprint(max_run_uppercase(\"HELLOWORLD\"))\nprint(max_run_uppercase(\"hELLOWORLD\"))\nprint(max_run_uppercase(\"hELLOWORLD!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_run_uppercase(\"Hello World\"))\nprint(max_run_uppercase(\"HELLO WORLD\"))\nprint(max_run_uppercase(\"HELLOWORLD\"))\nprint(max_run_uppercase(\"hELLOWORLD\"))\nprint(max_run_uppercase(\"hELLOWORLD!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))\nprint(max_run_uppercase(\"hELLOWORLD!!!\"))"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "<s> \"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\treturn street.replace('road', 'rd.')\n\nprint(road_rd('road'))\nprint(road_rd('road road road'))\nprint(road_rd('road road road road'))\nprint(road_rd('road road road road road'))\nprint(road_rd('road road road road road road'))\nprint(road_rd('road road road road road road road'))\nprint(road_rd('road road road road road road road road'))\nprint(road_rd('road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(road_rd('road'))\nprint(road_rd('road road road'))\nprint(road_rd('road road road road'))\nprint(road_rd('road road road road road'))\nprint(road_rd('road road road road road road'))\nprint(road_rd('road road road road road road road'))\nprint(road_rd('road road road road road road road road'))\nprint(road_rd('road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road road road road road road road road road road road road road road'))\nprint(road_rd('road road road road road road road road road road road"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\treturn len(str1)\n\n\"\"\"\nWrite a function to find the string is palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\n\"\"\"\nWrite a function to find the string is anagram or not.\n\"\"\"\ndef anagram(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\"\"\"\nWrite a function to find the string is strong or not.\n\"\"\"\ndef strong(str1):\n\treturn any(i.isdigit() for i in str1) and any(i.isalpha() for i in str1)\n\n\"\"\"\nWrite a function to check string is empty or not.\n\"\"\"\ndef empty(str1):\n\treturn str1 and True or False\n\n\"\"\"\nWrite a function to check string is starts with specified string.\n\"\"\"\ndef starts_with(str1, str2):\n\treturn str1.startswith(str2)\n\n\"\"\"\nWrite a function to check string is ends with specified string.\n\"\"\"\ndef ends_with(str1, str2):\n\treturn str1.endswith(str2)\n\n\"\"\"\nWrite a function to check string contains with specified string.\n\"\"\"\ndef contains(str1, str2):\n\treturn str2 in str1\n\n\"\"\"\nWrite a function to check string is alpha or not.\n\"\"\"\ndef is_alpha(str1):\n\treturn str1.isalpha()\n\n\"\"\"\nWrite a function to check string is digit or not.\n\"\"\"\ndef is_digit(str1):\n\treturn str1.isdigit()\n\n\"\"\"\nWrite a function to check string is alphanumeric or not.\n\"\"\"\ndef is_alphanumeric(str1):\n\treturn str1.isalnum()\n\n\"\"\"\nWrite a function to check string is lower case or not.\n\"\"\"\ndef is_lower(str1):\n\treturn str1.islower()\n\n\"\"\"\nWrite a function to check string is upper case or not.\n\"\"\"\ndef is_upper(str1):\n\treturn str1.isupper()\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to check string is empty or not.\n\"\"\"\ndef empty(str1):\n\treturn str1 and True or False\n\n\"\"\"\nWrite a function to check string is starts with specified string.\n\"\"\"\ndef starts_with(str1, str2):\n\treturn str1.startswith(str2)\n\n\"\"\"\nWrite a function to check string is ends with specified string.\n\"\"\"\ndef ends_with(str1, str2):\n\treturn str1.endswith(str2)\n\n\"\"\"\nWrite a function to check string contains with specified string.\n\"\"\"\ndef contains(str1, str2):\n\treturn str2 in str1\n\n\"\"\"\nWrite a function to check string is alpha or not.\n\"\"\"\ndef is_alpha(str1):\n\treturn str1.isalpha()\n\n\"\"\"\nWrite a function to check string is digit or not.\n\"\"\"\ndef is_digit(str1):\n\treturn str1.isdigit()\n\n\"\"\"\nWrite a function to check string is alphanumeric or not.\n\"\"\"\ndef is_alphanumeric(str1):\n\treturn str1.isalnum()\n\n\"\"\"\nWrite a function to check string is lower case or not.\n\"\"\"\ndef is_lower(str1):\n\treturn str1.islower()\n\n\"\"\"\nWrite a function to check string is upper case or not.\n\"\"\"\ndef is_upper(str1):\n\treturn str1.isupper()"}
{"ID": 215, "source": "MBPP:816", "prompt": "\"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n\treturn tuple([]*len(test_tup))\n\n\"\"\"\nWrite a function to check if a given tuple is empty or not.\n\"\"\"\ndef is_empty_tuple(test_tup):\n\treturn len(test_tup) == 0\n\n\"\"\"\nWrite a function to check if a given tuple is sorted or not.\n\"\"\"\ndef is_sorted_tuple(test_tup):\n\treturn all(test_tup[i] <= test_tup[i+1] for i in range(len(test_tup)-1))\n\n\"\"\"\nWrite a function to check if a given tuple contains a given element or not.\n\"\"\"\ndef contains_tuple(test_tup, element):\n\treturn element in test_tup\n\n\"\"\"\nWrite a function to get the length of a given tuple.\n\"\"\"\ndef get_length_tuple(test_tup):\n\treturn len(test_tup)\n\n\"\"\"\nWrite a function to get the index of the first occurrence of a given element in a given tuple.\n\"\"\"\ndef get_index_tuple(test_tup, element):\n\treturn test_tup.index(element)\n\n\"\"\"\nWrite a function to get the count of the occurrences of a given element in a given tuple.\n\"\"\"\ndef get_count_tuple(test_tup, element):\n\treturn test_tup.count(element)\n\n\"\"\"\nWrite a function to get the maximum element from a given tuple.\n\"\"\"\ndef get_max_tuple(test_tup):\n\treturn max(test_tup)\n\n\"\"\"\nWrite a function to get the minimum element from a given tuple.\n\"\"\"\ndef get_min_tuple(test_tup):\n\treturn min(test_tup)\n\n\"\"\"\nWrite a function to get the sum of all the elements of a given tuple.\n\"\"\"\ndef get_sum_tuple(test_tup):\n\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to get the maximum element from a given tuple using recursion.\n\"\"\"\ndef get_max_recursive_tuple(test_tup):\n\tif len(test_t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to check if a given tuple contains a given element or not.\n\"\"\"\ndef contains_tuple(test_tup, element):\n\treturn element in test_tup\n\n\"\"\"\nWrite a function to get the length of a given tuple.\n\"\"\"\ndef get_length_tuple(test_tup):\n\treturn len(test_tup)\n\n\"\"\"\nWrite a function to get the index of the first occurrence of a given element in a given tuple.\n\"\"\"\ndef get_index_tuple(test_tup, element):\n\treturn test_tup.index(element)\n\n\"\"\"\nWrite a function to get the count of the occurrences of a given element in a given tuple.\n\"\"\"\ndef get_count_tuple(test_tup, element):\n\treturn test_tup.count(element)\n\n\"\"\"\nWrite a function to get the maximum element from a given tuple.\n\"\"\"\ndef get_max_tuple(test_tup):\n\treturn max(test_tup)\n\n\"\"\"\nWrite a function to get the minimum element from a given tuple.\n\"\"\"\ndef get_min_tuple(test_tup):\n\treturn min(test_tup)\n\n\"\"\"\nWrite a function to get the sum of all the elements of a given tuple.\n\"\"\"\ndef get_sum_tuple(test_tup):\n\treturn sum(test_tup)\n\n\"\"\"\nWrite a function to get the maximum element from a given tuple using recursion.\n\"\"\"\ndef get_max_recursive_tuple(test_tup):\n\tif len(test_t"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\treturn {**dict1,**dict2}\n\n#test\ndef test_merge_dictionaries(dict1,dict2,expected):\n\tassert merge_dictionaries(dict1,dict2) == expected\n\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"a\":3,\"d\":4},{\"a\":3,\"b\":2,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"a\":3,\"d\":4},{\"a\":3,\"b\":2,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3,\"d\":4})\ntest_merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"a\":1,\"b\":2,\"c\":3"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<s> \"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\tif len(p) < 8:\n\t\treturn False\n\tif not any(i.isdigit() for i in p):\n\t\treturn False\n\tif not any(i.isupper() for i in p):\n\t\treturn False\n\tif not any(i.islower() for i in p):\n\t\treturn False\n\tif not any(not i.isalnum() for i in p):\n\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the even indices.\n\"\"\"\ndef even_sum(numbers):\n\treturn sum(numbers[::2])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the \nnumbers at the odd indices.\n\"\"\"\ndef odd_sum(numbers):\n\treturn sum(numbers[1::2])\n\n\"\"\"\nWrite a function that takes a list"}
{"ID": 223, "source": "MBPP:824", "prompt": "\"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n\treturn [x for x in l if x%2!=0]\n\n\"\"\"\nWrite a python function to find the maximum value in a list.\n\"\"\"\ndef max_val(l):\n\treturn max(l)\n\n\"\"\"\nWrite a python function to find the minimum value in a list.\n\"\"\"\ndef min_val(l):\n\treturn min(l)\n\n\"\"\"\nWrite a python function to find the sum of all values in a list.\n\"\"\"\ndef sum_val(l):\n\treturn sum(l)\n\n\"\"\"\nWrite a python function to find the average of all values in a list.\n\"\"\"\ndef avg_val(l):\n\treturn sum(l)/len(l)\n\n\"\"\"\nWrite a python function to find the median of all values in a list.\n\"\"\"\ndef median_val(l):\n\tl.sort()\n\tif len(l)%2==0:\n\t\treturn (l[len(l)//2]+l[len(l)//2-1])/2\n\telse:\n\t\treturn l[len(l)//2]\n\n\"\"\"\nWrite a python function to find the mode of all values in a list.\n\"\"\"\ndef mode_val(l):\n\treturn max(set(l), key=l.count)\n\n\"\"\"\nWrite a python function to find the standard deviation of all values in a list.\n\"\"\"\nfrom math import sqrt\ndef std_dev(l):\n\tmean = sum(l)/len(l)\n\treturn sqrt(sum((x-mean)**2 for x in l)/len(l))\n\n\"\"\"\nWrite a python function to find the variance of all values in a list.\n\"\"\"\ndef variance(l):\n\tmean = sum(l)/len(l)\n\treturn sum((x-mean)**2 for x in l)/len(l)\n\n\"\"\"\nWrite a python function to find the frequency of each value in a list.\n\"\"\"\ndef freq(l):\n\treturn {x:l.count(x) for x in set(l)}\n\n\"\"\"\nWrite a python function to find the frequency of each value in a list in descending order", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to find the maximum value in a list.\n\"\"\"\ndef max_val(l):\n\treturn max(l)\n\n\"\"\"\nWrite a python function to find the minimum value in a list.\n\"\"\"\ndef min_val(l):\n\treturn min(l)\n\n\"\"\"\nWrite a python function to find the sum of all values in a list.\n\"\"\"\ndef sum_val(l):\n\treturn sum(l)\n\n\"\"\"\nWrite a python function to find the average of all values in a list.\n\"\"\"\ndef avg_val(l):\n\treturn sum(l)/len(l)\n\n\"\"\"\nWrite a python function to find the median of all values in a list.\n\"\"\"\ndef median_val(l):\n\tl.sort()\n\tif len(l)%2==0:\n\t\treturn (l[len(l)//2]+l[len(l)//2-1])/2\n\telse:\n\t\treturn l[len(l)//2]\n\n\"\"\"\nWrite a python function to find the mode of all values in a list.\n\"\"\"\ndef mode_val(l):\n\treturn max(set(l), key=l.count)"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "<s> \"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\treturn [nums[i] for i in list_index]\n\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(access_elements([1, 2, 3, 4, 5], [0, 1, 2]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(access_elements([1, 2, 3, 4, 5], [0, 1, 2"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the length of a string.\n\"\"\"\ndef length(str):\n\treturn len(str)\n\nprint(length(\"hello\"))\n\n\"\"\"\nWrite a python function to find the area of a triangle.\n\"\"\"\ndef area(base,height):\n\treturn (base*height)/2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the volume of a sphere.\n\"\"\"\ndef volume(radius):\n\treturn (4/3)*3.14*(radius**3)\n\nprint(volume(10))\n\n\"\"\"\nWrite a python function to find the area of a circle.\n\"\"\"\ndef area(radius):\n\treturn 3.14*(radius**2)\n\nprint(area(10))\n\n\"\"\"\nWrite a python function to find the area of a rectangle.\n\"\"\"\ndef area(length,breadth):\n\treturn length*breadth\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a triangle.\n\"\"\"\ndef area(base,height):\n\treturn (base*height)/2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a trapezoid.\n\"\"\"\ndef area(base1,base2,height):\n\treturn (base1+base2)*height/2\n\nprint(area(10,20,30))\n\n\"\"\"\nWrite a python function to find the area of a rhombus.\n\"\"\"\ndef area(diagonal1,diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a parallelogram.\n\"\"\"\ndef area(base,height):\n\treturn base*height\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a cube.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a python function to find the area of a triangle.\n\"\"\"\ndef area(base,height):\n\treturn (base*height)/2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the volume of a sphere.\n\"\"\"\ndef volume(radius):\n\treturn (4/3)*3.14*(radius**3)\n\nprint(volume(10))\n\n\"\"\"\nWrite a python function to find the area of a circle.\n\"\"\"\ndef area(radius):\n\treturn 3.14*(radius**2)\n\nprint(area(10))\n\n\"\"\"\nWrite a python function to find the area of a rectangle.\n\"\"\"\ndef area(length,breadth):\n\treturn length*breadth\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a triangle.\n\"\"\"\ndef area(base,height):\n\treturn (base*height)/2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a trapezoid.\n\"\"\"\ndef area(base1,base2,height):\n\treturn (base1+base2)*height/2\n\nprint(area(10,20,30))\n\n\"\"\"\nWrite a python function to find the area of a rhombus."}
{"ID": 235, "source": "MBPP:836", "prompt": "\"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\t", "predict": "<s> \"\"\"\nWrite a function to find length of the subarray having maximum sum.\n\"\"\"\ndef max_sub_array_sum(a,size): \n\tmax_so_far = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmax_so_far}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\treturn (base1+base2)*height/2\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(length,breadth,height):\n\treturn length*breadth*height\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef area_circle(radius):\n\treturn math.pi*radius**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(radius):\n\treturn 2*math.pi*radius\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base,height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(length,breadth):\n\treturn length*breadth\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1,diagonal2):\n\treturn diagonal1*diagonal2/2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(base,height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef area_sphere(radius):\n\treturn 4*math.pi*radius**2\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(radius,height):\n\treturn 2*math.pi*radius*height+2*math.pi*radius**2\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(radius,height):\n\treturn math.pi*radius*height+math.pi*radius**2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base,height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn length*breadth*height\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef area_circle(radius):\n\treturn math.pi*radius**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(radius):\n\treturn 2*math.pi*radius\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base,height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(length,breadth):\n\treturn length*breadth\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1,diagonal2):\n\treturn diagonal1*diagonal2/2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(base,height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef area_sphere(radius):\n\treturn 4*math.pi*radius**2\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(radius,height):\n\treturn 2*math.pi*radius*height+2*math.pi*radius**2\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(radius,height):\n\treturn math.pi*radius*height+math.pi*radius**2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base,height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\""}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\treturn x % 2 == 0\n\nprint(check_Even_Parity(12))\nprint(check_Even_Parity(13))\nprint(check_Even_Parity(14))\nprint(check_Even_Parity(15))\nprint(check_Even_Parity(16))\nprint(check_Even_Parity(17))\nprint(check_Even_Parity(18))\nprint(check_Even_Parity(19))\nprint(check_Even_Parity(20))\nprint(check_Even_Parity(21))\nprint(check_Even_Parity(22))\nprint(check_Even_Parity(23))\nprint(check_Even_Parity(24))\nprint(check_Even_Parity(25))\nprint(check_Even_Parity(26))\nprint(check_Even_Parity(27))\nprint(check_Even_Parity(28))\nprint(check_Even_Parity(29))\nprint(check_Even_Parity(30))\nprint(check_Even_Parity(31))\nprint(check_Even_Parity(32))\nprint(check_Even_Parity(33))\nprint(check_Even_Parity(34))\nprint(check_Even_Parity(35))\nprint(check_Even_Parity(36))\nprint(check_Even_Parity(37))\nprint(check_Even_Parity(38))\nprint(check_Even_Parity(39))\nprint(check_Even_Parity(40))\nprint(check_Even_Parity(41))\nprint(check_Even_Parity(42))\nprint(check_Even_Parity(43))\nprint(check_Even_Parity(44))\nprint(check_Even_Parity(45))\nprint(check_Even_Parity(46))\nprint(check_Even_Parity(47", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Even_Parity(12))\nprint(check_Even_Parity(13))\nprint(check_Even_Parity(14))\nprint(check_Even_Parity(15))\nprint(check_Even_Parity(16))\nprint(check_Even_Parity(17))\nprint(check_Even_Parity(18))\nprint(check_Even_Parity(19))\nprint(check_Even_Parity(20))\nprint(check_Even_Parity(21))\nprint(check_Even_Parity(22))\nprint(check_Even_Parity(23))\nprint(check_Even_Parity(24))\nprint(check_Even_Parity(25))\nprint(check_Even_Parity(26))\nprint(check_Even_Parity(27))\nprint(check_Even_Parity(28))\nprint(check_Even_Parity(29))\nprint(check_Even_Parity(30))\nprint(check_Even_Parity(31))\nprint(check_Even_Parity(32))\nprint(check_Even_Parity(33))\nprint(check_Even_Parity(34))\nprint(check_Even_Parity(35))\nprint(check_Even_Parity(36))\nprint(check_Even_Parity(37))\nprint(check_Even_Parity(38))\nprint(check_Even_Parity(39))\nprint(check_Even_Parity(40))\nprint(check_Even_Parity(41))\nprint(check_Even_Parity(42))\nprint(check_Even_Parity(43))\nprint(check_Even_Parity(44))\nprint(check_Even_Parity(45))\nprint(check_Even_Parity(46))\nprint(check_Even_Parity(47"}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\tmax_length = 0\n\tfor i in range(n): \n\t\tcurr_num = arr[i] \n\t\tcurr_count = 1\n\t\tfor j in range(i + 1, n): \n\t\t\tif arr[j] == curr_num + 1: \n\t\t\t\tcurr_count += 1\n\t\t\t\tcurr_num += 1\n\t\t\telse: \n\t\t\t\tcurr_num = arr[j] \n\t\t\t\tcurr_count = 1\n\t\tmax_length = max(max_length, curr_count) \n\treturn max_length\n\n\narr = [1, 9, 3, 10, 4, 20, 2] \nn = len(arr) \nprint(\"Length of the longest subsequence is\", \n\t\t\t\t\t\t\tfind_longest_conseq_subseq(arr, n)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x>0, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_negativenum(nums):\n\treturn sum(filter(lambda x: x<0, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_num(nums):\n\treturn sum(filter(lambda x: x, nums))\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "Write a function to calculate the sum of the numbers of a given list of numbers using lambda function"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\treturn str2 in str1\nprint(check_Concat(\"hello\",\"he\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Concat(\"hello\",\"he\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint(check_Concat(\"hello\",\"h\"))\nprint"}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\tmin_diff = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_diff}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\treturn \"\".join(sorted(str))\n\nprint(sort_String(\"hello\"))\nprint(sort_String(\"python\"))\nprint(sort_String(\"java\"))\nprint(sort_String(\"c++\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"php\"))\nprint(sort_String(\"html\"))\nprint(sort_String(\"css\"))\nprint(sort_String(\"javascript\"))\nprint(sort_String(\"sql\"))\nprint(sort_String(\"kotlin\"))\nprint(sort_String(\"swift\"))\nprint(sort_String(\"go\"))\nprint(sort_String(\"ruby\"))\nprint(sort_String(\"asp\"))\nprint(sort_String(\"bash\"))\nprint(sort_String(\"c\"))\nprint(sort_String(\"cpp\"))\nprint(sort_String(\"perl\"))\nprint(sort_String(\"lua\"))\nprint(sort_String(\"r\"))\nprint(sort_String(\"haskell\"))\nprint(sort_String(\"scala\"))\nprint(sort_String(\"scheme\"))\nprint(sort_String(\"racket\"))\nprint(sort_String(\"f#\"))\nprint(sort_String(\"tcl\"))\nprint(sort_String(\"ml\"))\nprint(sort_String(\"prolog\"))\nprint(sort_String(\"lisp\"))\nprint(sort_String(\"smalltalk\"))\nprint(sort_String(\"ada\"))\nprint(sort_String(\"fortran\"))\nprint(sort_String(\"modula-2\"))\nprint(sort_String(\"abc\"))\nprint(sort_String(\"xyz\"))\nprint(sort_String(\"a\"))\nprint(sort_String(\"z\"))\nprint(sort_String(\"aa\"))\nprint(sort_String(\"zz\"))\nprint(sort_String(\"aaa\"))\nprint(sort_String(\"zzz\"))\nprint(sort_String(\"aaaa\"))\nprint(sort_String(\"zzzz\"))\nprint(sort_String(\"aaaaa\"))\nprint(sort_String(\"zzzzz\"))\nprint(sort_String(\"aaaaaa\"))\nprint(sort_String(\"zzzzzz\"))\nprint(sort_String(\"aaaaaaa\"))\nprint(sort_String(\"zzzzzzz\"))\nprint(sort_String(\"aaaaaaaa\"))\nprint(sort_String(\"zzzzzzzz\"))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sort_String(\"hello\"))\nprint(sort_String(\"python\"))\nprint(sort_String(\"java\"))\nprint(sort_String(\"c++\"))\nprint(sort_String(\"c#\"))\nprint(sort_String(\"php\"))\nprint(sort_String(\"html\"))\nprint(sort_String(\"css\"))\nprint(sort_String(\"javascript\"))\nprint(sort_String(\"sql\"))\nprint(sort_String(\"kotlin\"))\nprint(sort_String(\"swift\"))\nprint(sort_String(\"go\"))\nprint(sort_String(\"ruby\"))\nprint(sort_String(\"asp\"))\nprint(sort_String(\"bash\"))\nprint(sort_String(\"c\"))\nprint(sort_String(\"cpp\"))\nprint(sort_String(\"perl\"))\nprint(sort_String(\"lua\"))\nprint(sort_String(\"r\"))\nprint(sort_String(\"haskell\"))\nprint(sort_String(\"scala\"))\nprint(sort_String(\"scheme\"))\nprint(sort_String(\"racket\"))\nprint(sort_String(\"f#\"))\nprint(sort_String(\"tcl\"))\nprint(sort_String(\"ml\"))\nprint(sort_String(\"prolog\"))\nprint(sort_String(\"lisp\"))\nprint(sort_String(\"smalltalk\"))\nprint(sort_String(\"ada\"))\nprint(sort_String(\"fortran\"))\nprint(sort_String(\"modula-2\"))\nprint(sort_String(\"abc\"))\nprint(sort_String(\"xyz\"))\nprint(sort_String(\"a\"))\nprint(sort_String(\"z\"))\nprint(sort_String(\"aa\"))\nprint(sort_String(\"zz\"))\nprint(sort_String(\"aaa\"))\nprint(sort_String(\"zzz\"))\nprint(sort_String(\"aaaa\"))\nprint(sort_String(\"zzzz\"))\nprint(sort_String(\"aaaaa\"))\nprint(sort_String(\"zzzzz\"))\nprint(sort_String(\"aaaaaa\"))\nprint(sort_String(\"zzzzzz\"))\nprint(sort_String(\"aaaaaaa\"))\nprint(sort_String(\"zzzzzzz\"))\nprint(sort_String(\"aaaaaaaa\"))\nprint(sort_String(\"zzzzzzzz\"))\n"}
{"ID": 277, "source": "MBPP:878", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n\treturn len(test_tuple) == K\n\nif __name__ == \"__main__\":\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 3))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 4))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 2))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 1))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 5))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 6))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 7))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 8))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 9))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 10))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 11))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 12))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 13))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 14))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 15))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 16))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 17))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 18))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 19))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 20))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"),", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 3))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 4))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 2))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 1))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 5))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 6))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 7))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 8))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 9))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 10))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 11))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 12))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 13))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 14))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 15))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 16))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 17))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 18))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 19))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"), 20))\n\tprint(check_tuples((\"apple\", \"banana\", \"cherry\"),"}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a.*b\"\n\tresult = re.match(pattern, text)\n\treturn result != None\n\nassert text_match(\"abc\") == True\nassert text_match(\"a\") == False\nassert text_match(\"ab\") == True\nassert text_match(\"aeb\") == False\nassert text_match(\"addb\") == True\nassert text_match(\"ad\") == False\nassert text_match(\"acb\") == True\nassert text_match(\"azb\") == True\nassert text_match(\"abb\") == True\nassert text_match(\"abbb\") == True\nassert text_match(\"abbbb\") == True\nassert text_match(\"abbbbb\") == True\nassert text_match(\"abbbbbb\") == True\nassert text_match(\"abbbbbbb\") == True\nassert text_match(\"abbbbbbbb\") == True\nassert text_match(\"abbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbbbbb\") == True\nassert", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "assert text_match(\"abc\") == True\nassert text_match(\"a\") == False\nassert text_match(\"ab\") == True\nassert text_match(\"aeb\") == False\nassert text_match(\"addb\") == True\nassert text_match(\"ad\") == False\nassert text_match(\"acb\") == True\nassert text_match(\"azb\") == True\nassert text_match(\"abb\") == True\nassert text_match(\"abbb\") == True\nassert text_match(\"abbbb\") == True\nassert text_match(\"abbbbb\") == True\nassert text_match(\"abbbbbb\") == True\nassert text_match(\"abbbbbbb\") == True\nassert text_match(\"abbbbbbbb\") == True\nassert text_match(\"abbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbbbb\") == True\nassert text_match(\"abbbbbbbbbbbbbbbbbbbbbbbbb\") == True\nassert"}
{"ID": 279, "source": "MBPP:880", "prompt": "\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) : \n\td = b*b - 4*a*c\n\tif d > 0 : \n\t\treturn 2\n\telif d == 0 : \n\t\treturn 1\n\telse : \n\t\treturn 0\n\nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(1,2,28))\nprint(Check_Solution(1,2,29))\nprint(Check_Solution(1,2,30))\nprint(Check_Solution(1,2,31))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(1,2,28))\nprint(Check_Solution(1,2,29))\nprint(Check_Solution(1,2,30))\nprint(Check_Solution(1,2,31))\nprint"}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 and x%n==0,nums))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 or x%n==0,nums))\n\n\"\"\"\nWrite a function to find numbers divisible by m and not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 and x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers divisible by m or not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 or x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m!=0 and x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m!=0 or x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m and not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m!=0 and x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m or not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x:x%m==0 and x%n==0,nums))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 or x%n==0,nums))\n\n\"\"\"\nWrite a function to find numbers divisible by m and not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 and x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers divisible by m or not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m==0 or x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m!=0 and x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m!=0 or x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m and not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x:x%m!=0 and x%n!=0,nums))\n\n\"\"\"\nWrite a function to find numbers not divisible by m or not by n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\tif len(str1) != len(str2):\n\t\treturn False\n\tdict1 = {}\n\tdict2 = {}\n\tfor i in range(len(str1)):\n\t\tif str1[i] not in dict1:\n\t\t\tdict1[str1[i]] = str2[i]\n\t\telif dict1[str1[i]] != str2[i]:\n\t\t\treturn False\n\t\tif str2[i] not in dict2:\n\t\t\tdict2[str2[i]] = str1[i]\n\t\telif dict2[str2[i]] != str1[i]:\n\t\t\treturn False\n\treturn True\nprint(is_Isomorphic(\"foo\",\"bar\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Isomorphic(\"foo\",\"bar\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"paper\",\"title\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\"abaa\"))\nprint(is_Isomorphic(\"aaab\",\""}
{"ID": 286, "source": "MBPP:887", "prompt": "\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) : \n\treturn n & 1\n\nprint(is_odd(10))\nprint(is_odd(11))\nprint(is_odd(12))\nprint(is_odd(13))\nprint(is_odd(14))\nprint(is_odd(15))\nprint(is_odd(16))\nprint(is_odd(17))\nprint(is_odd(18))\nprint(is_odd(19))\nprint(is_odd(20))\nprint(is_odd(21))\nprint(is_odd(22))\nprint(is_odd(23))\nprint(is_odd(24))\nprint(is_odd(25))\nprint(is_odd(26))\nprint(is_odd(27))\nprint(is_odd(28))\nprint(is_odd(29))\nprint(is_odd(30))\nprint(is_odd(31))\nprint(is_odd(32))\nprint(is_odd(33))\nprint(is_odd(34))\nprint(is_odd(35))\nprint(is_odd(36))\nprint(is_odd(37))\nprint(is_odd(38))\nprint(is_odd(39))\nprint(is_odd(40))\nprint(is_odd(41))\nprint(is_odd(42))\nprint(is_odd(43))\nprint(is_odd(44))\nprint(is_odd(45))\nprint(is_odd(46))\nprint(is_odd(47))\nprint(is_odd(48))\nprint(is_odd(49))\nprint(is_odd(50))\nprint(is_odd(51))\nprint(is_odd(52))\nprint(is_odd(53))\nprint(is_odd(54))\nprint(is_odd(55))\nprint(is_odd(56))\nprint(is_odd(57))\nprint(is_odd(58))\nprint(is_odd(59))\nprint(is_odd", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_odd(10))\nprint(is_odd(11))\nprint(is_odd(12))\nprint(is_odd(13))\nprint(is_odd(14))\nprint(is_odd(15))\nprint(is_odd(16))\nprint(is_odd(17))\nprint(is_odd(18))\nprint(is_odd(19))\nprint(is_odd(20))\nprint(is_odd(21))\nprint(is_odd(22))\nprint(is_odd(23))\nprint(is_odd(24))\nprint(is_odd(25))\nprint(is_odd(26))\nprint(is_odd(27))\nprint(is_odd(28))\nprint(is_odd(29))\nprint(is_odd(30))\nprint(is_odd(31))\nprint(is_odd(32))\nprint(is_odd(33))\nprint(is_odd(34))\nprint(is_odd(35))\nprint(is_odd(36))\nprint(is_odd(37))\nprint(is_odd(38))\nprint(is_odd(39))\nprint(is_odd(40))\nprint(is_odd(41))\nprint(is_odd(42))\nprint(is_odd(43))\nprint(is_odd(44))\nprint(is_odd(45))\nprint(is_odd(46))\nprint(is_odd(47))\nprint(is_odd(48))\nprint(is_odd(49))\nprint(is_odd(50))\nprint(is_odd(51))\nprint(is_odd(52))\nprint(is_odd(53))\nprint(is_odd(54))\nprint(is_odd(55))\nprint(is_odd(56))\nprint(is_odd(57))\nprint(is_odd(58))\nprint(is_odd(59))\nprint(is_odd"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "<s> \"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\treturn [list(reversed(l)) for l in lists]\n\n\"\"\"\nWrite a function to find the maximum depth of a tree.\n\"\"\"\ndef max_depth(tree):\n\tif not tree:\n\t\treturn 0\n\treturn 1 + max(max_depth(tree[1:]), max_depth(tree[2:]))\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using a queue.\n\"\"\"\ndef max_depth_queue(tree):\n\tif not tree:\n\t\treturn 0\n\tqueue = [tree]\n\tdepth = 0\n\twhile queue:\n\t\tdepth += 1\n\t\tqueue = [child for node in queue for child in node[1:]]\n\treturn depth\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using a stack.\n\"\"\"\ndef max_depth_stack(tree):\n\tif not tree:\n\t\treturn 0\n\tstack = [tree]\n\tdepth = 0\n\twhile stack:\n\t\tdepth += 1\n\t\tnode = stack.pop()\n\t\tstack.extend(node[1:])\n\treturn depth\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using a recursive DFS.\n\"\"\"\ndef max_depth_dfs(tree):\n\tif not tree:\n\t\treturn 0\n\treturn 1 + max(max_depth_dfs(tree[1:]), max_depth_dfs(tree[2:]))\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using an iterative DFS.\n\"\"\"\ndef max_depth_dfs_iter(tree):\n\tif not tree:\n\t\treturn 0\n\tstack = [tree]\n\tdepth = 0\n\twhile stack:\n\t\tnode = stack.pop()\n\t\tif node:\n\t\t\tdepth += 1\n\t\t\tstack.extend(node[1:])\n\treturn depth\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using a BFS.\n\"\"\"\ndef max_depth_bfs(tree):\n\tif not tree:\n\t\treturn 0\n\tqueue = [tree]\n\tdepth =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 0\n\tstack = [tree]\n\tdepth = 0\n\twhile stack:\n\t\tdepth += 1\n\t\tnode = stack.pop()\n\t\tstack.extend(node[1:])\n\treturn depth\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using a recursive DFS.\n\"\"\"\ndef max_depth_dfs(tree):\n\tif not tree:\n\t\treturn 0\n\treturn 1 + max(max_depth_dfs(tree[1:]), max_depth_dfs(tree[2:]))\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using an iterative DFS.\n\"\"\"\ndef max_depth_dfs_iter(tree):\n\tif not tree:\n\t\treturn 0\n\tstack = [tree]\n\tdepth = 0\n\twhile stack:\n\t\tnode = stack.pop()\n\t\tif node:\n\t\t\tdepth += 1\n\t\t\tstack.extend(node[1:])\n\treturn depth\n\n\"\"\"\nWrite a function to find the maximum depth of a tree using a BFS.\n\"\"\"\ndef max_depth_bfs(tree):\n\tif not tree:\n\t\treturn 0\n\tqueue = [tree]\n\tdepth ="}
{"ID": 290, "source": "MBPP:891", "prompt": "\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B): \n\treturn len(str(A)) == len(str(B))\n\nprint(same_Length(123, 456))\nprint(same_Length(123, 4567))\nprint(same_Length(123, 45678))\nprint(same_Length(123, 456789))\nprint(same_Length(123, 4567890))\nprint(same_Length(123, 45678901))\nprint(same_Length(123, 456789012))\nprint(same_Length(123, 4567890123))\nprint(same_Length(123, 45678901234))\nprint(same_Length(123, 456789012345))\nprint(same_Length(123, 4567890123456))\nprint(same_Length(123, 45678901234567))\nprint(same_Length(123, 456789012345678))\nprint(same_Length(123, 4567890123456789))\nprint(same_Length(123, 45678901234567890))\nprint(same_Length(123, 456789012345678901))\nprint(same_Length(123, 4567890123456789012))\nprint(same_Length(123, 45678901234567890123))\nprint(same_Length(123, 456789012345678901234))\nprint(same_Length(123, 4567890123", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(same_Length(123, 456))\nprint(same_Length(123, 4567))\nprint(same_Length(123, 45678))\nprint(same_Length(123, 456789))\nprint(same_Length(123, 4567890))\nprint(same_Length(123, 45678901))\nprint(same_Length(123, 456789012))\nprint(same_Length(123, 4567890123))\nprint(same_Length(123, 45678901234))\nprint(same_Length(123, 456789012345))\nprint(same_Length(123, 4567890123456))\nprint(same_Length(123, 45678901234567))\nprint(same_Length(123, 456789012345678))\nprint(same_Length(123, 4567890123456789))\nprint(same_Length(123, 45678901234567890))\nprint(same_Length(123, 456789012345678901))\nprint(same_Length(123, 4567890123456789012))\nprint(same_Length(123, 45678901234567890123))\nprint(same_Length(123, 456789012345678901234))\nprint(same_Length(123, 4567890123"}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\treturn ' '.join(text.split())\n\n\"\"\"\nWrite a function to check if a string is palindrome or not.\n\"\"\"\ndef is_palindrome(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is anagram or not.\n\"\"\"\ndef is_anagram(text1, text2):\n\treturn sorted(text1) == sorted(text2)\n\n\"\"\"\nWrite a function to check if a string is pangram or not.\n\"\"\"\ndef is_pangram(text):\n\treturn len(set(text)) == 26\n\n\"\"\"\nWrite a function to check if a string is isogram or not.\n\"\"\"\ndef is_isogram(text):\n\treturn len(text) == len(set(text))\n\n\"\"\"\nWrite a function to check if a string is strong or not.\n\"\"\"\ndef is_strong(text):\n\treturn any(text.lower() == text[::-1] for text in text)\n\n\"\"\"\nWrite a function to check if a string is armstrong or not.\n\"\"\"\ndef is_armstrong(text):\n\treturn sum(int(digit) ** len(text) for digit in text) == int(text)\n\n\"\"\"\nWrite a function to check if a string is k-gram or not.\n\"\"\"\ndef is_kgram(text, k):\n\treturn len(set(text)) == k\n\n\"\"\"\nWrite a function to check if a string is tautogram or not.\n\"\"\"\ndef is_tautogram(text):\n\treturn len(set(text[0])) == 1\n\n\"\"\"\nWrite a function to check if a string is isogram or not.\n\"\"\"\ndef is_isogram(text):\n\treturn len(text) == len(set(text))\n\n\"\"\"\nWrite a function to check if a string is emagram or not.\n\"\"\"\ndef is_emagram(text):\n\treturn len(set(text)) == 5\n\n\"\"\"\nWrite a function to check if a string is caps or not.\n\"\"\"\ndef is_caps(text):\n\treturn text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ' '.join(text.split())\n\n\"\"\"\nWrite a function to check if a string is palindrome or not.\n\"\"\"\ndef is_palindrome(text):\n\treturn text == text[::-1]\n\n\"\"\"\nWrite a function to check if a string is anagram or not.\n\"\"\"\ndef is_anagram(text1, text2):\n\treturn sorted(text1) == sorted(text2)\n\n\"\"\"\nWrite a function to check if a string is pangram or not.\n\"\"\"\ndef is_pangram(text):\n\treturn len(set(text)) == 26\n\n\"\"\"\nWrite a function to check if a string is isogram or not.\n\"\"\"\ndef is_isogram(text):\n\treturn len(text) == len(set(text))\n\n\"\"\"\nWrite a function to check if a string is strong or not.\n\"\"\"\ndef is_strong(text):\n\treturn any(text.lower() == text[::-1] for text in text)\n\n\"\"\"\nWrite a function to check if a string is armstrong or not.\n\"\"\"\ndef is_armstrong(text):\n\treturn sum(int(digit) ** len(text) for digit in text) == int(text)\n\n\"\"\"\nWrite a function to check if a string is k-gram or not.\n\"\"\"\ndef is_kgram(text, k):\n\treturn len(set(text)) == k\n\n\"\"\"\nWrite a function to check if a string is tautogram or not.\n\"\"\"\ndef is_tautogram(text):\n\treturn len(set(text[0])) == 1\n\n\"\"\"\nWrite a function to check if a string is isogram or not.\n\"\"\"\ndef is_isogram(text):\n\treturn len(text) == len(set(text))\n\n\"\"\"\nWrite a function to check if a string is emagram or not.\n\"\"\"\ndef is_emagram(text):\n\treturn len(set(text)) == 5\n\n\"\"\"\nWrite a function to check if a string is caps or not.\n\"\"\"\ndef is_caps(text):"}
{"ID": 293, "source": "MBPP:894", "prompt": "\"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n\treturn tuple(map(float, test_str.split(',')))\n\nprint(float_to_tuple(\"1.2,2.3,3.4,4.5\"))\n\n\"\"\"\nWrite a function to convert the given tuple into string.\n\"\"\"\ndef tuple_to_str(test_tuple):\n\treturn str(test_tuple).replace(\" \", \"\").replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\")\n\nprint(tuple_to_str((1.2, 2.3, 3.4, 4.5)))\n\n\"\"\"\nWrite a function to convert the given string of float type into list.\n\"\"\"\ndef float_to_list(test_str):\n\treturn list(map(float, test_str.split(',')))\n\nprint(float_to_list(\"1.2,2.3,3.4,4.5\"))\n\n\"\"\"\nWrite a function to convert the given list into string.\n\"\"\"\ndef list_to_str(test_list):\n\treturn str(test_list).replace(\" \", \"\").replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\")\n\nprint(list_to_str([1.2, 2.3, 3.4, 4.5]))\n\n\"\"\"\nWrite a function to convert the given string of float type into set.\n\"\"\"\ndef float_to_set(test_str):\n\treturn set(map(float, test_str.split(',')))\n\nprint(float_to_set(\"1.2,2.3,3.4,4.5\"))\n\n\"\"\"\nWrite a function to convert the given set into string.\n\"\"\"\ndef set_to_str(test_set):\n\treturn str(test_set).replace(\" \", \"\").replace(\"'\", \"\").replace(\"{\", \"\").replace(\"}\", \"\")\n\nprint(set_to_str({1.2, 2.3, 3.4, 4.5}))\n\n\"\"\"\nWrite a function to convert the given string of float type into dictionary.\n\"\"\"\ndef float_to_dict(test_str):\n\treturn dict(map(float, test_str.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef float_to_list(test_str):\n\treturn list(map(float, test_str.split(',')))\n\nprint(float_to_list(\"1.2,2.3,3.4,4.5\"))\n\n\"\"\"\nWrite a function to convert the given list into string.\n\"\"\"\ndef list_to_str(test_list):\n\treturn str(test_list).replace(\" \", \"\").replace(\"'\", \"\").replace(\"[\", \"\").replace(\"]\", \"\")\n\nprint(list_to_str([1.2, 2.3, 3.4, 4.5]))\n\n\"\"\"\nWrite a function to convert the given string of float type into set.\n\"\"\"\ndef float_to_set(test_str):\n\treturn set(map(float, test_str.split(',')))\n\nprint(float_to_set(\"1.2,2.3,3.4,4.5\"))\n\n\"\"\"\nWrite a function to convert the given set into string.\n\"\"\"\ndef set_to_str(test_set):\n\treturn str(test_set).replace(\" \", \"\").replace(\"'\", \"\").replace(\"{\", \"\").replace(\"}\", \"\")\n\nprint(set_to_str({1.2, 2.3, 3.4, 4.5}))\n\n\"\"\"\nWrite a function to convert the given string of float type into dictionary.\n\"\"\"\ndef float_to_dict(test_str):\n\treturn dict(map(float, test_str."}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t\"\"\"\n\t:param numbers: list of numbers\n\t:param n: number of elements to extract\n\t:return: list of n elements\n\t\"\"\"\n\treturn numbers[:n]\n\n\nif __name__ == '__main__':\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 11))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 12))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 13))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 14))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 15))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 16))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 17))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 18))\n\tprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 11))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 12))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 13))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 14))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 15))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 16))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 17))\n\tprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 18))\n\tprint("}
{"ID": 305, "source": "MBPP:906", "prompt": "\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract year, month and date from a url by using regex.\n\"\"\"\ndef extract_date(url):\n\timport re\n\tpattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\tmatch = re.search(pattern, url)\n\tif match:\n\t\treturn match.group(1), match.group(2), match.group(3)\n\telse:\n\t\treturn None, None, None\n\n\nif __name__ == '__main__':\n\tprint(extract_date('https://www.example.com/2019-01-01/'))\n\tprint(extract_date('https://www.example.com/2019-01-01'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(extract_date('https://www.example.com/2019-01-01/'))\n\tprint(extract_date('https://www.example.com/2019-01-01'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/test/test/test/test/test/test'))\n\tprint(extract_date('https://www.example.com/2019-01-01/test/test/test/"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\tnum = str(num)\n\tif len(num) == 1:\n\t\treturn int(num) - 1\n\telse:\n\t\tmid = len(num) // 2\n\t\tleft = num[:mid]\n\t\tright = num[mid:]\n\t\tif left == right[::-1]:\n\t\t\treturn int(num) - 1\n\t\telse:\n\t\t\treturn int(num[:mid] + num[mid+1:])\n\n\nprint(previous_palindrome(12345))\nprint(previous_palindrome(123456))\nprint(previous_palindrome(1234567))\nprint(previous_palindrome(12345678))\nprint(previous_palindrome(123456789))\nprint(previous_palindrome(1234567890))\nprint(previous_palindrome(12345678901))\nprint(previous_palindrome(123456789012))\nprint(previous_palindrome(1234567890123))\nprint(previous_palindrome(12345678901234))\nprint(previous_palindrome(123456789012345))\nprint(previous_palindrome(1234567890123456))\nprint(previous_palindrome(12345678901234567))\nprint(previous_palindrome(123456789012345678))\nprint(previous_palindrome(1234567890123456789))\nprint(previous_palindrome(12345678901234567890))\nprint(previous_palindrome(123456789012345678901))\nprint(previous_palindrome(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(previous_palindrome(12345))\nprint(previous_palindrome(123456))\nprint(previous_palindrome(1234567))\nprint(previous_palindrome(12345678))\nprint(previous_palindrome(123456789))\nprint(previous_palindrome(1234567890))\nprint(previous_palindrome(12345678901))\nprint(previous_palindrome(123456789012))\nprint(previous_palindrome(1234567890123))\nprint(previous_palindrome(12345678901234))\nprint(previous_palindrome(123456789012345))\nprint(previous_palindrome(1234567890123456))\nprint(previous_palindrome(12345678901234567))\nprint(previous_palindrome(123456789012345678))\nprint(previous_palindrome(1234567890123456789))\nprint(previous_palindrome(12345678901234567890))\nprint(previous_palindrome(123456789012345678901))\nprint(previous_palindrome("}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<s> \"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\tif m < 1 or m > 12:\n\t\treturn False\n\tif d < 1 or d > 31:\n\t\treturn False\n\tif y < 1 or y > 9999:\n\t\treturn False\n\tif m == 2 and d > 28:\n\t\treturn False\n\tif m == 2 and d == 29 and y % 4 != 0:\n\t\treturn False\n\treturn True\n\nprint(check_date(2, 29, 2016))\nprint(check_date(2, 29, 2015))\nprint(check_date(13, 29, 2015))\nprint(check_date(1, 32, 2015))\nprint(check_date(1, 31, 2015))\nprint(check_date(1, 30, 2015))\nprint(check_date(1, 29, 2015))\nprint(check_date(1, 28, 2015))\nprint(check_date(1, 27, 2015))\nprint(check_date(1, 26, 2015))\nprint(check_date(1, 25, 2015))\nprint(check_date(1, 24, 2015))\nprint(check_date(1, 23, 2015))\nprint(check_date(1, 22, 2015))\nprint(check_date(1, 21, 2015))\nprint(check_date(1, 20, 2015))\nprint(check_date(1, 19, 2015))\nprint(check_date(1, 18, 2015))\nprint(check_date(1, 17, 2015))\nprint(check_date(1, 16, 2015))\nprint(check_date(1, 15, 2015))\nprint(check", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_date(2, 29, 2016))\nprint(check_date(2, 29, 2015))\nprint(check_date(13, 29, 2015))\nprint(check_date(1, 32, 2015))\nprint(check_date(1, 31, 2015))\nprint(check_date(1, 30, 2015))\nprint(check_date(1, 29, 2015))\nprint(check_date(1, 28, 2015))\nprint(check_date(1, 27, 2015))\nprint(check_date(1, 26, 2015))\nprint(check_date(1, 25, 2015))\nprint(check_date(1, 24, 2015))\nprint(check_date(1, 23, 2015))\nprint(check_date(1, 22, 2015))\nprint(check_date(1, 21, 2015))\nprint(check_date(1, 20, 2015))\nprint(check_date(1, 19, 2015))\nprint(check_date(1, 18, 2015))\nprint(check_date(1, 17, 2015))\nprint(check_date(1, 16, 2015))\nprint(check_date(1, 15, 2015))\nprint(check"}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\tif len(s) < 2:  \n\t\treturn False\n\tfor i in range(len(s) - 1):  \n\t\tif s[i] != s[i + 1]:  \n\t\t\treturn False\n\treturn True\nprint(is_Two_Alter(\"aabb\"))\nprint(is_Two_Alter(\"aabbcc\"))\nprint(is_Two_Alter(\"aabbccdd\"))\nprint(is_Two_Alter(\"aabbccddee\"))\nprint(is_Two_Alter(\"aabbccddeeff\"))\nprint(is_Two_Alter(\"aabbccddeeffgg\"))\nprint(is_Two_Alter(\"aabbccddeeffgghh\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhii\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijj\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkk\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkll\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmm\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnn\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnoo\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnoopp\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqq\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqqrr\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrss\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrss\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmm", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Two_Alter(\"aabb\"))\nprint(is_Two_Alter(\"aabbcc\"))\nprint(is_Two_Alter(\"aabbccdd\"))\nprint(is_Two_Alter(\"aabbccddee\"))\nprint(is_Two_Alter(\"aabbccddeeff\"))\nprint(is_Two_Alter(\"aabbccddeeffgg\"))\nprint(is_Two_Alter(\"aabbccddeeffgghh\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhii\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijj\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkk\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkll\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmm\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnn\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnoo\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnoopp\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqq\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqqrr\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrss\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrss\"))\nprint(is_Two_Alter(\"aabbccddeeffgghhiijjkkllmm"}
{"ID": 316, "source": "MBPP:917", "prompt": "\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\ndef text_uppercase_lowercase(text):\n\t\"\"\"\n\t:param text: string\n\t:return: list of tuples\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(text)):\n\t\tif text[i].isupper():\n\t\t\tfor j in range(i+1, len(text)):\n\t\t\t\tif text[j].islower():\n\t\t\t\t\tresult.append((text[i], text[j]))\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\treturn result\n\n\nif __name__ == '__main__':\n\tprint(text_uppercase_lowercase('Hello World'))\n\tprint(text_uppercase_lowercase('Hello Worlds'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Web'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide W", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(text_uppercase_lowercase('Hello World'))\n\tprint(text_uppercase_lowercase('Hello Worlds'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Web'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide Wide Wide Wide Wide Wide Wide'))\n\tprint(text_uppercase_lowercase('Hello Worlds Wide Webs Wide Wide Wide W"}
{"ID": 322, "source": "MBPP:923", "prompt": "\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n\tdp = [[0 for x in range(n+1)] for y in range(m+1)]\n\n\tfor i in range(m+1):\n\t\tfor j in range(n+1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tdp[i][j] = 0\n\t\t\telif X[i-1] == Y[j-1]:\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n\ti, j = m, n\n\tlcs = \"\"\n\twhile i > 0 and j > 0:\n\t\tif X[i-1] == Y[j-1]:\n\t\t\tlcs = X[i-1] + lcs\n\t\t\ti -= 1\n\t\t\tj -= 1\n\t\telif dp[i-1][j] > dp[i][j-1]:\n\t\t\ti -= 1\n\t\telse:\n\t\t\tj -= 1\n\n\treturn lcs\n\n\ndef shortest_supersequence(str1, str2):\n\tlcs = super_seq(str1, str2, len(str1), len(str2))\n\treturn len(str1) + len(str2) - 2*len(lcs)\n\n\nif __name__ == \"__main__\":\n\tprint(shortest_supersequence(\"abcd\", \"bd\"))\n\tprint(shortest_supersequence(\"abcd\", \"abc\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcde\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdef\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefg\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefgh\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefghi\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefghij\"))\n\tprint(shortest_supersequence(\"ab", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(shortest_supersequence(\"abcd\", \"bd\"))\n\tprint(shortest_supersequence(\"abcd\", \"abc\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcde\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdef\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefg\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefgh\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefghi\"))\n\tprint(shortest_supersequence(\"abcd\", \"abcdefghij\"))\n\tprint(shortest_supersequence(\"ab"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "<s> \"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn m\n\tif n == 2: \n\t\treturn m * (m - 1) / 2\n\tif n == 3: \n\t\treturn m * (m - 1) * (m - 2) / 6\n\tif n == 4: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) / 24\n\tif n == 5: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) / 120\n\tif n == 6: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) / 720\n\tif n == 7: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) / 5040\n\tif n == 8: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) / 40320\n\tif n == 9: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) / 362880\n\tif n == 10: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) / ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn m\n\tif n == 2: \n\t\treturn m * (m - 1) / 2\n\tif n == 3: \n\t\treturn m * (m - 1) * (m - 2) / 6\n\tif n == 4: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) / 24\n\tif n == 5: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) / 120\n\tif n == 6: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) / 720\n\tif n == 7: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) / 5040\n\tif n == 8: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) / 40320\n\tif n == 9: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) / 362880\n\tif n == 10: \n\t\treturn m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) / "}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a*b*')\n\tresult = pattern.search(text)\n\treturn result.group()\n\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex."}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\treturn list(set(l))\n\ndef remove_duplic_list_2(l):\n\treturn list(dict.fromkeys(l))\n\ndef remove_duplic_list_3(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i])\n\ndef remove_duplic_list_4(l):\n\treturn list(l for l in set(l))\n\ndef remove_duplic_list_5(l):\n\treturn list(l for l in dict.fromkeys(l))\n\ndef remove_duplic_list_6(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for i, l in enumerate(l))\n\ndef remove_duplic_list_7(l):\n\treturn list(l for l in set(l) for i, l in enumerate(l))\n\ndef remove_duplic_list_8(l):\n\treturn list(l for l in dict.fromkeys(l) for i, l in enumerate(l))\n\ndef remove_duplic_list_9(l):\n\treturn list(l for l in set(l) for i, l in enumerate(l) if l not in l[:i])\n\ndef remove_duplic_list_10(l):\n\treturn list(l for l in dict.fromkeys(l) for i, l in enumerate(l) if l not in l[:i])\n\ndef remove_duplic_list_11(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for l in set(l))\n\ndef remove_duplic_list_12(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for l in dict.fromkeys(l))\n\ndef remove_duplic_list_13(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for l in set(l) for i, l in enumerate(l))\n\ndef remove_duplic_list_14(l):\n\treturn list(l for i, l", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(set(l))\n\ndef remove_duplic_list_2(l):\n\treturn list(dict.fromkeys(l))\n\ndef remove_duplic_list_3(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i])\n\ndef remove_duplic_list_4(l):\n\treturn list(l for l in set(l))\n\ndef remove_duplic_list_5(l):\n\treturn list(l for l in dict.fromkeys(l))\n\ndef remove_duplic_list_6(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for i, l in enumerate(l))\n\ndef remove_duplic_list_7(l):\n\treturn list(l for l in set(l) for i, l in enumerate(l))\n\ndef remove_duplic_list_8(l):\n\treturn list(l for l in dict.fromkeys(l) for i, l in enumerate(l))\n\ndef remove_duplic_list_9(l):\n\treturn list(l for l in set(l) for i, l in enumerate(l) if l not in l[:i])\n\ndef remove_duplic_list_10(l):\n\treturn list(l for l in dict.fromkeys(l) for i, l in enumerate(l) if l not in l[:i])\n\ndef remove_duplic_list_11(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for l in set(l))\n\ndef remove_duplic_list_12(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for l in dict.fromkeys(l))\n\ndef remove_duplic_list_13(l):\n\treturn list(l for i, l in enumerate(l) if l not in l[:i] for l in set(l) for i, l in enumerate(l))\n\ndef remove_duplic_list_14(l):"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\"\"\"\nWrite a function to convert snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(text):\n\treturn re.sub(r'(?:^|_)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert camel case string to kebab case string by using regex.\n\"\"\"\ndef camel_to_kebab(text):\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '-', text).lower()\n\n\"\"\"\nWrite a function to convert kebab case string to camel case string by using regex.\n\"\"\"\ndef kebab_to_camel(text):\n\treturn re.sub(r'(?:^|-)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert snake case string to kebab case string by using regex.\n\"\"\"\ndef snake_to_kebab(text):\n\treturn re.sub(r'(?:^|_)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert kebab case string to snake case string by using regex.\n\"\"\"\ndef kebab_to_snake(text):\n\treturn re.sub(r'(?:^|-)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert camel case string to pascal case string by using regex.\n\"\"\"\ndef camel_to_pascal(text):\n\treturn re.sub(r'(?:^|[a-z])([A-Z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert pascal case string to camel case string by using regex.\n\"\"\"\ndef pascal_to_camel(text):\n\treturn re.sub(r'(?<!^)(?=[A", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\"\"\"\nWrite a function to convert snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(text):\n\treturn re.sub(r'(?:^|_)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert camel case string to kebab case string by using regex.\n\"\"\"\ndef camel_to_kebab(text):\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '-', text).lower()\n\n\"\"\"\nWrite a function to convert kebab case string to camel case string by using regex.\n\"\"\"\ndef kebab_to_camel(text):\n\treturn re.sub(r'(?:^|-)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert snake case string to kebab case string by using regex.\n\"\"\"\ndef snake_to_kebab(text):\n\treturn re.sub(r'(?:^|_)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert kebab case string to snake case string by using regex.\n\"\"\"\ndef kebab_to_snake(text):\n\treturn re.sub(r'(?:^|-)([a-z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert camel case string to pascal case string by using regex.\n\"\"\"\ndef camel_to_pascal(text):\n\treturn re.sub(r'(?:^|[a-z])([A-Z])', lambda m: m.group(1).upper(), text)\n\n\"\"\"\nWrite a function to convert pascal case string to camel case string by using regex.\n\"\"\"\ndef pascal_to_camel(text):"}
{"ID": 340, "source": "MBPP:941", "prompt": "\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n\tcount = 0\n\tfor i in num:\n\t\tif type(i) == tuple:\n\t\t\tbreak\n\t\tcount += 1\n\treturn count\n\nprint(count_elim([1,2,3,4,5,6,7,8,9,10]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6), (6,7)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9)]))\nprint(count_elim([1,2,3,4,5,6,7,8,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_elim([1,2,3,4,5,6,7,8,9,10]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6), (6,7)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8)]))\nprint(count_elim([1,2,3,4,5,6,7,8,9,10, (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9)]))\nprint(count_elim([1,2,3,4,5,6,7,8,"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "<s> \"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\timport heapq\n\treturn heapq.merge(num1,num2)\n\n\"\"\"\nWrite a function to find the maximum depth of a given tree.\n\"\"\"\ndef max_depth(tree):\n\tif tree is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + max(max_depth(tree.left),max_depth(tree.right))\n\n\"\"\"\nWrite a function to find the maximum width of a given tree.\n\"\"\"\ndef max_width(tree):\n\tif tree is None:\n\t\treturn 0\n\telse:\n\t\treturn max(max_width(tree.left),max_width(tree.right))\n\n\"\"\"\nWrite a function to find the maximum element of a given heap.\n\"\"\"\ndef max_heap(heap):\n\treturn heap[0]\n\n\"\"\"\nWrite a function to find the minimum element of a given heap.\n\"\"\"\ndef min_heap(heap):\n\treturn heap[-1]\n\n\"\"\"\nWrite a function to find the kth largest element of a given list.\n\"\"\"\ndef kth_largest(nums,k):\n\treturn sorted(nums)[-k]\n\n\"\"\"\nWrite a function to find the kth smallest element of a given list.\n\"\"\"\ndef kth_smallest(nums,k):\n\treturn sorted(nums)[k-1]\n\n\"\"\"\nWrite a function to find the kth largest element of a given list using heapq module.\n\"\"\"\ndef kth_largest_heap(nums,k):\n\timport heapq\n\treturn heapq.nlargest(k,nums)[-1]\n\n\"\"\"\nWrite a function to find the kth smallest element of a given list using heapq module.\n\"\"\"\ndef kth_smallest_heap(nums,k):\n\timport heapq\n\treturn heapq.nsmallest(k,nums)[-1]\n\n\"\"\"\nWrite a function to find the kth largest element of a given list using quickselect algorithm.\n\"\"\"\ndef kth_largest_quickselect(nums,k):\n\tdef partition(nums,low", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the maximum element of a given heap.\n\"\"\"\ndef max_heap(heap):\n\treturn heap[0]\n\n\"\"\"\nWrite a function to find the minimum element of a given heap.\n\"\"\"\ndef min_heap(heap):\n\treturn heap[-1]\n\n\"\"\"\nWrite a function to find the kth largest element of a given list.\n\"\"\"\ndef kth_largest(nums,k):\n\treturn sorted(nums)[-k]\n\n\"\"\"\nWrite a function to find the kth smallest element of a given list.\n\"\"\"\ndef kth_smallest(nums,k):\n\treturn sorted(nums)[k-1]\n\n\"\"\"\nWrite a function to find the kth largest element of a given list using heapq module.\n\"\"\"\ndef kth_largest_heap(nums,k):\n\timport heapq\n\treturn heapq.nlargest(k,nums)[-1]\n\n\"\"\"\nWrite a function to find the kth smallest element of a given list using heapq module.\n\"\"\"\ndef kth_smallest_heap(nums,k):\n\timport heapq\n\treturn heapq.nsmallest(k,nums)[-1]\n"}
{"ID": 351, "source": "MBPP:952", "prompt": "\"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\t", "predict": "<s> \"\"\"\nWrite a function to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p): \n\tif r > n: \n\t\treturn -1\n\tif r == 0: \n\t\treturn 1\n\tif r == 1: \n\t\treturn n % p \n\tif n == r: \n\t\treturn 1\n\tif r == n - 1: \n\t\treturn 1\n\tif r == n - 2: \n\t\treturn 2\n\tif r == n - 3: \n\t\treturn 6\n\tif r == n - 4: \n\t\treturn 24\n\tif r == n - 5: \n\t\treturn 120\n\tif r == n - 6: \n\t\treturn 720\n\tif r == n - 7: \n\t\treturn 5040\n\tif r == n - 8: \n\t\treturn 40320\n\tif r == n - 9: \n\t\treturn 362880\n\tif r == n - 10: \n\t\treturn 3628800\n\tif r == n - 11: \n\t\treturn 39916800\n\tif r == n - 12: \n\t\treturn 479001600\n\tif r == n - 13: \n\t\treturn 6227020800\n\tif r == n - 14: \n\t\treturn 87178291200\n\tif r == n - 15: \n\t\treturn 1307674368000\n\tif r == n - 16: \n\t\treturn 20922789888000\n\tif r == n - 17: \n\t\treturn 355687428096000\n\tif r == n - 18: \n\t\treturn 6402373705728000\n\tif r == n - 19: \n\t\treturn 12164510040", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif r > n: \n\t\treturn -1\n\tif r == 0: \n\t\treturn 1\n\tif r == 1: \n\t\treturn n % p \n\tif n == r: \n\t\treturn 1\n\tif r == n - 1: \n\t\treturn 1\n\tif r == n - 2: \n\t\treturn 2\n\tif r == n - 3: \n\t\treturn 6\n\tif r == n - 4: \n\t\treturn 24\n\tif r == n - 5: \n\t\treturn 120\n\tif r == n - 6: \n\t\treturn 720\n\tif r == n - 7: \n\t\treturn 5040\n\tif r == n - 8: \n\t\treturn 40320\n\tif r == n - 9: \n\t\treturn 362880\n\tif r == n - 10: \n\t\treturn 3628800\n\tif r == n - 11: \n\t\treturn 39916800\n\tif r == n - 12: \n\t\treturn 479001600\n\tif r == n - 13: \n\t\treturn 6227020800\n\tif r == n - 14: \n\t\treturn 87178291200\n\tif r == n - 15: \n\t\treturn 1307674368000\n\tif r == n - 16: \n\t\treturn 20922789888000\n\tif r == n - 17: \n\t\treturn 355687428096000\n\tif r == n - 18: \n\t\treturn 6402373705728000\n\tif r == n - 19: \n\t\treturn 12164510040"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn min(1 + subset(ar, n-1), subset(ar, n-2)) \n\ndef min_subset(arr):\n\tn = len(arr)\n\tdp = [0 for i in range(n+1)]\n\tfor i in range(1, n+1):\n\t\tif arr[i-1] == 1:\n\t\t\tdp[i] = dp[i-1] + 1\n\t\telse:\n\t\t\tdp[i] = min(dp[i-1] + 1, dp[i-2])\n\treturn dp[n]\n\ndef min_subset_rec(arr):\n\tn = len(arr)\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\tif arr[0] == 0 and arr[1] == 1:\n\t\t\treturn 1 + min_subset_rec(arr[2:])\n\t\telif arr[0] == 1 and arr[1] == 0:\n\t\t\treturn min(1 + min_subset_rec(arr[2:]), min_subset_rec(arr[1:]))\n\t\telse:\n\t\t\treturn min_subset_rec(arr[1:])\n\ndef min_subset_dp(arr):\n\tn = len(arr)\n\tdp = [0 for i in range(n+1)]\n\tfor i in range(1, n+1):\n\t\tif arr[i-1] == 0:\n\t\t\tdp[i] = dp[i-1]\n\t\telse:\n\t\t\tif i >= 2 and arr[i-2] == 0:\n\t\t\t\tdp[i] = min(dp[i-1] + 1, dp[i-2])\n\t\t\telse:\n\t\t\t\tdp[i] = dp[i-1] + 1\n\treturn dp[n]\n\ndef min_subset_rec", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn dp[n]\n\ndef min_subset_rec(arr):\n\tn = len(arr)\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\tif arr[0] == 0 and arr[1] == 1:\n\t\t\treturn 1 + min_subset_rec(arr[2:])\n\t\telif arr[0] == 1 and arr[1] == 0:\n\t\t\treturn min(1 + min_subset_rec(arr[2:]), min_subset_rec(arr[1:]))\n\t\telse:\n\t\t\treturn min_subset_rec(arr[1:])\n\ndef min_subset_dp(arr):\n\tn = len(arr)\n\tdp = [0 for i in range(n+1)]\n\tfor i in range(1, n+1):\n\t\tif arr[i-1] == 0:\n\t\t\tdp[i] = dp[i-1]\n\t\telse:\n\t\t\tif i >= 2 and arr[i-2] == 0:\n\t\t\t\tdp[i] = min(dp[i-1] + 1, dp[i-2])\n\t\t\telse:\n\t\t\t\tdp[i] = dp[i-1] + 1\n\treturn dp[n]\n\ndef min_subset_rec"}
{"ID": 354, "source": "MBPP:955", "prompt": "\"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n\tsum = 0\n\tfor i in range(1, n/2):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum > n\n\n\"\"\"\nWrite a function to find out, if the given number is deficient.\n\"\"\"\ndef is_deficient(n):\n\tsum = 0\n\tfor i in range(1, n/2):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum < n\n\n\"\"\"\nWrite a function to find out, if the given number is perfect.\n\"\"\"\ndef is_perfect(n):\n\tsum = 0\n\tfor i in range(1, n/2):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum == n\n\n\"\"\"\nWrite a function to find out, if the given number is prime.\n\"\"\"\ndef is_prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2, n/2):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to find out, if the given number is composite.\n\"\"\"\ndef is_composite(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2, n/2):\n\t\tif n % i == 0:\n\t\t\treturn True\n\treturn False\n\n\"\"\"\nWrite a function to find out, if the given number is even.\n\"\"\"\ndef is_even(n):\n\treturn n % 2 == 0\n\n\"\"\"\nWrite a function to find out, if the given number is odd.\n\"\"\"\ndef is_odd(n):\n\treturn n % 2 != 0\n\n\"\"\"\nWrite a function to find out, if the given number is palindrome.\n\"\"\"\ndef is_palindrome(n):\n\treturn str(n) == str(n)[::-1]\n\n\"\"\"\nWrite a function to find out, if the given number is a power of 2.\n\"\"\"\ndef is_power_of_2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\tfor i in range(1, n/2):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum > n\n\n\"\"\"\nWrite a function to find out, if the given number is deficient.\n\"\"\"\ndef is_deficient(n):\n\tsum = 0\n\tfor i in range(1, n/2):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum < n\n\n\"\"\"\nWrite a function to find out, if the given number is perfect.\n\"\"\"\ndef is_perfect(n):\n\tsum = 0\n\tfor i in range(1, n/2):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\treturn sum == n\n\n\"\"\"\nWrite a function to find out, if the given number is prime.\n\"\"\"\ndef is_prime(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2, n/2):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to find out, if the given number is composite.\n\"\"\"\ndef is_composite(n):\n\tif n == 1:\n\t\treturn False\n\tfor i in range(2, n/2):\n\t\tif n % i == 0:\n\t\t\treturn True\n\treturn False\n\n\"\"\"\nWrite a function to find out, if the given number is even."}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\treturn n.bit_length() - 1\n\nprint(get_First_Set_Bit_Pos(10))\nprint(get_First_Set_Bit_Pos(15))\nprint(get_First_Set_Bit_Pos(16))\nprint(get_First_Set_Bit_Pos(17))\nprint(get_First_Set_Bit_Pos(18))\nprint(get_First_Set_Bit_Pos(19))\nprint(get_First_Set_Bit_Pos(20))\nprint(get_First_Set_Bit_Pos(21))\nprint(get_First_Set_Bit_Pos(22))\nprint(get_First_Set_Bit_Pos(23))\nprint(get_First_Set_Bit_Pos(24))\nprint(get_First_Set_Bit_Pos(25))\nprint(get_First_Set_Bit_Pos(26))\nprint(get_First_Set_Bit_Pos(27))\nprint(get_First_Set_Bit_Pos(28))\nprint(get_First_Set_Bit_Pos(29))\nprint(get_First_Set_Bit_Pos(30))\nprint(get_First_Set_Bit_Pos(31))\nprint(get_First_Set_Bit_Pos(32))\nprint(get_First_Set_Bit_Pos(33))\nprint(get_First_Set_Bit_Pos(34))\nprint(get_First_Set_Bit_Pos(35))\nprint(get_First_Set_Bit_Pos(36))\nprint(get_First_Set_Bit_Pos(37))\nprint(get_First_Set_Bit_Pos(38))\nprint(get_First_Set_Bit_Pos(39))\nprint(get_First_Set_Bit_Pos(40))\nprint(get_First_Set_Bit_Pos(41))\nprint(get_First_Set_Bit_Pos(42))\nprint(get_First_Set_Bit_Pos(43))\nprint(get_First_Set_Bit_Pos(44))\nprint(get_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(get_First_Set_Bit_Pos(10))\nprint(get_First_Set_Bit_Pos(15))\nprint(get_First_Set_Bit_Pos(16))\nprint(get_First_Set_Bit_Pos(17))\nprint(get_First_Set_Bit_Pos(18))\nprint(get_First_Set_Bit_Pos(19))\nprint(get_First_Set_Bit_Pos(20))\nprint(get_First_Set_Bit_Pos(21))\nprint(get_First_Set_Bit_Pos(22))\nprint(get_First_Set_Bit_Pos(23))\nprint(get_First_Set_Bit_Pos(24))\nprint(get_First_Set_Bit_Pos(25))\nprint(get_First_Set_Bit_Pos(26))\nprint(get_First_Set_Bit_Pos(27))\nprint(get_First_Set_Bit_Pos(28))\nprint(get_First_Set_Bit_Pos(29))\nprint(get_First_Set_Bit_Pos(30))\nprint(get_First_Set_Bit_Pos(31))\nprint(get_First_Set_Bit_Pos(32))\nprint(get_First_Set_Bit_Pos(33))\nprint(get_First_Set_Bit_Pos(34))\nprint(get_First_Set_Bit_Pos(35))\nprint(get_First_Set_Bit_Pos(36))\nprint(get_First_Set_Bit_Pos(37))\nprint(get_First_Set_Bit_Pos(38))\nprint(get_First_Set_Bit_Pos(39))\nprint(get_First_Set_Bit_Pos(40))\nprint(get_First_Set_Bit_Pos(41))\nprint(get_First_Set_Bit_Pos(42))\nprint(get_First_Set_Bit_Pos(43))\nprint(get_First_Set_Bit_Pos(44))\nprint(get_"}
{"ID": 363, "source": "MBPP:964", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s): \n\treturn len(s) % 2 == 0\n\nprint(word_len(\"python\"))\nprint(word_len(\"java\"))\nprint(word_len(\"c++\"))\nprint(word_len(\"php\"))\nprint(word_len(\"html\"))\nprint(word_len(\"css\"))\nprint(word_len(\"javascript\"))\nprint(word_len(\"typescript\"))\nprint(word_len(\"angular\"))\nprint(word_len(\"react\"))\nprint(word_len(\"vue\"))\nprint(word_len(\"sql\"))\nprint(word_len(\"mongodb\"))\nprint(word_len(\"mysql\"))\nprint(word_len(\"json\"))\nprint(word_len(\"xml\"))\nprint(word_len(\"yaml\"))\nprint(word_len(\"markdown\"))\nprint(word_len(\"sass\"))\nprint(word_len(\"scss\"))\nprint(word_len(\"less\"))\nprint(word_len(\"stylus\"))\nprint(word_len(\"bootstrap\"))\nprint(word_len(\"materialize\"))\nprint(word_len(\"bulma\"))\nprint(word_len(\"semantic\"))\nprint(word_len(\"django\"))\nprint(word_len(\"flask\"))\nprint(word_len(\"pyramid\"))\nprint(word_len(\"laravel\"))\nprint(word_len(\"codeigniter\"))\nprint(word_len(\"cakephp\"))\nprint(word_len(\"ruby\"))\nprint(word_len(\"rails\"))\nprint(word_len(\"sinatra\"))\nprint(word_len(\"nodejs\"))\nprint(word_len(\"expressjs\"))\nprint(word_len(\"nestjs\"))\nprint(word_len(\"ionic\"))\nprint(word_len(\"reactnative\"))\nprint(word_len(\"angularjs\"))\nprint(word_len(\"vuejs\"))\nprint(word_len(\"emberjs\"))\nprint(word_len(\"backbonejs\"))\nprint(word_len(\"android\"))\nprint(word_len(\"ios\"))\nprint(word_len(\"javafx\"))\nprint(word_len(\"kotlin\"))\nprint(word_len(\"swift\"))\nprint(word_len(\"objectivec\"))\nprint(word_len(\"c#\"))\nprint(word_len(\"f#\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(word_len(\"python\"))\nprint(word_len(\"java\"))\nprint(word_len(\"c++\"))\nprint(word_len(\"php\"))\nprint(word_len(\"html\"))\nprint(word_len(\"css\"))\nprint(word_len(\"javascript\"))\nprint(word_len(\"typescript\"))\nprint(word_len(\"angular\"))\nprint(word_len(\"react\"))\nprint(word_len(\"vue\"))\nprint(word_len(\"sql\"))\nprint(word_len(\"mongodb\"))\nprint(word_len(\"mysql\"))\nprint(word_len(\"json\"))\nprint(word_len(\"xml\"))\nprint(word_len(\"yaml\"))\nprint(word_len(\"markdown\"))\nprint(word_len(\"sass\"))\nprint(word_len(\"scss\"))\nprint(word_len(\"less\"))\nprint(word_len(\"stylus\"))\nprint(word_len(\"bootstrap\"))\nprint(word_len(\"materialize\"))\nprint(word_len(\"bulma\"))\nprint(word_len(\"semantic\"))\nprint(word_len(\"django\"))\nprint(word_len(\"flask\"))\nprint(word_len(\"pyramid\"))\nprint(word_len(\"laravel\"))\nprint(word_len(\"codeigniter\"))\nprint(word_len(\"cakephp\"))\nprint(word_len(\"ruby\"))\nprint(word_len(\"rails\"))\nprint(word_len(\"sinatra\"))\nprint(word_len(\"nodejs\"))\nprint(word_len(\"expressjs\"))\nprint(word_len(\"nestjs\"))\nprint(word_len(\"ionic\"))\nprint(word_len(\"reactnative\"))\nprint(word_len(\"angularjs\"))\nprint(word_len(\"vuejs\"))\nprint(word_len(\"emberjs\"))\nprint(word_len(\"backbonejs\"))\nprint(word_len(\"android\"))\nprint(word_len(\"ios\"))\nprint(word_len(\"javafx\"))\nprint(word_len(\"kotlin\"))\nprint(word_len(\"swift\"))\nprint(word_len(\"objectivec\"))\nprint(word_len(\"c#\"))\nprint(word_len(\"f#\"))"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(text):\n\treturn text.title().replace(\"_\", \" \")\n\n\"\"\"\nWrite a function to convert camel case string to kebab case string.\n\"\"\"\ndef camel_to_kebab(text):\n\treturn text.lower().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to convert kebab case string to camel case string.\n\"\"\"\ndef kebab_to_camel(text):\n\treturn text.title().replace(\"-\", \" \")\n\n\"\"\"\nWrite a function to convert snake case string to kebab case string.\n\"\"\"\ndef snake_to_kebab(text):\n\treturn text.replace(\"_\", \"-\")\n\n\"\"\"\nWrite a function to convert kebab case string to snake case string.\n\"\"\"\ndef kebab_to_snake(text):\n\treturn text.replace(\"-\", \"_\")\n\n\"\"\"\nWrite a function to convert camel case string to pascal case string.\n\"\"\"\ndef camel_to_pascal(text):\n\treturn text.title()\n\n\"\"\"\nWrite a function to convert pascal case string to camel case string.\n\"\"\"\ndef pascal_to_camel(text):\n\treturn text.lower().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to convert snake case string to pascal case string.\n\"\"\"\ndef snake_to_pascal(text):\n\treturn text.title().replace(\"_\", \"\")\n\n\"\"\"\nWrite a function to convert pascal case string to snake case string.\n\"\"\"\ndef pascal_to_snake(text):\n\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to convert kebab case string to pascal case string.\n\"\"\"\ndef kebab_to_pascal(text):\n\treturn text.title().replace(\"-\", \"\")\n\n\"\"\"\nWrite a function to convert pascal case string to kebab case string.\n\"\"\"\ndef pascal", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(text):\n\treturn text.title().replace(\"_\", \" \")\n\n\"\"\"\nWrite a function to convert camel case string to kebab case string.\n\"\"\"\ndef camel_to_kebab(text):\n\treturn text.lower().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to convert kebab case string to camel case string.\n\"\"\"\ndef kebab_to_camel(text):\n\treturn text.title().replace(\"-\", \" \")\n\n\"\"\"\nWrite a function to convert snake case string to kebab case string.\n\"\"\"\ndef snake_to_kebab(text):\n\treturn text.replace(\"_\", \"-\")\n\n\"\"\"\nWrite a function to convert kebab case string to snake case string.\n\"\"\"\ndef kebab_to_snake(text):\n\treturn text.replace(\"-\", \"_\")\n\n\"\"\"\nWrite a function to convert camel case string to pascal case string.\n\"\"\"\ndef camel_to_pascal(text):\n\treturn text.title()\n\n\"\"\"\nWrite a function to convert pascal case string to camel case string.\n\"\"\"\ndef pascal_to_camel(text):\n\treturn text.lower().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to convert snake case string to pascal case string.\n\"\"\"\ndef snake_to_pascal(text):\n\treturn text.title().replace(\"_\", \"\")\n\n\"\"\"\nWrite a function to convert pascal case string to snake case string.\n\"\"\"\ndef pascal_to_snake(text):\n\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to convert kebab case string to pascal case string.\n\"\"\"\ndef kebab_to_pascal(text):\n\treturn text.title().replace(\"-\", \"\")\n\n\"\"\"\nWrite a function to convert pascal case string to kebab case string.\n\"\"\"\ndef pascal"}
{"ID": 366, "source": "MBPP:967", "prompt": "\"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\t", "predict": "<s> \"\"\"\nWrite a python function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string): \n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tfor i in vowels:\n\t\tif i not in string:\n\t\t\treturn False\n\treturn True\nprint(check(\"aeiou\"))\nprint(check(\"aeioua\"))\nprint(check(\"aeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check(\"aeiou\"))\nprint(check(\"aeioua\"))\nprint(check(\"aeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(check(\""}
{"ID": 367, "source": "MBPP:968", "prompt": "\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n\tmax_val = 0\n\tfor i in range(N):\n\t\tval = A*i + B\n\t\tif val > max_val:\n\t\t\tmax_val = val\n\treturn max_val\n\nprint(floor_Max(2,3,10))\nprint(floor_Max(3,2,10))\nprint(floor_Max(2,3,100))\nprint(floor_Max(3,2,100))\nprint(floor_Max(2,3,1000))\nprint(floor_Max(3,2,1000))\nprint(floor_Max(2,3,10000))\nprint(floor_Max(3,2,10000))\nprint(floor_Max(2,3,100000))\nprint(floor_Max(3,2,100000))\nprint(floor_Max(2,3,1000000))\nprint(floor_Max(3,2,1000000))\nprint(floor_Max(2,3,10000000))\nprint(floor_Max(3,2,10000000))\nprint(floor_Max(2,3,100000000))\nprint(floor_Max(3,2,100000000))\nprint(floor_Max(2,3,1000000000))\nprint(floor_Max(3,2,1000000000))\nprint(floor_Max(2,3,10000000000))\nprint(floor_Max(3,2,10000000000))\nprint(floor_Max(2,3,100000000000))\nprint(floor_Max(3,2,100000000000))\nprint(floor_Max(2,3,1000000000000))\nprint(floor_Max(3,2,1000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(floor_Max(2,3,10))\nprint(floor_Max(3,2,10))\nprint(floor_Max(2,3,100))\nprint(floor_Max(3,2,100))\nprint(floor_Max(2,3,1000))\nprint(floor_Max(3,2,1000))\nprint(floor_Max(2,3,10000))\nprint(floor_Max(3,2,10000))\nprint(floor_Max(2,3,100000))\nprint(floor_Max(3,2,100000))\nprint(floor_Max(2,3,1000000))\nprint(floor_Max(3,2,1000000))\nprint(floor_Max(2,3,10000000))\nprint(floor_Max(3,2,10000000))\nprint(floor_Max(2,3,100000000))\nprint(floor_Max(3,2,100000000))\nprint(floor_Max(2,3,1000000000))\nprint(floor_Max(3,2,1000000000))\nprint(floor_Max(2,3,10000000000))\nprint(floor_Max(3,2,10000000000))\nprint(floor_Max(2,3,100000000000))\nprint(floor_Max(3,2,100000000000))\nprint(floor_Max(2,3,1000000000000))\nprint(floor_Max(3,2,1000000"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\tcount = 0\n\tfor i in range(1, n+1) : \n\t\tif i % a == 0 or i % b == 0 or i % c == 0 : \n\t\t\tcount += 1\n\treturn count\n\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 4, 5, 6))\nprint(maximum_segments(10, 1, 2, 3))\nprint(maximum_segments(10, 1, 2, 4))\nprint(maximum_segments(10, 1, 2, 5))\nprint(maximum_segments(10, 1, 2, 6))\nprint(maximum_segments(10, 1, 2, 7))\nprint(maximum_segments(10, 1, 2, 8))\nprint(maximum_segments(10, 1, 2, 9))\nprint(maximum_segments(10, 1, 2, 10))\nprint(maximum_segments(10, 1, 2, 11))\nprint(maximum_segments(10, 1, 2, 12))\nprint(maximum_segments(10, 1, 2, 13))\nprint(maximum_segments(10, 1, 2, 14))\nprint(maximum_segments(10, 1, 2, 15))\nprint(maximum_segments(10, 1, 2, 16))\nprint(maximum_segments(10, 1, 2, 17))\nprint(maximum_segments(10, 1, 2, 18))\nprint(maximum_segments(10, 1, 2, 19))\nprint(maximum_segments(10, 1, 2, 20))\nprint(maximum_segments(10, 1, 2, 21))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 4, 5, 6))\nprint(maximum_segments(10, 1, 2, 3))\nprint(maximum_segments(10, 1, 2, 4))\nprint(maximum_segments(10, 1, 2, 5))\nprint(maximum_segments(10, 1, 2, 6))\nprint(maximum_segments(10, 1, 2, 7))\nprint(maximum_segments(10, 1, 2, 8))\nprint(maximum_segments(10, 1, 2, 9))\nprint(maximum_segments(10, 1, 2, 10))\nprint(maximum_segments(10, 1, 2, 11))\nprint(maximum_segments(10, 1, 2, 12))\nprint(maximum_segments(10, 1, 2, 13))\nprint(maximum_segments(10, 1, 2, 14))\nprint(maximum_segments(10, 1, 2, 15))\nprint(maximum_segments(10, 1, 2, 16))\nprint(maximum_segments(10, 1, 2, 17))\nprint(maximum_segments(10, 1, 2, 18))\nprint(maximum_segments(10, 1, 2, 19))\nprint(maximum_segments(10, 1, 2, 20))\nprint(maximum_segments(10, 1, 2, 21))\n"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t# Write your code here\n\tfor i in range(len(M)):\n\t\tfor j in range(i+1, len(M)):\n\t\t\tif sum(M[i]) > sum(M[j]):\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\treturn M\n\n\n# Test Cases\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n# Test Cases\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, "}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\tcount = {}\n\tfor word in words:\n\t\tif word in count:\n\t\t\tcount[word] += 1\n\t\telse:\n\t\t\tcount[word] = 1\n\treturn count\n\nprint(count_common([\"hello\", \"world\", \"hello\"]))\n\n\"\"\"\nWrite a function to count the number of vowels in a string.\n\"\"\"\ndef count_vowels(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char in \"aeiou\":\n\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels(\"hello\"))\n\n\"\"\"\nWrite a function to count the number of consonants in a string.\n\"\"\"\ndef count_consonants(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char not in \"aeiou\":\n\t\t\tcount += 1\n\treturn count\n\nprint(count_consonants(\"hello\"))\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count the number of lines in a file.\n\"\"\"\ndef count_lines(file):\n\tcount = 0\n\tfor line in file:\n\t\tcount += 1\n\treturn count\n\nprint(count_lines(open(\"test.txt\")))\n\n\"\"\"\nWrite a function to count the number of characters in a string.\n\"\"\"\ndef count_chars(string):\n\tcount = 0\n\tfor char in string:\n\t\tcount += 1\n\treturn count\n\nprint(count_chars(\"hello\"))\n\n\"\"\"\nWrite a function to count the number of times a word appears in a string.\n\"\"\"\ndef count_word(string, word):\n\tcount = 0\n\tfor char in string:\n\t\tif char == word:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tcount[word] = 1\n\treturn count\n\nprint(count_common([\"hello\", \"world\", \"hello\"]))\n\n\"\"\"\nWrite a function to count the number of vowels in a string.\n\"\"\"\ndef count_vowels(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char in \"aeiou\":\n\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels(\"hello\"))\n\n\"\"\"\nWrite a function to count the number of consonants in a string.\n\"\"\"\ndef count_consonants(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char not in \"aeiou\":\n\t\t\tcount += 1\n\treturn count\n\nprint(count_consonants(\"hello\"))\n\n\"\"\"\nWrite a function to count the number of words in a string.\n\"\"\"\ndef count_words(string):\n\tcount = 0\n\tfor char in string:\n\t\tif char == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\nprint(count_words(\"hello world\"))\n\n\"\"\"\nWrite a function to count the number of lines in a file.\n\"\"\"\ndef count_lines(file):\n\tcount = 0\n\tfor line in file:\n\t\tcount += 1"}
{"ID": 378, "source": "MBPP:15", "prompt": "\"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a string at lowercase letters.\n\"\"\"\ndef split_lowerstring(text):\n\t\"\"\"\n\tReturns a list of strings split at lowercase letters.\n\t\"\"\"\n\treturn [word for word in text.split()]\n\ndef test_split_lowerstring():\n\t\"\"\"\n\tTest function for split_lowerstring.\n\t\"\"\"\n\tassert split_lowerstring(\"Hello World\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert split_lowerstring(\"Hello World\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n\tassert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to find sequences of uppercase letters joined with a hyphen.\n\"\"\"\ndef text_uppercase_hyphen(text):\n\treturn text.upper().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to find sequences of titlecase words joined with a space.\n\"\"\"\ndef text_titlecase_space(text):\n\treturn text.title().replace(\"_\", \" \")\n\n\"\"\"\nWrite a function to find sequences of camelcase words.\n\"\"\"\ndef text_camelcase(text):\n\treturn text.title().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to find sequences of snakecase words.\n\"\"\"\ndef text_snakecase(text):\n\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to find sequences of kebabcase words.\n\"\"\"\ndef text_kebabcase(text):\n\treturn text.lower().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to find sequences of traincase words.\n\"\"\"\ndef text_traincase(text):\n\treturn text.title().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to find sequences of wordcase words.\n\"\"\"\ndef text_wordcase(text):\n\treturn text.title().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to find sequences of capitalcase words.\n\"\"\"\ndef text_capitalcase(text):\n\treturn text.upper().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to find sequences of dotcase words.\n\"\"\"\ndef text_dotcase(text):\n\treturn text.lower().replace(\" \", \".\")\n\n\"\"\"\nWrite a function to find sequences of pathcase words.\n\"\"\"\ndef text_pathcase(text):\n\treturn text.lower().replace(\" \", \"/\")\n\n\"\"\"\nWrite a function to find sequences of namespacecase words.\n\"\"\"\ndef text_namespacecase(text):\n\treturn text.lower().replace(\" \", \"::\")\n\n\"\"\"\nWrite a function to find sequences of Pascalcase words.\n\"\"\"\ndef text_pascalcase(text):\n\treturn text.title().replace(\" \",", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to find sequences of uppercase letters joined with a hyphen.\n\"\"\"\ndef text_uppercase_hyphen(text):\n\treturn text.upper().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to find sequences of titlecase words joined with a space.\n\"\"\"\ndef text_titlecase_space(text):\n\treturn text.title().replace(\"_\", \" \")\n\n\"\"\"\nWrite a function to find sequences of camelcase words.\n\"\"\"\ndef text_camelcase(text):\n\treturn text.title().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to find sequences of snakecase words.\n\"\"\"\ndef text_snakecase(text):\n\treturn text.lower().replace(\" \", \"_\")\n\n\"\"\"\nWrite a function to find sequences of kebabcase words.\n\"\"\"\ndef text_kebabcase(text):\n\treturn text.lower().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to find sequences of traincase words.\n\"\"\"\ndef text_traincase(text):\n\treturn text.title().replace(\" \", \"-\")\n\n\"\"\"\nWrite a function to find sequences of wordcase words.\n\"\"\"\ndef text_wordcase(text):\n\treturn text.title().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to find sequences of capitalcase words.\n\"\"\"\ndef text_capitalcase(text):\n\treturn text.upper().replace(\" \", \"\")\n\n\"\"\"\nWrite a function to find sequences of dotcase words.\n\"\"\"\ndef text_dotcase(text):\n\treturn text.lower().replace(\" \", \".\")\n\n\"\"\"\nWrite a function to find sequences of pathcase words.\n\"\"\"\ndef text_pathcase(text):\n\treturn text.lower().replace(\" \", \"/\")\n\n\"\"\"\nWrite a function to find sequences of namespacecase words.\n\"\"\"\ndef text_namespacecase(text):\n\treturn text.lower().replace(\" \", \"::\")\n\n\"\"\"\nWrite a function to find sequences of Pascalcase words.\n\"\"\"\ndef text_pascalcase(text):"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\treturn a * 4\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a * b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, h):\n\treturn (a * h) / 2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * (r ** 2)\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(a, h):\n\treturn a * h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\treturn ((a + b) * h) / 2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a + b + c) / 2\n\treturn (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(a, h):\n\treturn (5 * a * h) / 4\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(a, h):\n\treturn (3 * (3 ** 0.5) * a * h) / 2\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(a, h):\n\treturn (7 * a * h) / 4\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef octagon_area(a, h):\n\treturn (8 * a *", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a * 4\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a * b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, h):\n\treturn (a * h) / 2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * (r ** 2)\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(a, h):\n\treturn a * h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\treturn ((a + b) * h) / 2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):"}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "<s> \"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, \"\")\n\treturn string\n\nprint(remove_dirty_chars(\"hello\", \"hle\"))\nprint(remove_dirty_chars(\"hello\", \"hlel\"))\nprint(remove_dirty_chars(\"hello\", \"hel\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_dirty_chars(\"hello\", \"hle\"))\nprint(remove_dirty_chars(\"hello\", \"hlel\"))\nprint(remove_dirty_chars(\"hello\", \"hel\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))\nprint(remove_dirty_chars(\"hello\", \"hlello\"))"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\treturn x % 2 == 0 and x % 5 == 0\n\nprint(is_woodall(10))\nprint(is_woodall(15))\nprint(is_woodall(20))\nprint(is_woodall(25))\nprint(is_woodall(30))\nprint(is_woodall(35))\nprint(is_woodall(40))\nprint(is_woodall(45))\nprint(is_woodall(50))\nprint(is_woodall(55))\nprint(is_woodall(60))\nprint(is_woodall(65))\nprint(is_woodall(70))\nprint(is_woodall(75))\nprint(is_woodall(80))\nprint(is_woodall(85))\nprint(is_woodall(90))\nprint(is_woodall(95))\nprint(is_woodall(100))\nprint(is_woodall(105))\nprint(is_woodall(110))\nprint(is_woodall(115))\nprint(is_woodall(120))\nprint(is_woodall(125))\nprint(is_woodall(130))\nprint(is_woodall(135))\nprint(is_woodall(140))\nprint(is_woodall(145))\nprint(is_woodall(150))\nprint(is_woodall(155))\nprint(is_woodall(160))\nprint(is_woodall(165))\nprint(is_woodall(170))\nprint(is_woodall(175))\nprint(is_woodall(180))\nprint(is_woodall(185))\nprint(is_woodall(190))\nprint(is_woodall(195))\nprint(is_woodall(200))\nprint(is_woodall(205))\nprint(is_woodall(210))\nprint(is_woodall(215))\nprint(is_woodall(2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_woodall(10))\nprint(is_woodall(15))\nprint(is_woodall(20))\nprint(is_woodall(25))\nprint(is_woodall(30))\nprint(is_woodall(35))\nprint(is_woodall(40))\nprint(is_woodall(45))\nprint(is_woodall(50))\nprint(is_woodall(55))\nprint(is_woodall(60))\nprint(is_woodall(65))\nprint(is_woodall(70))\nprint(is_woodall(75))\nprint(is_woodall(80))\nprint(is_woodall(85))\nprint(is_woodall(90))\nprint(is_woodall(95))\nprint(is_woodall(100))\nprint(is_woodall(105))\nprint(is_woodall(110))\nprint(is_woodall(115))\nprint(is_woodall(120))\nprint(is_woodall(125))\nprint(is_woodall(130))\nprint(is_woodall(135))\nprint(is_woodall(140))\nprint(is_woodall(145))\nprint(is_woodall(150))\nprint(is_woodall(155))\nprint(is_woodall(160))\nprint(is_woodall(165))\nprint(is_woodall(170))\nprint(is_woodall(175))\nprint(is_woodall(180))\nprint(is_woodall(185))\nprint(is_woodall(190))\nprint(is_woodall(195))\nprint(is_woodall(200))\nprint(is_woodall(205))\nprint(is_woodall(210))\nprint(is_woodall(215))\nprint(is_woodall(2"}
{"ID": 385, "source": "MBPP:22", "prompt": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\n\"\"\"\ndef find_first_duplicate(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(len(nums)):\n\t\tif nums[i] in nums[i+1:]:\n\t\t\treturn nums[i]\n\treturn -1\n\n\n\"\"\"\nGiven an array of integers, every element appears twice except for one. Find that single one.\n\"\"\"\ndef single_number(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(set(nums)) * 2 - sum(nums)\n\n\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space.\nIn other words, find the lowest positive integer that does not exist in the array.\nThe array can contain duplicates and negative numbers as well.\n\"\"\"\ndef find_first_missing_positive(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tn = len(nums)\n\tfor i in range(n):\n\t\twhile 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n\t\t\tnums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\tfor i in range(n):\n\t\tif nums[i] != i + 1:\n\t\t\treturn i + 1\n\treturn n + 1\n\n\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space.\nIn other words, find the lowest positive integer that does not exist in the array.\nThe array can contain duplicates and negative numbers as well.\n\"\"\"\ndef find_first_missing_positive(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tn = len(nums)\n\tfor i in range(n):\n\t\twhile 1 <= nums[i] <= n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(set(nums)) * 2 - sum(nums)\n\n\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space.\nIn other words, find the lowest positive integer that does not exist in the array.\nThe array can contain duplicates and negative numbers as well.\n\"\"\"\ndef find_first_missing_positive(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tn = len(nums)\n\tfor i in range(n):\n\t\twhile 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n\t\t\tnums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\tfor i in range(n):\n\t\tif nums[i] != i + 1:\n\t\t\treturn i + 1\n\treturn n + 1\n\n\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space.\nIn other words, find the lowest positive integer that does not exist in the array.\nThe array can contain duplicates and negative numbers as well.\n\"\"\"\ndef find_first_missing_positive(nums):\n\t\"\"\"\n\t:type nums: List[int]"}
{"ID": 389, "source": "MBPP:26", "prompt": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple list has all k elements.\n\"\"\"\ndef check_k_elements(test_list, K):\n\t\"\"\"\n\tReturn True if the given list has all k elements.\n\t\"\"\"\n\treturn len(test_list) == K\n\ndef test_function(test_case):\n\ttest_list = test_case[0]\n\tK = test_case[1]\n\tsolution = test_case[2]\n\toutput = check_k_elements(test_list, K)\n\tif output == solution:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\ntest_function([(1, 2, 3, 4, 5), 5, True])\ntest_function([(1, 2, 3, 4, 5), 6, False])\ntest_function([(1, 2, 3, 4, 5), 4, False])\ntest_function([(1, 2, 3, 4, 5), 3, False])\ntest_function([(1, 2, 3, 4, 5), 2, False])\ntest_function([(1, 2, 3, 4, 5), 1, False])\ntest_function([(1, 2, 3, 4, 5), 0, False])\ntest_function([(1, 2, 3, 4, 5), -1, False])\ntest_function([(1, 2, 3, 4, 5), -2, False])\ntest_function([(1, 2, 3, 4, 5), -3, False])\ntest_function([(1, 2, 3, 4, 5), -4, False])\ntest_function([(1, 2, 3, 4, 5), -5, False])\ntest_function([(1, 2, 3, 4, 5), -6, False])\ntest_function([(1, 2, 3, 4, 5), -7, False])\ntest_function([(1, 2, 3, 4, 5), -8, False])\ntest_function([(1, 2, 3, 4, 5), -", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_function([(1, 2, 3, 4, 5), 5, True])\ntest_function([(1, 2, 3, 4, 5), 6, False])\ntest_function([(1, 2, 3, 4, 5), 4, False])\ntest_function([(1, 2, 3, 4, 5), 3, False])\ntest_function([(1, 2, 3, 4, 5), 2, False])\ntest_function([(1, 2, 3, 4, 5), 1, False])\ntest_function([(1, 2, 3, 4, 5), 0, False])\ntest_function([(1, 2, 3, 4, 5), -1, False])\ntest_function([(1, 2, 3, 4, 5), -2, False])\ntest_function([(1, 2, 3, 4, 5), -3, False])\ntest_function([(1, 2, 3, 4, 5), -4, False])\ntest_function([(1, 2, 3, 4, 5), -5, False])\ntest_function([(1, 2, 3, 4, 5), -6, False])\ntest_function([(1, 2, 3, 4, 5), -7, False])\ntest_function([(1, 2, 3, 4, 5), -8, False])\ntest_function([(1, 2, 3, 4, 5), -"}
{"ID": 396, "source": "MBPP:33", "prompt": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert a decimal number to binary number.\n\"\"\"\ndef decimal_To_Binary(N): \n\treturn bin(N).replace(\"0b\", \"\") \n\nprint(decimal_To_Binary(10))\nprint(decimal_To_Binary(15))\nprint(decimal_To_Binary(20))\nprint(decimal_To_Binary(31))\nprint(decimal_To_Binary(42))\nprint(decimal_To_Binary(53))\nprint(decimal_To_Binary(64))\nprint(decimal_To_Binary(75))\nprint(decimal_To_Binary(86))\nprint(decimal_To_Binary(97))\nprint(decimal_To_Binary(108))\nprint(decimal_To_Binary(119))\nprint(decimal_To_Binary(130))\nprint(decimal_To_Binary(141))\nprint(decimal_To_Binary(152))\nprint(decimal_To_Binary(163))\nprint(decimal_To_Binary(174))\nprint(decimal_To_Binary(185))\nprint(decimal_To_Binary(196))\nprint(decimal_To_Binary(207))\nprint(decimal_To_Binary(218))\nprint(decimal_To_Binary(229))\nprint(decimal_To_Binary(240))\nprint(decimal_To_Binary(251))\nprint(decimal_To_Binary(262))\nprint(decimal_To_Binary(273))\nprint(decimal_To_Binary(284))\nprint(decimal_To_Binary(295))\nprint(decimal_To_Binary(306))\nprint(decimal_To_Binary(317))\nprint(decimal_To_Binary(328))\nprint(decimal_To_Binary(339))\nprint(decimal_To_Binary(350))\nprint(decimal_To_Binary(361))\nprint(decimal_To_Binary(372))\nprint(decimal_To_Binary(383))\nprint(decimal", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(decimal_To_Binary(10))\nprint(decimal_To_Binary(15))\nprint(decimal_To_Binary(20))\nprint(decimal_To_Binary(31))\nprint(decimal_To_Binary(42))\nprint(decimal_To_Binary(53))\nprint(decimal_To_Binary(64))\nprint(decimal_To_Binary(75))\nprint(decimal_To_Binary(86))\nprint(decimal_To_Binary(97))\nprint(decimal_To_Binary(108))\nprint(decimal_To_Binary(119))\nprint(decimal_To_Binary(130))\nprint(decimal_To_Binary(141))\nprint(decimal_To_Binary(152))\nprint(decimal_To_Binary(163))\nprint(decimal_To_Binary(174))\nprint(decimal_To_Binary(185))\nprint(decimal_To_Binary(196))\nprint(decimal_To_Binary(207))\nprint(decimal_To_Binary(218))\nprint(decimal_To_Binary(229))\nprint(decimal_To_Binary(240))\nprint(decimal_To_Binary(251))\nprint(decimal_To_Binary(262))\nprint(decimal_To_Binary(273))\nprint(decimal_To_Binary(284))\nprint(decimal_To_Binary(295))\nprint(decimal_To_Binary(306))\nprint(decimal_To_Binary(317))\nprint(decimal_To_Binary(328))\nprint(decimal_To_Binary(339))\nprint(decimal_To_Binary(350))\nprint(decimal_To_Binary(361))\nprint(decimal_To_Binary(372))\nprint(decimal_To_Binary(383))\nprint(decimal"}
{"ID": 400, "source": "MBPP:37", "prompt": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a given mixed list of integers and strings.\n\"\"\"\ndef sort_mixed_list(mixed_list):\n\t\"\"\"\n\tSorts a list of integers and strings.\n\t\"\"\"\n\treturn sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n\ndef test_sort_mixed_list():\n\t\"\"\"\n\tTests for sort_mixed_list function.\n\t\"\"\"\n\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c']) == [1, 2, 3, 4, 5, 'a', 'b', 'c']\n\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c', 'd']) == [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd']\n\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c', 'd', 'e']) == [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']\n\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c', 'd', 'e', 'f']) == [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f']\n\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c', 'd', 'e', 'f', 'g']) == [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g']\n\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tassert sort_mixed_list([1, 3, 2, 5, 4, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tflat_list = [item for sublist in nums for item in sublist]\n\treturn collections.Counter(flat_list)\n\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists without using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfreq = {}\n\tfor sublist in nums:\n\t\tfor item in sublist:\n\t\t\tif item not in freq:\n\t\t\t\tfreq[item] = 1\n\t\t\telse:\n\t\t\t\tfreq[item] += 1\n\treturn freq\n\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module and print the elements with their frequency.\n\"\"\"\ndef freq_element(nums):\n\tfreq = collections.Counter(item for sublist in nums for item in sublist)\n\tfor key, value in freq.items():\n\t\tprint(f\"{key}: {value}\")\n\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists without using collections module and print the elements with their frequency.\n\"\"\"\ndef freq_element(nums):\n\tfreq = {}\n\tfor sublist in nums:\n\t\tfor item in sublist:\n\t\t\tif item not in freq:\n\t\t\t\tfreq[item] = 1\n\t\t\telse:\n\t\t\t\tfreq[item] += 1\n\tfor key, value in freq.items():\n\t\tprint(f\"{key}: {value}\")\n\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module and print the elements with their frequency in descending order.\n\"\"\"\ndef freq_element(nums):\n\tfreq = collections.Counter(item for sublist in nums for item in sublist)\n\tfor key, value in sorted(freq.items(), key=lambda x: x[1], reverse=True):\n\t\tprint(f\"{key}: {value}\")\n\n\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists without using collections module and print the elements with their", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "Write a function to find frequency of the elements in a given list of lists without using collections module and print the elements with their"}
{"ID": 404, "source": "MBPP:41", "prompt": "\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\ndef filter_evennumbers(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\n\"\"\"\nWrite a function to filter numbers greater than 10 using lambda function.\n\"\"\"\ndef filter_greaterthan(nums):\n\treturn list(filter(lambda x: x>10, nums))\n\n\"\"\"\nWrite a function to filter numbers less than 10 using lambda function.\n\"\"\"\ndef filter_lessthan(nums):\n\treturn list(filter(lambda x: x<10, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 using lambda function.\n\"\"\"\ndef filter_divisibleby3(nums):\n\treturn list(filter(lambda x: x%3==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 using lambda function.\n\"\"\"\ndef filter_divisibleby5(nums):\n\treturn list(filter(lambda x: x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 and 5 using lambda function.\n\"\"\"\ndef filter_divisibleby3and5(nums):\n\treturn list(filter(lambda x: x%3==0 and x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 or 5 using lambda function.\n\"\"\"\ndef filter_divisibleby3or5(nums):\n\treturn list(filter(lambda x: x%3==0 or x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 and not by 5 using lambda function.\n\"\"\"\ndef filter_divisibleby3notby5(nums):\n\treturn list(filter(lambda x: x%3==0 and x%5!=0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and not by 3 using lambda function.\n\"\"\"\ndef filter_divisibleby5notby3(nums):\n\treturn list(filter(lambda x: x%5==0 and x%3!=0, nums))\n\n\"\"\"\nWrite a function to filter numbers", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to filter numbers greater than 10 using lambda function.\n\"\"\"\ndef filter_greaterthan(nums):\n\treturn list(filter(lambda x: x>10, nums))\n\n\"\"\"\nWrite a function to filter numbers less than 10 using lambda function.\n\"\"\"\ndef filter_lessthan(nums):\n\treturn list(filter(lambda x: x<10, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 using lambda function.\n\"\"\"\ndef filter_divisibleby3(nums):\n\treturn list(filter(lambda x: x%3==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 using lambda function.\n\"\"\"\ndef filter_divisibleby5(nums):\n\treturn list(filter(lambda x: x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 and 5 using lambda function.\n\"\"\"\ndef filter_divisibleby3and5(nums):\n\treturn list(filter(lambda x: x%3==0 and x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 or 5 using lambda function.\n\"\"\"\ndef filter_divisibleby3or5(nums):\n\treturn list(filter(lambda x: x%3==0 or x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 3 and not by 5 using lambda function.\n\"\"\"\ndef filter_divisibleby3notby5(nums):\n\treturn list(filter(lambda x: x%3==0 and x%5!=0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and not by 3 using lambda function.\n\"\"\"\ndef filter_divisibleby5notby3(nums):\n\treturn list(filter(lambda x: x%5==0 and x%3!=0, nums))\n\n\"\"\"\nWrite a function to filter numbers"}
{"ID": 406, "source": "MBPP:43", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"[a-z]+_[a-z]+\"\n\tresult = re.findall(pattern, text)\n\treturn result\n\nif __name__ == '__main__':\n\tprint(text_match(\"hello_world\"))\n\tprint(text_match(\"hello_world_\"))\n\tprint(text_match(\"hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(text_match(\"hello_world\"))\n\tprint(text_match(\"hello_world_\"))\n\tprint(text_match(\"hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world_\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world_hello\"))\n\tprint(text_match(\"hello_world_hello_world_hello_world_hello_world_hello_world_hello_world_hello_world\"))\n\tprint(text_match(\"hello_world_hello"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[0]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\treturn text[-1]\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_middle(text):\n\treturn text[1:-1]\n\n\"\"\"\nWrite a function that matches any character in a string.\n\"\"\"\ndef text_match_any(text):\n\treturn text[0]\n\n\"\"\"\nWrite a function that matches words that start with 'a' and end with 'a'.\n\"\"\"\ndef text_match_start_end(text):\n\treturn text[0] == 'a' and text[-1] == 'a'\n\n\"\"\"\nWrite a function that matches words that have the same first and last characters.\n\"\"\"\ndef text_match_first_last(text):\n\treturn text[0] == text[-1]\n\n\"\"\"\nWrite a function that matches words that have at least 3 consecutive identical characters.\n\"\"\"\ndef text_match_consecutive(text):\n\treturn text[0] == text[1] == text[2]\n\n\"\"\"\nWrite a function that matches words that have at least 2 'b's in them.\n\"\"\"\ndef text_match_bs(text):\n\treturn text.count('b') >= 2\n\n\"\"\"\nWrite a function that matches words that have an 'a' in the middle.\n\"\"\"\ndef text_match_middle_a(text):\n\treturn 'a' in text[1:-1]\n\n\"\"\"\nWrite a function that matches words that have only 2 characters.\n\"\"\"\ndef text_match_2_chars(text):\n\treturn len(text) == 2\n\n\"\"\"\nWrite a function that matches words that start with 'j' and end with 'n'.\n\"\"\"\ndef text_match_start_j_end_n(text):\n\treturn text[0] == 'j' and text[-1] == 'n'\n\n\"\"\"\nWrite a function that matches words that have an 'a' or an 'e' in them.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn text[0]\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_end(text):\n\treturn text[-1]\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_middle(text):\n\treturn text[1:-1]\n\n\"\"\"\nWrite a function that matches any character in a string.\n\"\"\"\ndef text_match_any(text):\n\treturn text[0]\n\n\"\"\"\nWrite a function that matches words that start with 'a' and end with 'a'.\n\"\"\"\ndef text_match_start_end(text):\n\treturn text[0] == 'a' and text[-1] == 'a'\n\n\"\"\"\nWrite a function that matches words that have the same first and last characters.\n\"\"\"\ndef text_match_first_last(text):\n\treturn text[0] == text[-1]\n\n\"\"\"\nWrite a function that matches words that have at least 3 consecutive identical characters.\n\"\"\"\ndef text_match_consecutive(text):\n\treturn text[0] == text[1] == text[2]\n\n\"\"\"\nWrite a function that matches words that have at least 2 'b's in them.\n\"\"\"\ndef text_match_bs(text):\n\treturn text.count('b') >= 2\n\n\"\"\"\nWrite a function that matches words that have an 'a' in the middle.\n\"\"\"\ndef text_match_middle_a(text):\n\treturn 'a' in text[1:-1]\n\n\"\"\"\nWrite a function that matches words that have only 2 characters.\n\"\"\"\ndef text_match_2_chars(text):\n\treturn len(text) == 2\n\n\"\"\"\nWrite a function that matches words that start with 'j' and end with 'n'.\n\"\"\"\ndef text_match_start_j_end_n(text):"}
{"ID": 411, "source": "MBPP:48", "prompt": "\"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to set all odd bits of a given number.\n\"\"\"\ndef odd_bit_set_number(n):\n\treturn n | 0xaaaaaaaa\n\nprint(odd_bit_set_number(12))\nprint(odd_bit_set_number(13))\nprint(odd_bit_set_number(14))\nprint(odd_bit_set_number(15))\nprint(odd_bit_set_number(16))\nprint(odd_bit_set_number(17))\nprint(odd_bit_set_number(18))\nprint(odd_bit_set_number(19))\nprint(odd_bit_set_number(20))\nprint(odd_bit_set_number(21))\nprint(odd_bit_set_number(22))\nprint(odd_bit_set_number(23))\nprint(odd_bit_set_number(24))\nprint(odd_bit_set_number(25))\nprint(odd_bit_set_number(26))\nprint(odd_bit_set_number(27))\nprint(odd_bit_set_number(28))\nprint(odd_bit_set_number(29))\nprint(odd_bit_set_number(30))\nprint(odd_bit_set_number(31))\nprint(odd_bit_set_number(32))\nprint(odd_bit_set_number(33))\nprint(odd_bit_set_number(34))\nprint(odd_bit_set_number(35))\nprint(odd_bit_set_number(36))\nprint(odd_bit_set_number(37))\nprint(odd_bit_set_number(38))\nprint(odd_bit_set_number(39))\nprint(odd_bit_set_number(40))\nprint(odd_bit_set_number(41))\nprint(odd_bit_set_number(42))\nprint(odd_bit_set_number(43))\nprint(odd_bit_set_number(44))\nprint(odd_bit_set_number(45))\nprint(odd_bit_set_number(46))\nprint(odd_bit_set_number(47", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(odd_bit_set_number(12))\nprint(odd_bit_set_number(13))\nprint(odd_bit_set_number(14))\nprint(odd_bit_set_number(15))\nprint(odd_bit_set_number(16))\nprint(odd_bit_set_number(17))\nprint(odd_bit_set_number(18))\nprint(odd_bit_set_number(19))\nprint(odd_bit_set_number(20))\nprint(odd_bit_set_number(21))\nprint(odd_bit_set_number(22))\nprint(odd_bit_set_number(23))\nprint(odd_bit_set_number(24))\nprint(odd_bit_set_number(25))\nprint(odd_bit_set_number(26))\nprint(odd_bit_set_number(27))\nprint(odd_bit_set_number(28))\nprint(odd_bit_set_number(29))\nprint(odd_bit_set_number(30))\nprint(odd_bit_set_number(31))\nprint(odd_bit_set_number(32))\nprint(odd_bit_set_number(33))\nprint(odd_bit_set_number(34))\nprint(odd_bit_set_number(35))\nprint(odd_bit_set_number(36))\nprint(odd_bit_set_number(37))\nprint(odd_bit_set_number(38))\nprint(odd_bit_set_number(39))\nprint(odd_bit_set_number(40))\nprint(odd_bit_set_number(41))\nprint(odd_bit_set_number(42))\nprint(odd_bit_set_number(43))\nprint(odd_bit_set_number(44))\nprint(odd_bit_set_number(45))\nprint(odd_bit_set_number(46))\nprint(odd_bit_set_number(47"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(2))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(2))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn (d1*d2)/2\n\nprint(rhombus_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\nprint(trapezoid_area(2,3,4))\n\n\"\"\"\nWrite a function to calculate area of a polygon.\n\"\"\"\ndef polygon_area(n,s):\n\treturn (n*s**2)/4\n\nprint(polygon_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a regular polygon.\n\"\"\"\ndef regular_polygon_area(n,s):\n\treturn (n*s**2)/4\n\nprint(regular_polygon_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a scalene triangle.\n\"\"\"\ndef scalene_triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(scalene_triangle_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(parallelogram_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(2))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(2))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn (d1*d2)/2\n\nprint(rhombus_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\nprint(trapezoid_area(2,3,4))\n\n\"\"\"\nWrite a function to calculate area of a polygon.\n\"\"\"\ndef polygon_area(n,s):\n\treturn (n*s**2)/4\n\nprint(polygon_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a regular polygon.\n\"\"\"\ndef regular_polygon_area(n,s):\n\treturn (n*s**2)/4\n\nprint(regular_polygon_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of a scalene triangle.\n\"\"\"\ndef scalene_triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(scalene_triangle_area(2,3))\n\n\"\"\"\nWrite a function to calculate area of"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\t\n\t# to check increasing monotonic\n\tif all(A[i] <= A[i + 1] for i in range(len(A) - 1)): \n\t\treturn True\n\t\n\t# to check decreasing monotonic\n\tif all(A[i] >= A[i + 1] for i in range(len(A) - 1)): \n\t\treturn True\n\t\n\treturn False\n\nA = [1, 2, 3, 4, 5]\nprint(is_Monotonic(A))\n\nA = [1, 2, 4, 5]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 6]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1, 2]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1, 2, 3]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1, 2, 3, 4]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nA = [1, 2, 3, 4, 5]\nprint(is_Monotonic(A))\n\nA = [1, 2, 4, 5]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 6]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1, 2]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1, 2, 3]\nprint(is_Monotonic(A))\n\nA = [1, 2, 3, 4, 5, 6, 10, 9, 8, 7, 1, 2, 3, 4]\nprint(is_Monotonic(A))"}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\treturn s in l\n\nif __name__ == \"__main__\":\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8, 9]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8, 9]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\tprint(is_sublist(l, s))\n\n\tl = [1, 2, 3, 4, 5]\n\ts = [2, 3, 4, 5, 6, 7, 8,"}
{"ID": 433, "source": "MBPP:70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"\ndef get_equal(Input, k):\n\tfor i in range(k):\n\t\tif len(Input[i]) != len(Input[0]):\n\t\t\treturn False\n\treturn True\n\n#time is O(n)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n#time is O(n^2)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n#time is O(n^2)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n#time is O(n^2)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\treturn True\n\n#time is O(n)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n#time is O(n^2)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n#time is O(n^2)\n#space is O(1)\n\n\"\"\"\nWrite a function to find the number of pairs in a list of integers whose sum is equal to a given number.\n\"\"\"\ndef get_pairs(Input, k):\n\tcount = 0\n\tfor i in range(len(Input)):\n\t\tfor j in range(i+1, len(Input)):\n\t\t\tif Input[i] + Input[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n#time is O(n^2)\n#space is O(1)\n"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\tfor i in range(1, int(n**0.5) + 1): \n\t\tif (n - i * i) in (j * j for j in range(int(n**0.5) + 1)): \n\t\t\treturn True\n\treturn False\n\nprint(dif_Square(10))\nprint(dif_Square(11))\nprint(dif_Square(12))\nprint(dif_Square(13))\nprint(dif_Square(14))\nprint(dif_Square(15))\nprint(dif_Square(16))\nprint(dif_Square(17))\nprint(dif_Square(18))\nprint(dif_Square(19))\nprint(dif_Square(20))\nprint(dif_Square(21))\nprint(dif_Square(22))\nprint(dif_Square(23))\nprint(dif_Square(24))\nprint(dif_Square(25))\nprint(dif_Square(26))\nprint(dif_Square(27))\nprint(dif_Square(28))\nprint(dif_Square(29))\nprint(dif_Square(30))\nprint(dif_Square(31))\nprint(dif_Square(32))\nprint(dif_Square(33))\nprint(dif_Square(34))\nprint(dif_Square(35))\nprint(dif_Square(36))\nprint(dif_Square(37))\nprint(dif_Square(38))\nprint(dif_Square(39))\nprint(dif_Square(40))\nprint(dif_Square(41))\nprint(dif_Square(42))\nprint(dif_Square(43))\nprint(dif_Square(44))\nprint(dif_Square(45))\nprint(dif_Square(46))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(dif_Square(10))\nprint(dif_Square(11))\nprint(dif_Square(12))\nprint(dif_Square(13))\nprint(dif_Square(14))\nprint(dif_Square(15))\nprint(dif_Square(16))\nprint(dif_Square(17))\nprint(dif_Square(18))\nprint(dif_Square(19))\nprint(dif_Square(20))\nprint(dif_Square(21))\nprint(dif_Square(22))\nprint(dif_Square(23))\nprint(dif_Square(24))\nprint(dif_Square(25))\nprint(dif_Square(26))\nprint(dif_Square(27))\nprint(dif_Square(28))\nprint(dif_Square(29))\nprint(dif_Square(30))\nprint(dif_Square(31))\nprint(dif_Square(32))\nprint(dif_Square(33))\nprint(dif_Square(34))\nprint(dif_Square(35))\nprint(dif_Square(36))\nprint(dif_Square(37))\nprint(dif_Square(38))\nprint(dif_Square(39))\nprint(dif_Square(40))\nprint(dif_Square(41))\nprint(dif_Square(42))\nprint(dif_Square(43))\nprint(dif_Square(44))\nprint(dif_Square(45))\nprint(dif_Square(46))\nprint("}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\tif len(colors) != len(patterns):\n\t\treturn False\n\t\n\tfor i in range(len(colors)):\n\t\tif colors[i] != patterns[i]:\n\t\t\treturn False\n\treturn True\n\n\ndef is_samepatterns_recursive(colors, patterns):\n\tif len(colors) == 0 and len(patterns) == 0:\n\t\treturn True\n\tif len(colors) == 0 or len(patterns) == 0:\n\t\treturn False\n\tif colors[0] != patterns[0]:\n\t\treturn False\n\treturn is_samepatterns_recursive(colors[1:], patterns[1:])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 442, "source": "MBPP:79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"\ndef word_len(s): \n\treturn len(s)%2==0\nprint(word_len(\"hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a palindrome or not.\n\"\"\"\ndef palindrome(s):\n\treturn s==s[::-1]\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a pangram or not.\n\"\"\"\ndef pangram(s):\n\treturn len(s)==26\nprint(pangram(\"the quick brown fox jumps over the lazy dog\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a isogram or not.\n\"\"\"\ndef isogram(s):\n\treturn len(s)==len(set(s))\nprint(isogram(\"hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a anagram or not.\n\"\"\"\ndef anagram(s1,s2):\n\treturn sorted(s1)==sorted(s2)\nprint(anagram(\"listen\",\"silent\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a strong password or not.\n\"\"\"\ndef strong_password(s):\n\treturn len(s)>=8 and any(i.isdigit() for i in s) and any(i.isupper() for i in s) and any(not i.isalnum() for i in s)\nprint(strong_password(\"hello@123\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a valid email address or not.\n\"\"\"\nimport re\ndef valid_email(s):\n\treturn bool(re.search(r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$',s))\nprint(valid_email(\"hello@gmail.com\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a valid phone number or not.\n\"\"\"\nimport re\ndef valid_phone(s):\n\treturn bool(re.search(r'^[0-9]{10}$',s))\nprint(valid_phone(\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(s)%2==0\nprint(word_len(\"hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a palindrome or not.\n\"\"\"\ndef palindrome(s):\n\treturn s==s[::-1]\nprint(palindrome(\"racecar\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a pangram or not.\n\"\"\"\ndef pangram(s):\n\treturn len(s)==26\nprint(pangram(\"the quick brown fox jumps over the lazy dog\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a isogram or not.\n\"\"\"\ndef isogram(s):\n\treturn len(s)==len(set(s))\nprint(isogram(\"hello\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a anagram or not.\n\"\"\"\ndef anagram(s1,s2):\n\treturn sorted(s1)==sorted(s2)\nprint(anagram(\"listen\",\"silent\"))\n\n\"\"\"\nWrite a python function to check whether the given string is a strong password or not.\n\"\"\"\ndef strong_password(s):"}
{"ID": 443, "source": "MBPP:80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"\ndef tetrahedral_number(n): \n\treturn n * (n + 1) * (n + 2) // 6\n\nprint(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\nprint(tetrahedral_number(10))\nprint(tetrahedral_number(11))\nprint(tetrahedral_number(12))\nprint(tetrahedral_number(13))\nprint(tetrahedral_number(14))\nprint(tetrahedral_number(15))\nprint(tetrahedral_number(16))\nprint(tetrahedral_number(17))\nprint(tetrahedral_number(18))\nprint(tetrahedral_number(19))\nprint(tetrahedral_number(20))\nprint(tetrahedral_number(21))\nprint(tetrahedral_number(22))\nprint(tetrahedral_number(23))\nprint(tetrahedral_number(24))\nprint(tetrahedral_number(25))\nprint(tetrahedral_number(26))\nprint(tetrahedral_number(27))\nprint(tetrahedral_number(28))\nprint(tetrahedral_number(29))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(31))\nprint(tetrahedral_number(32))\nprint(tetrahedral_number(33))\nprint(tetrahedral_number(34))\nprint(tetrahedral_number(35))\nprint(tetrahedral_number(36))\nprint(tetrahedral_number(37))\nprint(tetrahedral_number(38))\nprint(tetrahedral", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\nprint(tetrahedral_number(10))\nprint(tetrahedral_number(11))\nprint(tetrahedral_number(12))\nprint(tetrahedral_number(13))\nprint(tetrahedral_number(14))\nprint(tetrahedral_number(15))\nprint(tetrahedral_number(16))\nprint(tetrahedral_number(17))\nprint(tetrahedral_number(18))\nprint(tetrahedral_number(19))\nprint(tetrahedral_number(20))\nprint(tetrahedral_number(21))\nprint(tetrahedral_number(22))\nprint(tetrahedral_number(23))\nprint(tetrahedral_number(24))\nprint(tetrahedral_number(25))\nprint(tetrahedral_number(26))\nprint(tetrahedral_number(27))\nprint(tetrahedral_number(28))\nprint(tetrahedral_number(29))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(31))\nprint(tetrahedral_number(32))\nprint(tetrahedral_number(33))\nprint(tetrahedral_number(34))\nprint(tetrahedral_number(35))\nprint(tetrahedral_number(36))\nprint(tetrahedral_number(37))\nprint(tetrahedral_number(38))\nprint(tetrahedral"}
{"ID": 444, "source": "MBPP:81", "prompt": "\"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to zip the two given tuples.\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\n\treturn tuple(zip(test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\n\"\"\"\nWrite a function to check if a given string is a pangram.\n\"\"\"\ndef is_pangram(test_str):\n\treturn len(set(test_str.lower())) == 26\n\n\"\"\"\nWrite a function to check if a given string is a isogram.\n\"\"\"\ndef is_isogram(test_str):\n\treturn len(test_str) == len(set(test_str.lower()))\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(zip(test_tup1, test_tup2))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef is_palindrome(test_str):\n\treturn test_str == test_str[::-1]\n\n\"\"\"\nWrite a function to check if a given string is a pangram.\n\"\"\"\ndef is_pangram(test_str):\n\treturn len(set(test_str.lower())) == 26\n\n\"\"\"\nWrite a function to check if a given string is a isogram.\n\"\"\"\ndef is_isogram(test_str):\n\treturn len(test_str) == len(set(test_str.lower()))\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test_str2):\n\treturn sorted(test_str1.lower()) == sorted(test_str2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef is_anagram(test_str1, test"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14159*(r**3)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14159*(r**2)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,h):\n\treturn ((a+b)*h)/2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn (d1*d2)/2\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(s,a):\n\treturn (5*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(s,a):\n\treturn (6*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(s,a):\n\treturn (7*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef area_octagon(s,a):\n\treturn (8*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14159*(r**2)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,h):\n\treturn ((a+b)*h)/2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn (d1*d2)/2\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(s,a):\n\treturn (5*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(s,a):\n\treturn (6*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(s,a):\n\treturn (7*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find the area of a octagon.\n\"\"\"\ndef area_octagon(s,a):\n\treturn (8*s*s)/(4*tan(a))\n\n\"\"\"\nWrite a function to find"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\tif n == 1: \n\t\treturn '1'\n\telif n == 2: \n\t\treturn '1 1'\n\telse: \n\t\tresult = '1 1' \n\t\tfor i in range(2, n): \n\t\t\tresult += ' ' + str(sequenceHelper(i)) \n\t\treturn result \n\ndef sequenceHelper(n): \n\tif n == 1: \n\t\treturn 1\n\telif n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequenceHelper(sequenceHelper(n - 1)) + sequenceHelper(n - sequenceHelper(n - 1)) \n\nprint(sequence(1))\nprint(sequence(2))\nprint(sequence(3))\nprint(sequence(4))\nprint(sequence(5))\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8))\nprint(sequence(9))\nprint(sequence(10))\nprint(sequence(11))\nprint(sequence(12))\nprint(sequence(13))\nprint(sequence(14))\nprint(sequence(15))\nprint(sequence(16))\nprint(sequence(17))\nprint(sequence(18))\nprint(sequence(19))\nprint(sequence(20))\nprint(sequence(21))\nprint(sequence(22))\nprint(sequence(23))\nprint(sequence(24))\nprint(sequence(25))\nprint(sequence(26))\nprint(sequence(27))\nprint(sequence(28))\nprint(sequence(29))\nprint(sequence(30))\nprint(sequence(31))\nprint(sequence(32))\nprint(sequence(33))\nprint(sequence(34))\nprint(sequence(35))\nprint(sequence(36))\nprint(sequence(37))\nprint(sequence(38))\nprint(sequence(39))\nprint(sequence(40))\nprint(sequence(41))\nprint(sequence(42))\nprint(sequence(43))\nprint(sequence(44))\nprint(sequence(45))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sequence(1))\nprint(sequence(2))\nprint(sequence(3))\nprint(sequence(4))\nprint(sequence(5))\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8))\nprint(sequence(9))\nprint(sequence(10))\nprint(sequence(11))\nprint(sequence(12))\nprint(sequence(13))\nprint(sequence(14))\nprint(sequence(15))\nprint(sequence(16))\nprint(sequence(17))\nprint(sequence(18))\nprint(sequence(19))\nprint(sequence(20))\nprint(sequence(21))\nprint(sequence(22))\nprint(sequence(23))\nprint(sequence(24))\nprint(sequence(25))\nprint(sequence(26))\nprint(sequence(27))\nprint(sequence(28))\nprint(sequence(29))\nprint(sequence(30))\nprint(sequence(31))\nprint(sequence(32))\nprint(sequence(33))\nprint(sequence(34))\nprint(sequence(35))\nprint(sequence(36))\nprint(sequence(37))\nprint(sequence(38))\nprint(sequence(39))\nprint(sequence(40))\nprint(sequence(41))\nprint(sequence(42))\nprint(sequence(43))\nprint(sequence(44))\nprint(sequence(45))\nprint"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find"}
{"ID": 455, "source": "MBPP:92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"\ndef is_undulating(n): \n\treturn ''.join(sorted(str(n))) == '123456789'\n\n\"\"\"\nGiven a string, find the length of the longest substring in it with no more than K distinct characters.\n\"\"\"\ndef longest_substring(s, k):\n\tmax_len = 0\n\tstart = 0\n\tend = 0\n\tcount = 0\n\tchar_freq = {}\n\tn = len(s)\n\tfor end in range(0, n):\n\t\tchar = s[end]\n\t\tif char not in char_freq:\n\t\t\tchar_freq[char] = 0\n\t\tchar_freq[char] += 1\n\t\tcount += 1\n\t\tif char_freq[char] == 1:\n\t\t\tcount -= 1\n\t\tif count > k:\n\t\t\twhile char_freq[s[start]] > 1:\n\t\t\t\tchar_freq[s[start]] -= 1\n\t\t\t\tstart += 1\n\t\t\tchar_freq[s[start]] -= 1\n\t\t\tstart += 1\n\t\tmax_len = max(max_len, end - start + 1)\n\treturn max_len\n\n\"\"\"\nGiven a string, find the length of the longest substring in it with no more than K distinct characters.\n\"\"\"\ndef longest_substring(s, k):\n\tmax_len = 0\n\tstart = 0\n\tend = 0\n\tcount = 0\n\tchar_freq = {}\n\tn = len(s)\n\tfor end in range(0, n):\n\t\tchar = s[end]\n\t\tif char not in char_freq:\n\t\t\tchar_freq[char] = 0\n\t\tchar_freq[char] += 1\n\t\tcount += 1\n\t\tif char_freq[char] == 1:\n\t\t\tcount -= 1\n\t\tif count > k:\n\t\t\twhile char_freq[s[start]] > 1:\n\t\t\t\tchar_freq[s[start]] -= 1\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nGiven a string, find the length of the longest substring in it with no more than K distinct characters.\n\"\"\"\ndef longest_substring(s, k):\n\tmax_len = 0\n\tstart = 0\n\tend = 0\n\tcount = 0\n\tchar_freq = {}\n\tn = len(s)\n\tfor end in range(0, n):\n\t\tchar = s[end]\n\t\tif char not in char_freq:\n\t\t\tchar_freq[char] = 0\n\t\tchar_freq[char] += 1\n\t\tcount += 1\n\t\tif char_freq[char] == 1:\n\t\t\tcount -= 1\n\t\tif count > k:\n\t\t\twhile char_freq[s[start]] > 1:\n\t\t\t\tchar_freq[s[start]] -= 1\n\t\t\t\tstart += 1\n\t\t\tchar_freq[s[start]] -= 1\n\t\t\tstart += 1\n\t\tmax_len = max(max_len, end - start + 1)\n\treturn max_len\n\n\"\"\"\nGiven a string, find the length of the longest substring in it with no more than K distinct characters.\n\"\"\"\ndef longest_substring(s, k):\n\tmax_len = 0\n\tstart = 0\n\tend = 0\n\tcount = 0\n\tchar_freq = {}\n\tn = len(s)\n\tfor end in range(0, n):\n\t\tchar = s[end]\n\t\tif char not in char_freq:"}
{"ID": 458, "source": "MBPP:95", "prompt": "\"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum length of sublist.\n\"\"\"\ndef Find_Min_Length(lst):  \n\treturn min(len(set(lst)), len(lst))\n\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint("}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\tfrequency = {}\n\tfor i in list1:\n\t\tif i in frequency:\n\t\t\tfrequency[i] += 1\n\t\telse:\n\t\t\tfrequency[i] = 1\n\treturn frequency\n\nlist1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "list1 = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2"}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\tnum_str = str(num)\n\tmid = len(num_str) // 2\n\tleft = num_str[:mid]\n\tright = num_str[mid:]\n\tif left == right[::-1]:\n\t\treturn num + 1\n\telse:\n\t\treturn int(left + right[::-1])\n\nprint(next_smallest_palindrome(195))\nprint(next_smallest_palindrome(199))\nprint(next_smallest_palindrome(12345))\nprint(next_smallest_palindrome(123456))\nprint(next_smallest_palindrome(1234567))\nprint(next_smallest_palindrome(12345678))\nprint(next_smallest_palindrome(123456789))\nprint(next_smallest_palindrome(1234567890))\nprint(next_smallest_palindrome(12345678901))\nprint(next_smallest_palindrome(123456789012))\nprint(next_smallest_palindrome(1234567890123))\nprint(next_smallest_palindrome(12345678901234))\nprint(next_smallest_palindrome(123456789012345))\nprint(next_smallest_palindrome(1234567890123456))\nprint(next_smallest_palindrome(12345678901234567))\nprint(next_smallest_palindrome(123456789012345678))\nprint(next_smallest_palindrome(1234567890123456789))\nprint(next_smallest_palindrome(12345678901234", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(next_smallest_palindrome(195))\nprint(next_smallest_palindrome(199))\nprint(next_smallest_palindrome(12345))\nprint(next_smallest_palindrome(123456))\nprint(next_smallest_palindrome(1234567))\nprint(next_smallest_palindrome(12345678))\nprint(next_smallest_palindrome(123456789))\nprint(next_smallest_palindrome(1234567890))\nprint(next_smallest_palindrome(12345678901))\nprint(next_smallest_palindrome(123456789012))\nprint(next_smallest_palindrome(1234567890123))\nprint(next_smallest_palindrome(12345678901234))\nprint(next_smallest_palindrome(123456789012345))\nprint(next_smallest_palindrome(1234567890123456))\nprint(next_smallest_palindrome(12345678901234567))\nprint(next_smallest_palindrome(123456789012345678))\nprint(next_smallest_palindrome(1234567890123456789))\nprint(next_smallest_palindrome(12345678901234"}
{"ID": 465, "source": "MBPP:102", "prompt": "\"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert snake case string to camel case string.\n\"\"\"\ndef snake_to_camel(word):\n\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(word):\n\treturn ''.join(['_'+i.lower() if i.isupper() else i for i in word]).lstrip('_')\n\n\"\"\"\nWrite a function to convert camel case string to pascal case string.\n\"\"\"\ndef camel_to_pascal(word):\n\treturn ''.join(x.capitalize() for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert pascal case string to camel case string.\n\"\"\"\ndef pascal_to_camel(word):\n\treturn word[0].lower() + word[1:]\n\n\"\"\"\nWrite a function to convert pascal case string to snake case string.\n\"\"\"\ndef pascal_to_snake(word):\n\treturn ''.join(['_'+i.lower() if i.isupper() else i for i in word]).lstrip('_')\n\n\"\"\"\nWrite a function to convert snake case string to pascal case string.\n\"\"\"\ndef snake_to_pascal(word):\n\treturn ''.join(x.capitalize() for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert any case string to any case string.\n\"\"\"\ndef convert_case(word, case):\n\tif case == 'camel':\n\t\tif word[0].isupper():\n\t\t\treturn pascal_to_camel(word)\n\t\telse:\n\t\t\treturn snake_to_camel(word)\n\telif case == 'pascal':\n\t\tif word[0].isupper():\n\t\t\treturn word\n\t\telse:\n\t\t\treturn snake_to_pascal(word)\n\telif case == 'snake':\n\t\tif word[0].isupper():\n\t\t\treturn pascal_to_snake(word)\n\t\telse:\n\t\t\treturn camel_to_snake(word)\n\telse:\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(word):\n\treturn ''.join(['_'+i.lower() if i.isupper() else i for i in word]).lstrip('_')\n\n\"\"\"\nWrite a function to convert camel case string to pascal case string.\n\"\"\"\ndef camel_to_pascal(word):\n\treturn ''.join(x.capitalize() for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert pascal case string to camel case string.\n\"\"\"\ndef pascal_to_camel(word):\n\treturn word[0].lower() + word[1:]\n\n\"\"\"\nWrite a function to convert pascal case string to snake case string.\n\"\"\"\ndef pascal_to_snake(word):\n\treturn ''.join(['_'+i.lower() if i.isupper() else i for i in word]).lstrip('_')\n\n\"\"\"\nWrite a function to convert snake case string to pascal case string.\n\"\"\"\ndef snake_to_pascal(word):\n\treturn ''.join(x.capitalize() for x in word.split('_'))\n\n\"\"\"\nWrite a function to convert any case string to any case string.\n\"\"\"\ndef convert_case(word, case):"}
{"ID": 469, "source": "MBPP:106", "prompt": "\"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to add the given list to the given tuples.\n\"\"\"\ndef add_lists(test_list, test_tup):\n\treturn tuple(x+y for x, y in zip(test_list, test_tup))\n\n\"\"\"\nWrite a function to check if the given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check if the given string is a pangram.\n\"\"\"\ndef is_pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check if the given string is a isogram.\n\"\"\"\ndef is_isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(x+y for x, y in zip(test_list, test_tup))\n\n\"\"\"\nWrite a function to check if the given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check if the given string is a pangram.\n\"\"\"\ndef is_pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check if the given string is a isogram.\n\"\"\"\ndef is_isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if the given string is a anagram.\n\"\"\"\ndef is_anagram(string1, string"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\theap = []\n\tfor num in [num1,num2,num3]:\n\t\theapq.heappush(heap,num)\n\tresult = []\n\twhile heap:\n\t\tresult.append(heapq.heappop(heap))\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 479, "source": "MBPP:116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_to_int(nums):\n\treturn int(\"\".join(map(str, nums)))\n\n\"\"\"\nWrite a function to convert a given integer into a tuple of positive integers.\n\"\"\"\ndef int_to_tuple(num):\n\treturn tuple(map(int, str(num)))\n\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\n\"\"\"\ndef tuple_"}
{"ID": 481, "source": "MBPP:118", "prompt": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\t", "predict": "<s> \"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\ndef string_to_list(string): \n\treturn list(string)\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(string): \n\treturn string == string[::-1]\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string): \n\treturn len(set(string.lower())) == 26\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a isogram.\n\"\"\"\ndef is_isogram(string): \n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(string): \n\treturn string == string[::-1]\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string): \n\treturn len(set(string.lower())) == 26\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a isogram.\n\"\"\"\ndef is_isogram(string): \n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2): \n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://"}
{"ID": 487, "source": "MBPP:124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"\ndef angle_complex(a,b):\n\tif a == 0 and b == 0:\n\t\treturn 0\n\telif a == 0 and b > 0:\n\t\treturn 90\n\telif a == 0 and b < 0:\n\t\treturn 270\n\telif a > 0 and b == 0:\n\t\treturn 0\n\telif a < 0 and b == 0:\n\t\treturn 180\n\telif a > 0 and b > 0:\n\t\treturn 90 - math.degrees(math.atan(b/a))\n\telif a < 0 and b > 0:\n\t\treturn 90 + math.degrees(math.atan(b/a))\n\telif a > 0 and b < 0:\n\t\treturn 270 - math.degrees(math.atan(b/a))\n\telif a < 0 and b < 0:\n\t\treturn 270 + math.degrees(math.atan(b/a))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\tvowels = \"aeiou\"\n\tnew_str = \"\"\n\tfor i in str1:\n\t\tif i in vowels:\n\t\t\tnew_str = i + new_str\n\t\telse:\n\t\t\tnew_str = new_str + i\n\treturn new_str\n\nprint(reverse_vowels(\"hello\"))\nprint(reverse_vowels(\"aeiou\"))\nprint(reverse_vowels(\"aeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaei", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(reverse_vowels(\"hello\"))\nprint(reverse_vowels(\"aeiou\"))\nprint(reverse_vowels(\"aeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"))\nprint(reverse_vowels(\"aeiouaeiouaeiouaeiouaeiouaei"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\treturn str(tup1)\n\n\"\"\"\nWrite a function to check whether a given string is a palindrome or not.\n\"\"\"\ndef palindrome(str1):\n\treturn str1 == str1[::-1]\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word_freq(str1):\n\treturn {word:str1.count(word) for word in str1.split()}\n\n\"\"\"\nWrite a function to find the frequency of each word in a given string.\n\"\"\"\ndef word"}
{"ID": 497, "source": "MBPP:134", "prompt": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\"\"\"\ndef check_last (arr,n,p): \n\tfor i in range(p):\n\t\tarr[n-1] = arr[n-1] + 1\n\tif arr[n-1]%2 == 0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n\nprint(check_last([1,2,3,4,5],5,2))\nprint(check_last([1,2,3,4,5],5,3))\nprint(check_last([1,2,3,4,5],5,4))\nprint(check_last([1,2,3,4,5],5,5))\nprint(check_last([1,2,3,4,5],5,6))\nprint(check_last([1,2,3,4,5],5,7))\nprint(check_last([1,2,3,4,5],5,8))\nprint(check_last([1,2,3,4,5],5,9))\nprint(check_last([1,2,3,4,5],5,10))\nprint(check_last([1,2,3,4,5],5,11))\nprint(check_last([1,2,3,4,5],5,12))\nprint(check_last([1,2,3,4,5],5,13))\nprint(check_last([1,2,3,4,5],5,14))\nprint(check_last([1,2,3,4,5],5,15))\nprint(check_last([1,2,3,4,5],5,16))\nprint(check_last([1,2,3,4,5],5,17))\nprint(check_last([1,2,3,4,5],5,18))\nprint(check_last([1,2,3,4,5],5,19))\nprint(check_last([1,2,3,4,5],5,20))\nprint(check_last([1,2,3,4,5],5,21))\nprint(check_last([1,2,3,4,5],5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_last([1,2,3,4,5],5,2))\nprint(check_last([1,2,3,4,5],5,3))\nprint(check_last([1,2,3,4,5],5,4))\nprint(check_last([1,2,3,4,5],5,5))\nprint(check_last([1,2,3,4,5],5,6))\nprint(check_last([1,2,3,4,5],5,7))\nprint(check_last([1,2,3,4,5],5,8))\nprint(check_last([1,2,3,4,5],5,9))\nprint(check_last([1,2,3,4,5],5,10))\nprint(check_last([1,2,3,4,5],5,11))\nprint(check_last([1,2,3,4,5],5,12))\nprint(check_last([1,2,3,4,5],5,13))\nprint(check_last([1,2,3,4,5],5,14))\nprint(check_last([1,2,3,4,5],5,15))\nprint(check_last([1,2,3,4,5],5,16))\nprint(check_last([1,2,3,4,5],5,17))\nprint(check_last([1,2,3,4,5],5,18))\nprint(check_last([1,2,3,4,5],5,19))\nprint(check_last([1,2,3,4,5],5,20))\nprint(check_last([1,2,3,4,5],5,21))\nprint(check_last([1,2,3,4,5],5"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\treturn n * (2 * n - 1)\n\ndef nth_hexagonal_num(n):\n\treturn hexagonal_num(n)\n\nprint(nth_hexagonal_num(1))\nprint(nth_hexagonal_num(2))\nprint(nth_hexagonal_num(3))\nprint(nth_hexagonal_num(4))\nprint(nth_hexagonal_num(5))\nprint(nth_hexagonal_num(6))\nprint(nth_hexagonal_num(7))\nprint(nth_hexagonal_num(8))\nprint(nth_hexagonal_num(9))\nprint(nth_hexagonal_num(10))\nprint(nth_hexagonal_num(11))\nprint(nth_hexagonal_num(12))\nprint(nth_hexagonal_num(13))\nprint(nth_hexagonal_num(14))\nprint(nth_hexagonal_num(15))\nprint(nth_hexagonal_num(16))\nprint(nth_hexagonal_num(17))\nprint(nth_hexagonal_num(18))\nprint(nth_hexagonal_num(19))\nprint(nth_hexagonal_num(20))\nprint(nth_hexagonal_num(21))\nprint(nth_hexagonal_num(22))\nprint(nth_hexagonal_num(23))\nprint(nth_hexagonal_num(24))\nprint(nth_hexagonal_num(25))\nprint(nth_hexagonal_num(26))\nprint(nth_hexagonal_num(27))\nprint(nth_hexagonal_num(28))\nprint(nth_hexagonal_num(29))\nprint(nth_hexagonal_num(30))\nprint(nth_hexagonal_num(31))\nprint(nth_hexagonal_num(32))\nprint(nth_hexagonal_num(33))\nprint(nth_hexagonal_num(34))\nprint(nth_hexagonal", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(nth_hexagonal_num(1))\nprint(nth_hexagonal_num(2))\nprint(nth_hexagonal_num(3))\nprint(nth_hexagonal_num(4))\nprint(nth_hexagonal_num(5))\nprint(nth_hexagonal_num(6))\nprint(nth_hexagonal_num(7))\nprint(nth_hexagonal_num(8))\nprint(nth_hexagonal_num(9))\nprint(nth_hexagonal_num(10))\nprint(nth_hexagonal_num(11))\nprint(nth_hexagonal_num(12))\nprint(nth_hexagonal_num(13))\nprint(nth_hexagonal_num(14))\nprint(nth_hexagonal_num(15))\nprint(nth_hexagonal_num(16))\nprint(nth_hexagonal_num(17))\nprint(nth_hexagonal_num(18))\nprint(nth_hexagonal_num(19))\nprint(nth_hexagonal_num(20))\nprint(nth_hexagonal_num(21))\nprint(nth_hexagonal_num(22))\nprint(nth_hexagonal_num(23))\nprint(nth_hexagonal_num(24))\nprint(nth_hexagonal_num(25))\nprint(nth_hexagonal_num(26))\nprint(nth_hexagonal_num(27))\nprint(nth_hexagonal_num(28))\nprint(nth_hexagonal_num(29))\nprint(nth_hexagonal_num(30))\nprint(nth_hexagonal_num(31))\nprint(nth_hexagonal_num(32))\nprint(nth_hexagonal_num(33))\nprint(nth_hexagonal_num(34))\nprint(nth_hexagonal"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n & 1: \n\t\t\tn -= 1\n\t\tn >>= 1\n\treturn True\n\nprint(is_Sum_Of_Powers_Of_Two(10))\nprint(is_Sum_Of_Powers_Of_Two(11))\nprint(is_Sum_Of_Powers_Of_Two(12))\nprint(is_Sum_Of_Powers_Of_Two(13))\nprint(is_Sum_Of_Powers_Of_Two(14))\nprint(is_Sum_Of_Powers_Of_Two(15))\nprint(is_Sum_Of_Powers_Of_Two(16))\nprint(is_Sum_Of_Powers_Of_Two(17))\nprint(is_Sum_Of_Powers_Of_Two(18))\nprint(is_Sum_Of_Powers_Of_Two(19))\nprint(is_Sum_Of_Powers_Of_Two(20))\nprint(is_Sum_Of_Powers_Of_Two(21))\nprint(is_Sum_Of_Powers_Of_Two(22))\nprint(is_Sum_Of_Powers_Of_Two(23))\nprint(is_Sum_Of_Powers_Of_Two(24))\nprint(is_Sum_Of_Powers_Of_Two(25))\nprint(is_Sum_Of_Powers_Of_Two(26))\nprint(is_Sum_Of_Powers_Of_Two(27))\nprint(is_Sum_Of_Powers_Of_Two(28))\nprint(is_Sum_Of_Powers_Of_Two(29))\nprint(is_Sum_Of_Powers_Of_Two(30))\nprint(is_Sum_Of_Powers_Of_Two(31))\nprint(is_Sum_Of_Powers_Of_Two(32))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Sum_Of_Powers_Of_Two(10))\nprint(is_Sum_Of_Powers_Of_Two(11))\nprint(is_Sum_Of_Powers_Of_Two(12))\nprint(is_Sum_Of_Powers_Of_Two(13))\nprint(is_Sum_Of_Powers_Of_Two(14))\nprint(is_Sum_Of_Powers_Of_Two(15))\nprint(is_Sum_Of_Powers_Of_Two(16))\nprint(is_Sum_Of_Powers_Of_Two(17))\nprint(is_Sum_Of_Powers_Of_Two(18))\nprint(is_Sum_Of_Powers_Of_Two(19))\nprint(is_Sum_Of_Powers_Of_Two(20))\nprint(is_Sum_Of_Powers_Of_Two(21))\nprint(is_Sum_Of_Powers_Of_Two(22))\nprint(is_Sum_Of_Powers_Of_Two(23))\nprint(is_Sum_Of_Powers_Of_Two(24))\nprint(is_Sum_Of_Powers_Of_Two(25))\nprint(is_Sum_Of_Powers_Of_Two(26))\nprint(is_Sum_Of_Powers_Of_Two(27))\nprint(is_Sum_Of_Powers_Of_Two(28))\nprint(is_Sum_Of_Powers_Of_Two(29))\nprint(is_Sum_Of_Powers_Of_Two(30))\nprint(is_Sum_Of_Powers_Of_Two(31))\nprint(is_Sum_Of_Powers_Of_Two(32))"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1, b2, h):\n\treturn (b1 + b2) * h / 2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1, b2, h):\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1, b2, h):\n\treturn (b1 + b2) * h / 2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(b1, b2, h):"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "<s> \"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif type(i) == list:\n\t\t\tcount += 1\n\treturn count\n\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9],", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_lists(([1,2,3], [4,5,6], [7,8,9])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9], [1,2,3])))\nprint(find_lists(([1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9],"}
{"ID": 511, "source": "MBPP:148", "prompt": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\t", "predict": "<s> \"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\"\"\"\ndef sum_digits_twoparts(N) : \n\tif N < 10 : \n\t\treturn N\n\t\n\tmax_sum = 0\n\tfor i in range(1, N) : \n\t\tsum1 = sum_digits(N[:i])\n\t\tsum2 = sum_digits(N[i:])\n\t\tmax_sum = max(max_sum, sum1 + sum2)\n\t\n\treturn max_sum\n\ndef sum_digits(N) : \n\treturn sum(map(int, N))\n\nif __name__ == \"__main__\" : \n\tprint(sum_digits_twoparts(\"123456789\"))\n\tprint(sum_digits_twoparts(\"1234567890\"))\n\tprint(sum_digits_twoparts(\"12345678901\"))\n\tprint(sum_digits_twoparts(\"123456789012\"))\n\tprint(sum_digits_twoparts(\"1234567890123\"))\n\tprint(sum_digits_twoparts(\"12345678901234\"))\n\tprint(sum_digits_twoparts(\"123456789012345\"))\n\tprint(sum_digits_twoparts(\"1234567890123456\"))\n\tprint(sum_digits_twoparts(\"12345678901234567\"))\n\tprint(sum_digits_twoparts(\"123456789012345678\"))\n\tprint(sum_digits_twoparts(\"1234567890123456789\"))\n\tprint(sum_digits_twoparts(\"12345678901234567890\"))\n\tprint(sum_digits_twoparts(\"123456789012345678901\"))\n\tprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(sum_digits_twoparts(\"123456789\"))\n\tprint(sum_digits_twoparts(\"1234567890\"))\n\tprint(sum_digits_twoparts(\"12345678901\"))\n\tprint(sum_digits_twoparts(\"123456789012\"))\n\tprint(sum_digits_twoparts(\"1234567890123\"))\n\tprint(sum_digits_twoparts(\"12345678901234\"))\n\tprint(sum_digits_twoparts(\"123456789012345\"))\n\tprint(sum_digits_twoparts(\"1234567890123456\"))\n\tprint(sum_digits_twoparts(\"12345678901234567\"))\n\tprint(sum_digits_twoparts(\"123456789012345678\"))\n\tprint(sum_digits_twoparts(\"1234567890123456789\"))\n\tprint(sum_digits_twoparts(\"12345678901234567890\"))\n\tprint(sum_digits_twoparts(\"123456789012345678901\"))\n\tprint("}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\tif a in b: \n\t\treturn True\n\telse: \n\t\treturn False\n\nprint(does_Contain_B(10,[1,2,3,4,5,6,7,8,9,10]))\nprint(does_Contain_B(11,[1,2,3,4,5,6,7,8,9,10]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 516, "source": "MBPP:153", "prompt": "\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\treturn (-b/(2*a), -c/a)\n\n\"\"\"\nWrite a function to find the focus of an ellipse.\n\"\"\"\ndef ellipse_focus(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a circle.\n\"\"\"\ndef circle_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a sphere.\n\"\"\"\ndef sphere_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cylinder.\n\"\"\"\ndef cylinder_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cone.\n\"\"\"\ndef cone_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cuboid.\n\"\"\"\ndef cuboid_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a sphere.\n\"\"\"\ndef sphere_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a torus.\n\"\"\"\ndef torus_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cylinder.\n\"\"\"\ndef cylinder_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cone.\n\"\"\"\ndef cone_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cuboid.\n\"\"\"\ndef cuboid_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a sphere.\n\"\"\"\ndef sphere_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (-b/(2*a), -c/a)\n\n\"\"\"\nWrite a function to find the focus of an ellipse.\n\"\"\"\ndef ellipse_focus(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a circle.\n\"\"\"\ndef circle_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a sphere.\n\"\"\"\ndef sphere_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cylinder.\n\"\"\"\ndef cylinder_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cone.\n\"\"\"\ndef cone_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cuboid.\n\"\"\"\ndef cuboid_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a sphere.\n\"\"\"\ndef sphere_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a torus.\n\"\"\"\ndef torus_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cylinder.\n\"\"\"\ndef cylinder_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cone.\n\"\"\"\ndef cone_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a cuboid.\n\"\"\"\ndef cuboid_center(a, b, c):\n\treturn (0, 0)\n\n\"\"\"\nWrite a function to find the center of a sphere.\n\"\"\"\ndef sphere_center(a, b, c):"}
{"ID": 518, "source": "MBPP:155", "prompt": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle all even bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\treturn n ^ 0xAAAAAAAA\n\nprint(even_bit_toggle_number(12))\nprint(even_bit_toggle_number(13))\nprint(even_bit_toggle_number(14))\nprint(even_bit_toggle_number(15))\nprint(even_bit_toggle_number(16))\nprint(even_bit_toggle_number(17))\nprint(even_bit_toggle_number(18))\nprint(even_bit_toggle_number(19))\nprint(even_bit_toggle_number(20))\nprint(even_bit_toggle_number(21))\nprint(even_bit_toggle_number(22))\nprint(even_bit_toggle_number(23))\nprint(even_bit_toggle_number(24))\nprint(even_bit_toggle_number(25))\nprint(even_bit_toggle_number(26))\nprint(even_bit_toggle_number(27))\nprint(even_bit_toggle_number(28))\nprint(even_bit_toggle_number(29))\nprint(even_bit_toggle_number(30))\nprint(even_bit_toggle_number(31))\nprint(even_bit_toggle_number(32))\nprint(even_bit_toggle_number(33))\nprint(even_bit_toggle_number(34))\nprint(even_bit_toggle_number(35))\nprint(even_bit_toggle_number(36))\nprint(even_bit_toggle_number(37))\nprint(even_bit_toggle_number(38))\nprint(even_bit_toggle_number(39))\nprint(even_bit_toggle_number(40))\nprint(even_bit_toggle_number(41))\nprint(even_bit_toggle_number(42))\nprint(even_bit_toggle_number(43))\nprint(even_bit_toggle_number(44))\nprint(even_bit_toggle_number(45))\nprint(even_bit_toggle_number(46))\nprint(even_bit_toggle_number(47", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(even_bit_toggle_number(12))\nprint(even_bit_toggle_number(13))\nprint(even_bit_toggle_number(14))\nprint(even_bit_toggle_number(15))\nprint(even_bit_toggle_number(16))\nprint(even_bit_toggle_number(17))\nprint(even_bit_toggle_number(18))\nprint(even_bit_toggle_number(19))\nprint(even_bit_toggle_number(20))\nprint(even_bit_toggle_number(21))\nprint(even_bit_toggle_number(22))\nprint(even_bit_toggle_number(23))\nprint(even_bit_toggle_number(24))\nprint(even_bit_toggle_number(25))\nprint(even_bit_toggle_number(26))\nprint(even_bit_toggle_number(27))\nprint(even_bit_toggle_number(28))\nprint(even_bit_toggle_number(29))\nprint(even_bit_toggle_number(30))\nprint(even_bit_toggle_number(31))\nprint(even_bit_toggle_number(32))\nprint(even_bit_toggle_number(33))\nprint(even_bit_toggle_number(34))\nprint(even_bit_toggle_number(35))\nprint(even_bit_toggle_number(36))\nprint(even_bit_toggle_number(37))\nprint(even_bit_toggle_number(38))\nprint(even_bit_toggle_number(39))\nprint(even_bit_toggle_number(40))\nprint(even_bit_toggle_number(41))\nprint(even_bit_toggle_number(42))\nprint(even_bit_toggle_number(43))\nprint(even_bit_toggle_number(44))\nprint(even_bit_toggle_number(45))\nprint(even_bit_toggle_number(46))\nprint(even_bit_toggle_number(47"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\treturn tuple(int(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int(tuple_int):\n\treturn tuple(str(i) for i in tuple_int)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of float values.\n\"\"\"\ndef tuple_float_str(tuple_str):\n\treturn tuple(float(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of float values to a tuple of string values.\n\"\"\"\ndef tuple_str_float(tuple_float):\n\treturn tuple(str(i) for i in tuple_float)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of boolean values.\n\"\"\"\ndef tuple_bool_str(tuple_str):\n\treturn tuple(bool(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of boolean values to a tuple of string values.\n\"\"\"\ndef tuple_str_bool(tuple_bool):\n\treturn tuple(str(i) for i in tuple_bool)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of list values.\n\"\"\"\ndef tuple_list_str(tuple_str):\n\treturn tuple(list(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of list values to a tuple of string values.\n\"\"\"\ndef tuple_str_list(tuple_list):\n\treturn tuple(str(i) for i in tuple_list)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of tuple values.\n\"\"\"\ndef tuple_tuple_str(tuple_str):\n\treturn tuple(tuple(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of tuple values to a tuple of string values.\n\"\"\"\ndef tuple_str_tuple(tuple_tuple):\n\treturn tuple(str(i) for i in tuple_tuple)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of dictionary values", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to convert a tuple of integer values to a tuple of string values.\n\"\"\"\ndef tuple_str_int(tuple_int):\n\treturn tuple(str(i) for i in tuple_int)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of float values.\n\"\"\"\ndef tuple_float_str(tuple_str):\n\treturn tuple(float(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of float values to a tuple of string values.\n\"\"\"\ndef tuple_str_float(tuple_float):\n\treturn tuple(str(i) for i in tuple_float)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of boolean values.\n\"\"\"\ndef tuple_bool_str(tuple_str):\n\treturn tuple(bool(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of boolean values to a tuple of string values.\n\"\"\"\ndef tuple_str_bool(tuple_bool):\n\treturn tuple(str(i) for i in tuple_bool)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of list values.\n\"\"\"\ndef tuple_list_str(tuple_str):\n\treturn tuple(list(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of list values to a tuple of string values.\n\"\"\"\ndef tuple_str_list(tuple_list):\n\treturn tuple(str(i) for i in tuple_list)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of tuple values.\n\"\"\"\ndef tuple_tuple_str(tuple_str):\n\treturn tuple(tuple(i) for i in tuple_str)\n\n\"\"\"\nWrite a function to convert a tuple of tuple values to a tuple of string values.\n\"\"\"\ndef tuple_str_tuple(tuple_tuple):\n\treturn tuple(str(i) for i in tuple_tuple)\n\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of dictionary values"}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l)/2\n\n\"\"\"\nWrite a function to calculate the distance between two points.\n\"\"\"\ndef distance(x1,y1,x2,y2):\n\treturn ((x2-x1)**2 + (y2-y1)**2)**0.5\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14159*(r**3)\n\n\"\"\"\nWrite a function to calculate the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\treturn 4*3.14159*(r**2)\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14159*(r**2)\n\n\"\"\"\nWrite a function to calculate the circumference of a circle.\n\"\"\"\ndef circumference(r):\n\treturn 2*3.14159*r\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,h):\n\treturn ((a+b)*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn (d1*d2)/2\n\n\"\"\"\nWrite a function to calculate the area of a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef distance(x1,y1,x2,y2):\n\treturn ((x2-x1)**2 + (y2-y1)**2)**0.5\n\n\"\"\"\nWrite a function to calculate the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14159*(r**3)\n\n\"\"\"\nWrite a function to calculate the surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(r):\n\treturn 4*3.14159*(r**2)\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14159*(r**2)\n\n\"\"\"\nWrite a function to calculate the circumference of a circle.\n\"\"\"\ndef circumference(r):\n\treturn 2*3.14159*r\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,h):\n\treturn ((a+b)*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn (d1*d2)/2\n\n\"\"\"\nWrite a function to calculate the area of a"}
{"ID": 528, "source": "MBPP:165", "prompt": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\"\"\"\ndef count_char_position(str1): \n\tcount = 0\n\tfor i in range(len(str1)):\n\t\tif str1[i].isalpha():\n\t\t\tcount += 1\n\treturn count\nprint(count_char_position(\"Python\"))\nprint(count_char_position(\"Java\"))\nprint(count_char_position(\"PHP\"))\nprint(count_char_position(\"C++\"))\nprint(count_char_position(\"Perl\"))\nprint(count_char_position(\"Ruby\"))\nprint(count_char_position(\"C#\"))\nprint(count_char_position(\"F#\"))\nprint(count_char_position(\"Kotlin\"))\nprint(count_char_position(\"Swift\"))\nprint(count_char_position(\"Dart\"))\nprint(count_char_position(\"JavaScript\"))\nprint(count_char_position(\"TypeScript\"))\nprint(count_char_position(\"React\"))\nprint(count_char_position(\"Angular\"))\nprint(count_char_position(\"Vue\"))\nprint(count_char_position(\"MongoDB\"))\nprint(count_char_position(\"Oracle\"))\nprint(count_char_position(\"MySQL\"))\nprint(count_char_position(\"PostgreSQL\"))\nprint(count_char_position(\"SQLite\"))\nprint(count_char_position(\"MSSQL\"))\nprint(count_char_position(\"Amazon Web Services\"))\nprint(count_char_position(\"Microsoft Azure\"))\nprint(count_char_position(\"Google Cloud Platform\"))\nprint(count_char_position(\"Red Hat OpenShift\"))\nprint(count_char_position(\"Docker\"))\nprint(count_char_position(\"Kubernetes\"))\nprint(count_char_position(\"AWS Lambda\"))\nprint(count_char_position(\"Azure Functions\"))\nprint(count_char_position(\"Google Cloud Functions\"))\nprint(count_char_position(\"OpenCV\"))\nprint(count_char_position(\"TensorFlow\"))\nprint(count_char_position(\"Keras\"))\nprint(count_char_position(\"PyTorch\"))\nprint(count_char_position(\"Scikit-Learn\"))\nprint(count_char_position(\"NLTK\"))\nprint(count_char_position(\"Sp", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_char_position(\"Python\"))\nprint(count_char_position(\"Java\"))\nprint(count_char_position(\"PHP\"))\nprint(count_char_position(\"C++\"))\nprint(count_char_position(\"Perl\"))\nprint(count_char_position(\"Ruby\"))\nprint(count_char_position(\"C#\"))\nprint(count_char_position(\"F#\"))\nprint(count_char_position(\"Kotlin\"))\nprint(count_char_position(\"Swift\"))\nprint(count_char_position(\"Dart\"))\nprint(count_char_position(\"JavaScript\"))\nprint(count_char_position(\"TypeScript\"))\nprint(count_char_position(\"React\"))\nprint(count_char_position(\"Angular\"))\nprint(count_char_position(\"Vue\"))\nprint(count_char_position(\"MongoDB\"))\nprint(count_char_position(\"Oracle\"))\nprint(count_char_position(\"MySQL\"))\nprint(count_char_position(\"PostgreSQL\"))\nprint(count_char_position(\"SQLite\"))\nprint(count_char_position(\"MSSQL\"))\nprint(count_char_position(\"Amazon Web Services\"))\nprint(count_char_position(\"Microsoft Azure\"))\nprint(count_char_position(\"Google Cloud Platform\"))\nprint(count_char_position(\"Red Hat OpenShift\"))\nprint(count_char_position(\"Docker\"))\nprint(count_char_position(\"Kubernetes\"))\nprint(count_char_position(\"AWS Lambda\"))\nprint(count_char_position(\"Azure Functions\"))\nprint(count_char_position(\"Google Cloud Functions\"))\nprint(count_char_position(\"OpenCV\"))\nprint(count_char_position(\"TensorFlow\"))\nprint(count_char_position(\"Keras\"))\nprint(count_char_position(\"PyTorch\"))\nprint(count_char_position(\"Scikit-Learn\"))\nprint(count_char_position(\"NLTK\"))\nprint(count_char_position(\"Sp"}
{"ID": 534, "source": "MBPP:171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a pentagon.\n\"\"\"\ndef perimeter_pentagon(a):\n\treturn 5*a\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b, h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\treturn a**3\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l, b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b, h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a, b, h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1, d2):\n\treturn (d1*d2)/2\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(r, h):\n\treturn 2*3.14*r*h + 2*3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(r, h):\n\treturn 3.14*r*h + 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a cuboid.\n\"\"\"\ndef area_cuboid(l, b, h):\n\treturn 2*(l*b + b*h + h*l)\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 5*a\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b, h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(a):\n\treturn a**3\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l, b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b, h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a, b, h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1, d2):\n\treturn (d1*d2)/2\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(r, h):\n\treturn 2*3.14*r*h + 2*3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(r, h):\n\treturn 3.14*r*h + 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a cuboid.\n\"\"\"\ndef area_cuboid(l, b, h):\n\treturn 2*(l*b + b*h + h*l)\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef"}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in range(len(s)-2):\n\t\tif s[i:i+3] == 'std':\n\t\t\tcount += 1\n\treturn count\n\nprint(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_occurance('stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\tstack = []\n\tfor char in str1:\n\t\tif char == '(' or char == '[' or char == '{':\n\t\t\tstack.append(char)\n\t\telif char == ')' or char == ']' or char == '}':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\ttop = stack.pop()\n\t\t\tif char == ')' and top != '(':\n\t\t\t\treturn False\n\t\t\telif char == ']' and top != '[':\n\t\t\t\treturn False\n\t\t\telif char == '}' and top != '{':\n\t\t\t\treturn False\n\tif len(stack) != 0:\n\t\treturn False\n\treturn True\n\nprint(is_valid_parenthese(\"()\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(is_valid_parenthese(\"()[]{}()[]{\"))\nprint(is_valid_parenthese(\"()[]{}()[]}\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(is_valid_parenthese(\"()[]{}()[]{\"))\nprint(is_valid_parenthese(\"()[]{}()[]}\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(is_valid_parenthese(\"()[]{}()[]{\"))\nprint(is_valid_parenthese(\"()[]{}()[]}\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_valid_parenthese(\"()\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(is_valid_parenthese(\"()[]{}()[]{\"))\nprint(is_valid_parenthese(\"()[]{}()[]}\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(is_valid_parenthese(\"()[]{}()[]{\"))\nprint(is_valid_parenthese(\"()[]{}()[]}\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint(is_valid_parenthese(\"()[]{}()[]{\"))\nprint(is_valid_parenthese(\"()[]{}()[]}\"))\nprint(is_valid_parenthese(\"()[]{}()[]\"))\nprint(is_valid_parenthese(\"()[]{}()[]]\"))\nprint(is_valid_parenthese(\"()[]{}()[][\"))\nprint("}
{"ID": 542, "source": "MBPP:179", "prompt": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\t", "predict": "<s> \"\"\"\nWrite a function to find if the given number is a keith number or not.\n\"\"\"\ndef is_num_keith(x): \n\tn = x \n\ts = 0 \n\twhile (x > 0): \n\t\tr = x % 10\n\t\ts = s + r * r \n\t\tx = x // 10\n\tif (s == n): \n\t\treturn True\n\telse: \n\t\treturn False\n\n# Driver Code \nx = 5\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 14\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 10\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 12\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 13\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 14\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 15\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 16\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 17\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 18\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 19\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 20\nif (is_num_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n# Driver Code \nx = 5\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 14\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 10\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 12\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 13\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 14\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 15\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 16\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 17\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 18\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 19\nif (is_num_keith(x)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nx = 20\nif (is_num_"}
{"ID": 543, "source": "MBPP:180", "prompt": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\td = R * c\n\treturn d\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2) * math.sin(dlon/2)\n\tc = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\td = R * c\n\treturn d\n\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\n\timport math\n\tR = 6371 # Radius of the earth in km\n\tdlat = math.radians(elat-slat)\n\tdlon = math.radians(elon-slon)\n\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2)", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ta = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon/2)"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x < num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in list if x > num]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x < num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):\n\treturn [x for x in list if x > num1 and x <= num2]\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number and less than another specified number.\n\"\"\"\ndef greater_less_equal_specificnum(list,num1,num2):"}
{"ID": 548, "source": "MBPP:185", "prompt": "\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\treturn (b**2 - 4*a*c)**0.5\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base, height):\n\treturn (base * height) / 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(radius):\n\treturn (4/3) * 3.14 * (radius**3)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(radius):\n\treturn 3.14 * (radius**2)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(length, width):\n\treturn length * width\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base, height):\n\treturn (base * height) / 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(base1, base2, height):\n\treturn ((base1 + base2) * height) / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(base, height):\n\treturn base * height\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(diagonal1, diagonal2):\n\treturn (diagonal1 * diagonal2) / 2\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(side, apothem):\n\treturn (5 * side * apothem) / 2\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(side, apothem):\n\treturn (6 * side * apothem) / 2\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(side, apothem):\n\treturn (7 * side * apothem) /", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (base * height) / 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(radius):\n\treturn (4/3) * 3.14 * (radius**3)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(radius):\n\treturn 3.14 * (radius**2)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(length, width):\n\treturn length * width\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base, height):\n\treturn (base * height) / 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(base1, base2, height):\n\treturn ((base1 + base2) * height) / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(base, height):\n\treturn base * height\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(diagonal1, diagonal2):\n\treturn (diagonal1 * diagonal2) / 2\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef pentagon_area(side, apothem):\n\treturn (5 * side * apothem) / 2\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(side, apothem):\n\treturn (6 * side * apothem) / 2\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef heptagon_area(side, apothem):"}
{"ID": 557, "source": "MBPP:194", "prompt": "\"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert octal number to decimal number.\n\"\"\"\ndef octal_To_Decimal(n):  \n\treturn int(n, 8)\n\nprint(octal_To_Decimal(123))\nprint(octal_To_Decimal(12345))\nprint(octal_To_Decimal(123456))\nprint(octal_To_Decimal(1234567))\nprint(octal_To_Decimal(12345678))\nprint(octal_To_Decimal(123456789))\nprint(octal_To_Decimal(1234567890))\nprint(octal_To_Decimal(12345678901))\nprint(octal_To_Decimal(123456789012))\nprint(octal_To_Decimal(1234567890123))\nprint(octal_To_Decimal(12345678901234))\nprint(octal_To_Decimal(123456789012345))\nprint(octal_To_Decimal(1234567890123456))\nprint(octal_To_Decimal(12345678901234567))\nprint(octal_To_Decimal(123456789012345678))\nprint(octal_To_Decimal(1234567890123456789))\nprint(octal_To_Decimal(12345678901234567890))\nprint(octal_To_Decimal(123456789012345678901))\nprint(octal_To_Decimal(1234567890123456789012))\nprint(octal_To_Decimal(12345678901234567890123))\nprint(octal_To_Decimal(1234", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(octal_To_Decimal(123))\nprint(octal_To_Decimal(12345))\nprint(octal_To_Decimal(123456))\nprint(octal_To_Decimal(1234567))\nprint(octal_To_Decimal(12345678))\nprint(octal_To_Decimal(123456789))\nprint(octal_To_Decimal(1234567890))\nprint(octal_To_Decimal(12345678901))\nprint(octal_To_Decimal(123456789012))\nprint(octal_To_Decimal(1234567890123))\nprint(octal_To_Decimal(12345678901234))\nprint(octal_To_Decimal(123456789012345))\nprint(octal_To_Decimal(1234567890123456))\nprint(octal_To_Decimal(12345678901234567))\nprint(octal_To_Decimal(123456789012345678))\nprint(octal_To_Decimal(1234567890123456789))\nprint(octal_To_Decimal(12345678901234567890))\nprint(octal_To_Decimal(123456789012345678901))\nprint(octal_To_Decimal(1234567890123456789012))\nprint(octal_To_Decimal(12345678901234567890123))\nprint(octal_To_Decimal(1234"}
{"ID": 561, "source": "MBPP:198", "prompt": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\"\"\"\ndef largest_triangle(a,b): \n\t# find the largest triangle that can be inscribed in an ellipse\n\t# a and b are the lengths of the semi-axes of the ellipse\n\t# return the area of the triangle\n\t# return 0 if no triangle can be inscribed\n\t# assume a and b are positive\n\t# assume a >= b\n\t# assume a and b are integers\n\t# assume a and b are relatively prime\n\t# assume a and b are not both 1\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t# assume a and b are positive\n\t# assume a >= b\n\t# assume a and b are integers\n\t# assume a and b are relatively prime\n\t# assume a and b are not both 1\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b are not both negative\n\t# assume a and b are not both 0\n\t# assume a and b"}
{"ID": 562, "source": "MBPP:199", "prompt": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\n\"\"\"\ndef highest_Power_of_2(n): \n\treturn 2 ** (n.bit_length() - 1)\n\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(48))\nprint(highest_Power_of_2(56))\nprint(highest_Power_of_2(64))\nprint(highest_Power_of_2(72))\nprint(highest_Power_of_2(80))\nprint(highest_Power_of_2(88))\nprint(highest_Power_of_2(96))\nprint(highest_Power_of_2(104))\nprint(highest_Power_of_2(112))\nprint(highest_Power_of_2(120))\nprint(highest_Power_of_2(128))\nprint(highest_Power_of_2(136))\nprint(highest_Power_of_2(144))\nprint(highest_Power_of_2(152))\nprint(highest_Power_of_2(160))\nprint(highest_Power_of_2(168))\nprint(highest_Power_of_2(176))\nprint(highest_Power_of_2(184))\nprint(highest_Power_of_2(192))\nprint(highest_Power_of_2(200))\nprint(highest_Power_of_2(208))\nprint(highest_Power_of_2(216))\nprint(highest_Power_of_2(224))\nprint(highest_Power_of_2(232))\nprint(highest_Power_of_2(240))\nprint(highest_Power_of_2(248))\nprint(highest_Power_of_2(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(highest_Power_of_2(10))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(48))\nprint(highest_Power_of_2(56))\nprint(highest_Power_of_2(64))\nprint(highest_Power_of_2(72))\nprint(highest_Power_of_2(80))\nprint(highest_Power_of_2(88))\nprint(highest_Power_of_2(96))\nprint(highest_Power_of_2(104))\nprint(highest_Power_of_2(112))\nprint(highest_Power_of_2(120))\nprint(highest_Power_of_2(128))\nprint(highest_Power_of_2(136))\nprint(highest_Power_of_2(144))\nprint(highest_Power_of_2(152))\nprint(highest_Power_of_2(160))\nprint(highest_Power_of_2(168))\nprint(highest_Power_of_2(176))\nprint(highest_Power_of_2(184))\nprint(highest_Power_of_2(192))\nprint(highest_Power_of_2(200))\nprint(highest_Power_of_2(208))\nprint(highest_Power_of_2(216))\nprint(highest_Power_of_2(224))\nprint(highest_Power_of_2(232))\nprint(highest_Power_of_2(240))\nprint(highest_Power_of_2(248))\nprint(highest_Power_of_2("}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\timport re\n\tpattern = r\"^[+-]?\\d+\\.\\d{2}$\"\n\tresult = re.match(pattern, num)\n\tif result:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(is_decimal(\"12.34\"))\nprint(is_decimal(\"12.3\"))\nprint(is_decimal(\"12.345\"))\nprint(is_decimal(\"12.3456\"))\nprint(is_decimal(\"12.34567\"))\nprint(is_decimal(\"12.345678\"))\nprint(is_decimal(\"12.3456789\"))\nprint(is_decimal(\"12.34567890\"))\nprint(is_decimal(\"12.345678901\"))\nprint(is_decimal(\"12.3456789012\"))\nprint(is_decimal(\"12.34567890123\"))\nprint(is_decimal(\"12.345678901234\"))\nprint(is_decimal(\"12.3456789012345\"))\nprint(is_decimal(\"12.34567890123456\"))\nprint(is_decimal(\"12.345678901234567\"))\nprint(is_decimal(\"12.3456789012345678\"))\nprint(is_decimal(\"12.34567890123456789\"))\nprint(is_decimal(\"12.345678901234567890\"))\nprint(is_decimal(\"12.3456789012345678901\"))\nprint(is_decimal(\"12.34567890123456789012\"))\nprint(is_decimal", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_decimal(\"12.34\"))\nprint(is_decimal(\"12.3\"))\nprint(is_decimal(\"12.345\"))\nprint(is_decimal(\"12.3456\"))\nprint(is_decimal(\"12.34567\"))\nprint(is_decimal(\"12.345678\"))\nprint(is_decimal(\"12.3456789\"))\nprint(is_decimal(\"12.34567890\"))\nprint(is_decimal(\"12.345678901\"))\nprint(is_decimal(\"12.3456789012\"))\nprint(is_decimal(\"12.34567890123\"))\nprint(is_decimal(\"12.345678901234\"))\nprint(is_decimal(\"12.3456789012345\"))\nprint(is_decimal(\"12.34567890123456\"))\nprint(is_decimal(\"12.345678901234567\"))\nprint(is_decimal(\"12.3456789012345678\"))\nprint(is_decimal(\"12.34567890123456789\"))\nprint(is_decimal(\"12.345678901234567890\"))\nprint(is_decimal(\"12.3456789012345678901\"))\nprint(is_decimal(\"12.34567890123456789012\"))\nprint(is_decimal"}
{"ID": 576, "source": "MBPP:213", "prompt": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to perform the concatenation of two string tuples.\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\n\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two lists.\n\"\"\"\ndef concatenate_lists(test_list1, test_list2):\n\treturn test_list1 + test_list2\n\n\"\"\"\nWrite a function to perform the concatenation of two dictionaries.\n\"\"\"\ndef concatenate_dictionaries(test_dict1, test_dict2):\n\treturn {**test_dict1, **test_dict2}\n\n\"\"\"\nWrite a function to perform the concatenation of two sets.\n\"\"\"\ndef concatenate_sets(test_set1, test_set2):\n\treturn test_set1 | test_set2\n\n\"\"\"\nWrite a function to perform the concatenation of two tuples.\n\"\"\"\ndef concatenate_tuples(test_tup1, test_tup2):\n\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two lists.\n\"\"\"\ndef concatenate_lists(test_list1, test_list2):\n\treturn test_list1 + test_list2\n\n\"\"\"\nWrite a function to perform the concatenation of two dictionaries.\n\"\"\"\ndef concatenate_dictionaries(test_dict1, test_dict2):\n\treturn {**test_dict1, **test_dict2}\n\n\"\"\"\nWrite a function to perform the concatenation of two sets.\n\"\"\"\ndef concatenate_sets(test_set1, test_set2):\n\treturn test_set1 | test_set2\n\n\"\"\"\nWrite a function to perform the concatenation of two tuples.\n\"\"\"\ndef concatenate_tuples(test_tup1, test_tup2):\n\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two lists.\n\"\"\"\ndef concatenate_lists(test_list1, test_list2):\n\treturn test_list1 + test_list2\n\n\"\"\"\nWrite a function to perform the concatenation of two dictionaries.\n\"\"\"\ndef concatenate_dictionaries(test_dict1, test", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two lists.\n\"\"\"\ndef concatenate_lists(test_list1, test_list2):\n\treturn test_list1 + test_list2\n\n\"\"\"\nWrite a function to perform the concatenation of two dictionaries.\n\"\"\"\ndef concatenate_dictionaries(test_dict1, test_dict2):\n\treturn {**test_dict1, **test_dict2}\n\n\"\"\"\nWrite a function to perform the concatenation of two sets.\n\"\"\"\ndef concatenate_sets(test_set1, test_set2):\n\treturn test_set1 | test_set2\n\n\"\"\"\nWrite a function to perform the concatenation of two tuples.\n\"\"\"\ndef concatenate_tuples(test_tup1, test_tup2):\n\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two lists.\n\"\"\"\ndef concatenate_lists(test_list1, test_list2):\n\treturn test_list1 + test_list2\n\n\"\"\"\nWrite a function to perform the concatenation of two dictionaries.\n\"\"\"\ndef concatenate_dictionaries(test_dict1, test_dict2):\n\treturn {**test_dict1, **test_dict2}\n\n\"\"\"\nWrite a function to perform the concatenation of two sets.\n\"\"\"\ndef concatenate_sets(test_set1, test_set2):\n\treturn test_set1 | test_set2\n\n\"\"\"\nWrite a function to perform the concatenation of two tuples.\n\"\"\"\ndef concatenate_tuples(test_tup1, test_tup2):\n\treturn test_tup1 + test_tup2\n\n\"\"\"\nWrite a function to perform the concatenation of two lists.\n\"\"\"\ndef concatenate_lists(test_list1, test_list2):\n\treturn test_list1 + test_list2\n\n\"\"\"\nWrite a function to perform the concatenation of two dictionaries.\n\"\"\"\ndef concatenate_dictionaries(test_dict1, test"}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive_2(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive_2(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive_3(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive_3(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive_4(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True\n\ndef check_subset_nested_list(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive_2(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive_2(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive_3(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive_3(i, list2[list1.index(i)]): \n\t\t\t\treturn False\n\treturn True\n\ndef check_subset_nested_list_recursive_4(list1, list2): \n\tfor i in list1: \n\t\tif i not in list2: \n\t\t\treturn False\n\t\telif isinstance(i, list): \n\t\t\tif not check_subset_nested_list_recursive_"}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif str[i] in str[i+1:]: \n\t\t\treturn str[i] \n\treturn None\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first_Repeated_Char(\"C\"))\nprint(first_Repeated_Char(\"Java\"))\nprint(first_Repeated_Char(\"Python\"))\nprint(first_Repeated_Char(\"C++\"))\nprint(first_Repeated_Char(\"PHP\"))\nprint(first_Repeated_Char(\"C#\"))\nprint(first"}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\tif n == 0:\n\t\treturn text\n\telse:\n\t\tfor i in range(len(text)):\n\t\t\tif text[i] == ' ' or text[i] == ',' or text[i] == '.':\n\t\t\t\ttext = text[:i] + ':' + text[i+1:]\n\t\t\t\tn -= 1\n\t\t\t\tif n == 0:\n\t\t\t\t\tbreak\n\t\treturn text\n\nprint(replace_max_specialchar(\"hello, world. this is a test\", 2))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 0))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 10))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 1))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 3))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 4))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 5))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 6))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 7))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 8))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 9))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 10))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 11))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 12))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 13))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 14))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 15))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 16", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(replace_max_specialchar(\"hello, world. this is a test\", 2))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 0))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 10))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 1))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 3))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 4))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 5))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 6))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 7))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 8))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 9))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 10))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 11))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 12))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 13))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 14))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 15))\nprint(replace_max_specialchar(\"hello, world. this is a test\", 16"}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"Python\"))\nprint(odd_values_string(\"Java\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"PHP\"))\nprint(odd_values_string(\"Perl\"))\nprint(odd_values_string(\"Ruby\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"F#\"))\nprint(odd_values_string(\"Kotlin\"))\nprint(odd_values_string(\"Swift\"))\nprint(odd_values_string(\"MATLAB\"))\nprint(odd_values_string(\"Objective-C\"))\nprint(odd_values_string(\"Objective-C++\"))\nprint(odd_values_string(\"Dart\"))\nprint(odd_values_string(\"Groovy\"))\nprint(odd_values_string(\"Scala\"))\nprint(odd_values_string(\"Clojure\"))\nprint(odd_values_string(\"Haskell\"))\nprint(odd_values_string(\"R\"))\nprint(odd_values_string(\"Erlang\"))\nprint(odd_values_string(\"Elixir\"))\nprint(odd_values_string(\"Elm\"))\nprint(odd_values_string(\"Julia\"))\nprint(odd_values_string(\"Racket\"))\nprint(odd_values_string(\"Nim\"))\nprint(odd_values_string(\"Ceylon\"))\nprint(odd_values_string(\"Scheme\"))\nprint(odd_values_string(\"Assembly\"))\nprint(odd_values_string(\"Brainfuck\"))\nprint(odd_values_string(\"Lua\"))\nprint(odd_values_string(\"TypeScript\"))\nprint(odd_values_string(\"CoffeeScript\"))\nprint(odd_values_string(\"Pascal\"))\nprint(odd_values_string(\"Hack\"))\nprint(odd_values_string(\"Go\"))\nprint(odd_values_string(\"Rust\"))\nprint(odd_values_string(\"SML\"))\nprint(odd_values_string(\"OCaml\"))\nprint(odd_values_string(\"Fortran\"))\nprint(odd", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(odd_values_string(\"Python\"))\nprint(odd_values_string(\"Java\"))\nprint(odd_values_string(\"C++\"))\nprint(odd_values_string(\"PHP\"))\nprint(odd_values_string(\"Perl\"))\nprint(odd_values_string(\"Ruby\"))\nprint(odd_values_string(\"C#\"))\nprint(odd_values_string(\"F#\"))\nprint(odd_values_string(\"Kotlin\"))\nprint(odd_values_string(\"Swift\"))\nprint(odd_values_string(\"MATLAB\"))\nprint(odd_values_string(\"Objective-C\"))\nprint(odd_values_string(\"Objective-C++\"))\nprint(odd_values_string(\"Dart\"))\nprint(odd_values_string(\"Groovy\"))\nprint(odd_values_string(\"Scala\"))\nprint(odd_values_string(\"Clojure\"))\nprint(odd_values_string(\"Haskell\"))\nprint(odd_values_string(\"R\"))\nprint(odd_values_string(\"Erlang\"))\nprint(odd_values_string(\"Elixir\"))\nprint(odd_values_string(\"Elm\"))\nprint(odd_values_string(\"Julia\"))\nprint(odd_values_string(\"Racket\"))\nprint(odd_values_string(\"Nim\"))\nprint(odd_values_string(\"Ceylon\"))\nprint(odd_values_string(\"Scheme\"))\nprint(odd_values_string(\"Assembly\"))\nprint(odd_values_string(\"Brainfuck\"))\nprint(odd_values_string(\"Lua\"))\nprint(odd_values_string(\"TypeScript\"))\nprint(odd_values_string(\"CoffeeScript\"))\nprint(odd_values_string(\"Pascal\"))\nprint(odd_values_string(\"Hack\"))\nprint(odd_values_string(\"Go\"))\nprint(odd_values_string(\"Rust\"))\nprint(odd_values_string(\"SML\"))\nprint(odd_values_string(\"OCaml\"))\nprint(odd_values_string(\"Fortran\"))\nprint(odd"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a,b,c)\n\n\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two(a,b): \n\treturn min(a,b)\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a,b,c)\n\n\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two(a,b): \n\treturn max(a,b)\n\n\"\"\"\nWrite a function to find the average of three numbers.\n\"\"\"\ndef average_of_three(a,b,c): \n\treturn (a+b+c)/3\n\n\"\"\"\nWrite a function to find the average of two numbers.\n\"\"\"\ndef average_of_two(a,b): \n\treturn (a+b)/2\n\n\"\"\"\nWrite a function to find the average of four numbers.\n\"\"\"\ndef average_of_four(a,b,c,d): \n\treturn (a+b+c+d)/4\n\n\"\"\"\nWrite a function to find the average of five numbers.\n\"\"\"\ndef average_of_five(a,b,c,d,e): \n\treturn (a+b+c+d+e)/5\n\n\"\"\"\nWrite a function to find the average of six numbers.\n\"\"\"\ndef average_of_six(a,b,c,d,e,f): \n\treturn (a+b+c+d+e+f)/6\n\n\"\"\"\nWrite a function to find the average of seven numbers.\n\"\"\"\ndef average_of_seven(a,b,c,d,e,f,g): \n\treturn (a+b+c+d+e+f+g)/7\n\n\"\"\"\nWrite a function to find the average of eight numbers.\n\"\"\"\ndef average_of_eight(a,b,c,d,e,f,g,h): \n\treturn (a+b+c+d+e+f+g+h)/8\n\n\"\"\"\nWrite", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn min(a,b,c)\n\n\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two(a,b): \n\treturn min(a,b)\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a,b,c)\n\n\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two(a,b): \n\treturn max(a,b)\n\n\"\"\"\nWrite a function to find the average of three numbers.\n\"\"\"\ndef average_of_three(a,b,c): \n\treturn (a+b+c)/3\n\n\"\"\"\nWrite a function to find the average of two numbers.\n\"\"\"\ndef average_of_two(a,b): \n\treturn (a+b)/2\n\n\"\"\"\nWrite a function to find the average of four numbers.\n\"\"\"\ndef average_of_four(a,b,c,d): \n\treturn (a+b+c+d)/4\n\n\"\"\"\nWrite a function to find the average of five numbers.\n\"\"\"\ndef average_of_five(a,b,c,d,e): \n\treturn (a+b+c+d+e)/5\n\n\"\"\"\nWrite a function to find the average of six numbers.\n\"\"\"\ndef average_of_six(a,b,c,d,e,f): \n\treturn (a+b+c+d+e+f)/6\n\n\"\"\"\nWrite a function to find the average of seven numbers.\n\"\"\"\ndef average_of_seven(a,b,c,d,e,f,g): \n\treturn (a+b+c+d+e+f+g)/7\n\n\"\"\"\nWrite a function to find the average of eight numbers.\n\"\"\"\ndef average_of_eight(a,b,c,d,e,f,g,h): "}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\tlist1.sort()\n\treturn list1[-n:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(r,h):\n\treturn 2*3.14*r*h\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef area_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(r,h):\n\treturn 3.14*r*h\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l**3\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\ndef area_cylinder(r,h):\n\treturn 2*3.14*r*h\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef area_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a cone.\n\"\"\"\ndef area_cone(r,h):"}
{"ID": 600, "source": "MBPP:237", "prompt": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\n\"\"\"\ndef check_occurences(test_list):\n\t\"\"\"\n\t:param test_list: list of tuples\n\t:return: list of tuples\n\t\"\"\"\n\tresult = []\n\tfor i in test_list:\n\t\tif i not in result:\n\t\t\tresult.append(i)\n\treturn result\n\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1,", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1,"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\treturn b,a\n\n\"\"\"\nWrite a function to check if a number is even or not.\n\"\"\"\ndef is_even(n):\n\treturn n%2==0\n\n\"\"\"\nWrite a function to check if a number is odd or not.\n\"\"\"\ndef is_odd(n):\n\treturn n%2!=0\n\n\"\"\"\nWrite a function to check if a number is positive or not.\n\"\"\"\ndef is_positive(n):\n\treturn n>0\n\n\"\"\"\nWrite a function to check if a number is negative or not.\n\"\"\"\ndef is_negative(n):\n\treturn n<0\n\n\"\"\"\nWrite a function to check if a number is divisible by another number.\n\"\"\"\ndef is_divisible(n,d):\n\treturn n%d==0\n\n\"\"\"\nWrite a function to check if a number is a multiple of another number.\n\"\"\"\ndef is_multiple(n,m):\n\treturn n%m==0\n\n\"\"\"\nWrite a function to check if a number is a factor of another number.\n\"\"\"\ndef is_factor(n,f):\n\treturn n%f==0\n\n\"\"\"\nWrite a function to check if a number is a palindrome or not.\n\"\"\"\ndef is_palindrome(n):\n\treturn str(n)==str(n)[::-1]\n\n\"\"\"\nWrite a function to check if a number is a prime number or not.\n\"\"\"\ndef is_prime(n):\n\tif n<2:\n\t\treturn False\n\tfor i in range(2,n):\n\t\tif n%i==0:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if a number is a composite number or not.\n\"\"\"\ndef is_composite(n):\n\tif n<2:\n\t\treturn False\n\tfor i in range(2,n):\n\t\tif n%i==0:\n\t\t\treturn True\n\treturn False\n\n\"\"\"\nWrite a function to check if a number is a perfect square or not.\n\"\"\"\ndef is_perfect_square(n):\n\treturn (n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn b,a\n\n\"\"\"\nWrite a function to check if a number is even or not.\n\"\"\"\ndef is_even(n):\n\treturn n%2==0\n\n\"\"\"\nWrite a function to check if a number is odd or not.\n\"\"\"\ndef is_odd(n):\n\treturn n%2!=0\n\n\"\"\"\nWrite a function to check if a number is positive or not.\n\"\"\"\ndef is_positive(n):\n\treturn n>0\n\n\"\"\"\nWrite a function to check if a number is negative or not.\n\"\"\"\ndef is_negative(n):\n\treturn n<0\n\n\"\"\"\nWrite a function to check if a number is divisible by another number.\n\"\"\"\ndef is_divisible(n,d):\n\treturn n%d==0\n\n\"\"\"\nWrite a function to check if a number is a multiple of another number.\n\"\"\"\ndef is_multiple(n,m):\n\treturn n%m==0\n\n\"\"\"\nWrite a function to check if a number is a factor of another number.\n\"\"\"\ndef is_factor(n,f):\n\treturn n%f==0\n\n\"\"\"\nWrite a function to check if a number is a palindrome or not.\n\"\"\"\ndef is_palindrome(n):\n\treturn str(n)==str(n)[::-1]\n\n\"\"\"\nWrite a function to check if a number is a prime number or not.\n\"\"\"\ndef is_prime(n):"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\tif n == 1: \n\t\treturn 2\n\tif n == 2: \n\t\treturn 3\n\tif n == 3: \n\t\treturn 7\n\tif n == 4: \n\t\treturn 43\n\tif n == 5: \n\t\treturn 1807\n\tif n == 6: \n\t\treturn 3217\n\tif n == 7: \n\t\treturn 132203\n\tif n == 8: \n\t\treturn 1322031\n\tif n == 9: \n\t\treturn 13220311\n\tif n == 10: \n\t\treturn 132203113\n\tif n == 11: \n\t\treturn 1322031131\n\tif n == 12: \n\t\treturn 13220311311\n\tif n == 13: \n\t\treturn 132203113113\n\tif n == 14: \n\t\treturn 1322031131131\n\tif n == 15: \n\t\treturn 13220311311311\n\tif n == 16: \n\t\treturn 132203113113113\n\tif n == 17: \n\t\treturn 1322031131131131\n\tif n == 18: \n\t\treturn 13220311311311311\n\tif n == 19: \n\t\treturn 132203113113113113\n\tif n == 20: \n\t\treturn 1322031131131131131\n\tif n == 21: \n\t\treturn 13220311311311311311", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1: \n\t\treturn 2\n\tif n == 2: \n\t\treturn 3\n\tif n == 3: \n\t\treturn 7\n\tif n == 4: \n\t\treturn 43\n\tif n == 5: \n\t\treturn 1807\n\tif n == 6: \n\t\treturn 3217\n\tif n == 7: \n\t\treturn 132203\n\tif n == 8: \n\t\treturn 1322031\n\tif n == 9: \n\t\treturn 13220311\n\tif n == 10: \n\t\treturn 132203113\n\tif n == 11: \n\t\treturn 1322031131\n\tif n == 12: \n\t\treturn 13220311311\n\tif n == 13: \n\t\treturn 132203113113\n\tif n == 14: \n\t\treturn 1322031131131\n\tif n == 15: \n\t\treturn 13220311311311\n\tif n == 16: \n\t\treturn 132203113113113\n\tif n == 17: \n\t\treturn 1322031131131131\n\tif n == 18: \n\t\treturn 13220311311311311\n\tif n == 19: \n\t\treturn 132203113113113113\n\tif n == 20: \n\t\treturn 1322031131131131131\n\tif n == 21: \n\t\treturn 13220311311311311311"}
{"ID": 627, "source": "MBPP:264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"\ndef dog_age(h_age):\n\treturn h_age * 7\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the\nnumbers.\n\"\"\"\ndef sum_numbers(numbers):\n\treturn sum(numbers)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest\nnumber in the list.\n\"\"\"\ndef largest_number(numbers):\n\treturn max(numbers)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest\nnumber in the list.\n\"\"\"\ndef smallest_number(numbers):\n\treturn min(numbers)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the average\nof the numbers.\n\"\"\"\ndef average(numbers):\n\treturn sum(numbers) / len(numbers)\n\n\"\"\"\nWrite a function that takes a list of strings and returns the longest\nstring in the list.\n\"\"\"\ndef longest_string(strings):\n\treturn max(strings, key=len)\n\n\"\"\"\nWrite a function that takes a list of strings and returns the shortest\nstring in the list.\n\"\"\"\ndef shortest_string(strings):\n\treturn min(strings, key=len)\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that start with the letter 'a'.\n\"\"\"\ndef starts_with_a(strings):\n\treturn len([s for s in strings if s.startswith('a')])\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that end with the letter 'y'.\n\"\"\"\ndef ends_with_y(strings):\n\treturn len([s for s in strings if s.endswith('y')])\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that contain the letter 'z'.\n\"\"\"\ndef contains_z(strings):\n\treturn len([s for s in strings if 'z' in s])\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that contain the letter 'a' and end with the letter 'y'.\n\"\"\"\ndef contains_a_and_ends_with_y(strings):\n\treturn len([s for s in", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn h_age * 7\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the\nnumbers.\n\"\"\"\ndef sum_numbers(numbers):\n\treturn sum(numbers)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the largest\nnumber in the list.\n\"\"\"\ndef largest_number(numbers):\n\treturn max(numbers)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the smallest\nnumber in the list.\n\"\"\"\ndef smallest_number(numbers):\n\treturn min(numbers)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the average\nof the numbers.\n\"\"\"\ndef average(numbers):\n\treturn sum(numbers) / len(numbers)\n\n\"\"\"\nWrite a function that takes a list of strings and returns the longest\nstring in the list.\n\"\"\"\ndef longest_string(strings):\n\treturn max(strings, key=len)\n\n\"\"\"\nWrite a function that takes a list of strings and returns the shortest\nstring in the list.\n\"\"\"\ndef shortest_string(strings):\n\treturn min(strings, key=len)\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that start with the letter 'a'.\n\"\"\"\ndef starts_with_a(strings):\n\treturn len([s for s in strings if s.startswith('a')])\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that end with the letter 'y'.\n\"\"\"\ndef ends_with_y(strings):\n\treturn len([s for s in strings if s.endswith('y')])\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that contain the letter 'z'.\n\"\"\"\ndef contains_z(strings):\n\treturn len([s for s in strings if 'z' in s])\n\n\"\"\"\nWrite a function that takes a list of strings and returns the number\nof strings that contain the letter 'a' and end with the letter 'y'.\n\"\"\"\ndef contains_a_and_ends_with_y(strings):"}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\treturn 4*l*l\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l*l*l\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n\treturn 2*(l*b+b*h+h*l)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\nimport math\ndef surfacearea_sphere(r):\n\treturn 4*math.pi*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*math.pi*r*r*r\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef area_circle(r):\n\treturn math.pi*r*r\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the area of a polygon.\n\"\"\"\ndef area_polygon(n,s", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\nimport math\ndef surfacearea_sphere(r):\n\treturn 4*math.pi*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*math.pi*r*r*r\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef area_circle(r):\n\treturn math.pi*r*r\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the area of a polygon.\n\"\"\""}
{"ID": 631, "source": "MBPP:268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint(find_star_num(5))\n\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"\ndef find_star_num(n): \n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_star_num(n-1)*2 + 1\n\nprint("}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef area_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef area_cube(s):\n\treturn 6*s*s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\n\"\"\"\nWrite a function to find the area of a cuboid.\n\"\"\"\ndef area_cuboid(l,b,h):\n\treturn 2*(l*b+b*", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef area_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef area_cube(s):\n\treturn 6*s*s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\n\"\"\"\nWrite a function to find the area of a cuboid.\n\"\"\"\ndef area_cuboid(l,b,h):"}
{"ID": 641, "source": "MBPP:278", "prompt": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\n\"\"\"\ndef count_first_elements(test_tup):\n\tcount = 0\n\tfor i in test_tup:\n\t\tif i == max(test_tup):\n\t\t\tcount += 1\n\treturn count\n\nprint(count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, "}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\timport re\n\tpattern = re.compile(r'ab{2,3}')\n\tif pattern.search(text):\n\t\treturn True\n\telse:\n\t\treturn False\n\n#print(text_match_two_three('abbb'))\n#print(text_match_two_three('abbbbb'))\n#print(text_match_two_three('abbbbbbb'))\n#print(text_match_two_three('abbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('ab", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "#print(text_match_two_three('abbb'))\n#print(text_match_two_three('abbbbb'))\n#print(text_match_two_three('abbbbbbb'))\n#print(text_match_two_three('abbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))\n#print(text_match_two_three('ab"}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\treturn n//m\n\nprint(find(10,2))\nprint(find(10,3))\nprint(find(10,4))\nprint(find(10,5))\nprint(find(10,6))\nprint(find(10,7))\nprint(find(10,8))\nprint(find(10,9))\nprint(find(10,10))\nprint(find(10,11))\nprint(find(10,12))\nprint(find(10,13))\nprint(find(10,14))\nprint(find(10,15))\nprint(find(10,16))\nprint(find(10,17))\nprint(find(10,18))\nprint(find(10,19))\nprint(find(10,20))\nprint(find(10,21))\nprint(find(10,22))\nprint(find(10,23))\nprint(find(10,24))\nprint(find(10,25))\nprint(find(10,26))\nprint(find(10,27))\nprint(find(10,28))\nprint(find(10,29))\nprint(find(10,30))\nprint(find(10,31))\nprint(find(10,32))\nprint(find(10,33))\nprint(find(10,34))\nprint(find(10,35))\nprint(find(10,36))\nprint(find(10,37))\nprint(find(10,38))\nprint(find(10,39))\nprint(find(10,40))\nprint(find(10,41))\nprint(find(10,42))\nprint(find(10,43))\nprint(find(10,44))\nprint(find(10,45))\nprint(find(10,46))\nprint(find(10,47))\nprint(find(10,4", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find(10,2))\nprint(find(10,3))\nprint(find(10,4))\nprint(find(10,5))\nprint(find(10,6))\nprint(find(10,7))\nprint(find(10,8))\nprint(find(10,9))\nprint(find(10,10))\nprint(find(10,11))\nprint(find(10,12))\nprint(find(10,13))\nprint(find(10,14))\nprint(find(10,15))\nprint(find(10,16))\nprint(find(10,17))\nprint(find(10,18))\nprint(find(10,19))\nprint(find(10,20))\nprint(find(10,21))\nprint(find(10,22))\nprint(find(10,23))\nprint(find(10,24))\nprint(find(10,25))\nprint(find(10,26))\nprint(find(10,27))\nprint(find(10,28))\nprint(find(10,29))\nprint(find(10,30))\nprint(find(10,31))\nprint(find(10,32))\nprint(find(10,33))\nprint(find(10,34))\nprint(find(10,35))\nprint(find(10,36))\nprint(find(10,37))\nprint(find(10,38))\nprint(find(10,39))\nprint(find(10,40))\nprint(find(10,41))\nprint(find(10,42))\nprint(find(10,43))\nprint(find(10,44))\nprint(find(10,45))\nprint(find(10,46))\nprint(find(10,47))\nprint(find(10,4"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmax_val = listval[0]\n\tfor i in listval:\n\t\tif i > max_val:\n\t\t\tmax_val = i\n\treturn max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_val([1,2,3,4,5,6,7,8,9,10]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\tresult = []\n\tfor i in l1:\n\t\tfor j in i:\n\t\t\tif j in l2:\n\t\t\t\tresult.append(j)\n\treturn result\n\n\nif __name__ == '__main__':\n\tl1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tl2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tprint(intersection_nested_lists(l1, l2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\tif index >= len(arr) :\n\t\treturn -1\n\telse :\n\t\tindex = index - rotations\n\t\tif index >= len(arr) :\n\t\t\tindex = index - len(arr)\n\t\treturn arr[index]\n\nprint(find_Element([1,2,3,4,5,6,7],7,2,10))\nprint(find_Element([1,2,3,4,5,6,7],7,2,1))\nprint(find_Element([1,2,3,4,5,6,7],7,2,6))\nprint(find_Element([1,2,3,4,5,6,7],7,2,7))\nprint(find_Element([1,2,3,4,5,6,7],7,2,8))\nprint(find_Element([1,2,3,4,5,6,7],7,2,9))\nprint(find_Element([1,2,3,4,5,6,7],7,2,10))\nprint(find_Element([1,2,3,4,5,6,7],7,2,11))\nprint(find_Element([1,2,3,4,5,6,7],7,2,12))\nprint(find_Element([1,2,3,4,5,6,7],7,2,13))\nprint(find_Element([1,2,3,4,5,6,7],7,2,14))\nprint(find_Element([1,2,3,4,5,6,7],7,2,15))\nprint(find_Element([1,2,3,4,5,6,7],7,2,16))\nprint(find_Element([1,2,3,4,5,6,7],7,2,17))\nprint(find_Element([1,2,3,4,5,6,7],7,2,18))\nprint(find_Element([1,2,3,4,5,6,7],7,2,19))\nprint(find_Element([1,2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_Element([1,2,3,4,5,6,7],7,2,10))\nprint(find_Element([1,2,3,4,5,6,7],7,2,1))\nprint(find_Element([1,2,3,4,5,6,7],7,2,6))\nprint(find_Element([1,2,3,4,5,6,7],7,2,7))\nprint(find_Element([1,2,3,4,5,6,7],7,2,8))\nprint(find_Element([1,2,3,4,5,6,7],7,2,9))\nprint(find_Element([1,2,3,4,5,6,7],7,2,10))\nprint(find_Element([1,2,3,4,5,6,7],7,2,11))\nprint(find_Element([1,2,3,4,5,6,7],7,2,12))\nprint(find_Element([1,2,3,4,5,6,7],7,2,13))\nprint(find_Element([1,2,3,4,5,6,7],7,2,14))\nprint(find_Element([1,2,3,4,5,6,7],7,2,15))\nprint(find_Element([1,2,3,4,5,6,7],7,2,16))\nprint(find_Element([1,2,3,4,5,6,7],7,2,17))\nprint(find_Element([1,2,3,4,5,6,7],7,2,18))\nprint(find_Element([1,2,3,4,5,6,7],7,2,19))\nprint(find_Element([1,2"}
{"ID": 668, "source": "MBPP:305", "prompt": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\t", "predict": "<s> \"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\n\"\"\"\ndef start_withp(words):\n\tfor word in words:\n\t\tif word.startswith('p'):\n\t\t\treturn word\n\nprint(start_withp(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words ending with letter 'n'.\n\"\"\"\ndef end_withn(words):\n\tfor word in words:\n\t\tif word.endswith('n'):\n\t\t\treturn word\n\nprint(end_withn(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a'.\n\"\"\"\ndef contain_a(words):\n\tfor word in words:\n\t\tif 'a' in word:\n\t\t\treturn word\n\nprint(contain_a(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a' or 'e'.\n\"\"\"\ndef contain_ae(words):\n\tfor word in words:\n\t\tif 'a' in word or 'e' in word:\n\t\t\treturn word\n\nprint(contain_ae(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a' and 'e'.\n\"\"\"\ndef contain_ae(words):\n\tfor word in words:\n\t\tif 'a' in word and 'e' in word:\n\t\t\treturn word\n\nprint(contain_ae(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a' and 'e' and 'i' and 'o'.\n\"\"\"\ndef contain_aeio(words):\n\tfor word in words:\n\t\tif 'a' in word and 'e' in word and 'i' in word and 'o' in word:\n\t\t\treturn word\n\nprint(contain_aeio(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor word in words:\n\t\tif word.endswith('n'):\n\t\t\treturn word\n\nprint(end_withn(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a'.\n\"\"\"\ndef contain_a(words):\n\tfor word in words:\n\t\tif 'a' in word:\n\t\t\treturn word\n\nprint(contain_a(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a' or 'e'.\n\"\"\"\ndef contain_ae(words):\n\tfor word in words:\n\t\tif 'a' in word or 'e' in word:\n\t\t\treturn word\n\nprint(contain_ae(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a' and 'e'.\n\"\"\"\ndef contain_ae(words):\n\tfor word in words:\n\t\tif 'a' in word and 'e' in word:\n\t\t\treturn word\n\nprint(contain_ae(['python', 'pizza', 'parrot', 'pitch']))\n\n\"\"\"\nWrite a function to match two words from a list of words containing letter 'a' and 'e' and 'i' and 'o'.\n\"\"\"\ndef contain_aeio(words):\n\tfor word in words:\n\t\tif 'a' in word and 'e' in word and 'i' in word and 'o' in word:\n\t\t\treturn word\n\nprint(contain_aeio(['python', 'pizza', 'parrot', 'pitch']))"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a list.\n\"\"\"\ndef colon_list(listx,m,n):\n\treturn listx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a string.\n\"\"\"\ndef colon_string(stringx,m,n):\n\treturn stringx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a dictionary.\n\"\"\"\ndef colon_dict(dictx,m,n):\n\treturn dictx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a set.\n\"\"\"\ndef colon_set(setx,m,n):\n\treturn setx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a frozenset.\n\"\"\"\ndef colon_frozenset(frozensetx,m,n):\n\treturn frozensetx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytearray.\n\"\"\"\ndef colon_bytearray(bytearrayx,m,n):\n\treturn bytearrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytes.\n\"\"\"\ndef colon_bytes(bytesx,m,n):\n\treturn bytesx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytearray.\n\"\"\"\ndef colon_memoryview(memoryviewx,m,n):\n\treturn memoryviewx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon_array(arrayx,m,n):\n\treturn arrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon_array(arrayx,m,n):\n\treturn arrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon_array(arrayx,m,n):\n\treturn arrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuplex[m:n]\n\n\"\"\"\nWrite a function to get a colon of a list.\n\"\"\"\ndef colon_list(listx,m,n):\n\treturn listx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a string.\n\"\"\"\ndef colon_string(stringx,m,n):\n\treturn stringx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a dictionary.\n\"\"\"\ndef colon_dict(dictx,m,n):\n\treturn dictx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a set.\n\"\"\"\ndef colon_set(setx,m,n):\n\treturn setx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a frozenset.\n\"\"\"\ndef colon_frozenset(frozensetx,m,n):\n\treturn frozensetx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytearray.\n\"\"\"\ndef colon_bytearray(bytearrayx,m,n):\n\treturn bytearrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytes.\n\"\"\"\ndef colon_bytes(bytesx,m,n):\n\treturn bytesx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a bytearray.\n\"\"\"\ndef colon_memoryview(memoryviewx,m,n):\n\treturn memoryviewx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon_array(arrayx,m,n):\n\treturn arrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon_array(arrayx,m,n):\n\treturn arrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon_array(arrayx,m,n):\n\treturn arrayx[m:n]\n\n\"\"\"\nWrite a function to get a colon of a array.\n\"\"\"\ndef colon"}
{"ID": 674, "source": "MBPP:311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"\ndef set_left_most_unset_bit(n): \n\treturn n | (n + 1)\n\nprint(set_left_most_unset_bit(10))\nprint(set_left_most_unset_bit(15))\nprint(set_left_most_unset_bit(16))\nprint(set_left_most_unset_bit(17))\nprint(set_left_most_unset_bit(18))\nprint(set_left_most_unset_bit(19))\nprint(set_left_most_unset_bit(20))\nprint(set_left_most_unset_bit(21))\nprint(set_left_most_unset_bit(22))\nprint(set_left_most_unset_bit(23))\nprint(set_left_most_unset_bit(24))\nprint(set_left_most_unset_bit(25))\nprint(set_left_most_unset_bit(26))\nprint(set_left_most_unset_bit(27))\nprint(set_left_most_unset_bit(28))\nprint(set_left_most_unset_bit(29))\nprint(set_left_most_unset_bit(30))\nprint(set_left_most_unset_bit(31))\nprint(set_left_most_unset_bit(32))\nprint(set_left_most_unset_bit(33))\nprint(set_left_most_unset_bit(34))\nprint(set_left_most_unset_bit(35))\nprint(set_left_most_unset_bit(36))\nprint(set_left_most_unset_bit(37))\nprint(set_left_most_unset_bit(38))\nprint(set_left_most_unset_bit(39))\nprint(set_left_most_unset_bit(40))\nprint(set_left_most_unset_bit(41))\nprint(set_left_most_unset_bit(42))\nprint(set_left_most_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(set_left_most_unset_bit(10))\nprint(set_left_most_unset_bit(15))\nprint(set_left_most_unset_bit(16))\nprint(set_left_most_unset_bit(17))\nprint(set_left_most_unset_bit(18))\nprint(set_left_most_unset_bit(19))\nprint(set_left_most_unset_bit(20))\nprint(set_left_most_unset_bit(21))\nprint(set_left_most_unset_bit(22))\nprint(set_left_most_unset_bit(23))\nprint(set_left_most_unset_bit(24))\nprint(set_left_most_unset_bit(25))\nprint(set_left_most_unset_bit(26))\nprint(set_left_most_unset_bit(27))\nprint(set_left_most_unset_bit(28))\nprint(set_left_most_unset_bit(29))\nprint(set_left_most_unset_bit(30))\nprint(set_left_most_unset_bit(31))\nprint(set_left_most_unset_bit(32))\nprint(set_left_most_unset_bit(33))\nprint(set_left_most_unset_bit(34))\nprint(set_left_most_unset_bit(35))\nprint(set_left_most_unset_bit(36))\nprint(set_left_most_unset_bit(37))\nprint(set_left_most_unset_bit(38))\nprint(set_left_most_unset_bit(39))\nprint(set_left_most_unset_bit(40))\nprint(set_left_most_unset_bit(41))\nprint(set_left_most_unset_bit(42))\nprint(set_left_most_"}
{"ID": 684, "source": "MBPP:321", "prompt": "\"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the demlo number for the given number.\n\"\"\"\ndef find_demlo(s): \n\treturn int(s[::-1])\n\n\nif __name__ == \"__main__\":\n\ts = input(\"Enter the number: \")\n\tprint(find_demlo(s))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 697, "source": "MBPP:334", "prompt": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\n\"\"\"\ndef check_Validity(a,b,c):  \n\tif a+b>c and b+c>a and a+c>b:  \n\t\treturn True\n\telse:  \n\t\treturn False\n\nprint(check_Validity(1,2,3))\nprint(check_Validity(1,2,5))\nprint(check_Validity(1,2,1))\nprint(check_Validity(1,2,0))\nprint(check_Validity(1,2,-1))\nprint(check_Validity(1,2,-2))\nprint(check_Validity(1,2,-3))\nprint(check_Validity(1,2,-4))\nprint(check_Validity(1,2,-5))\nprint(check_Validity(1,2,-6))\nprint(check_Validity(1,2,-7))\nprint(check_Validity(1,2,-8))\nprint(check_Validity(1,2,-9))\nprint(check_Validity(1,2,-10))\nprint(check_Validity(1,2,-11))\nprint(check_Validity(1,2,-12))\nprint(check_Validity(1,2,-13))\nprint(check_Validity(1,2,-14))\nprint(check_Validity(1,2,-15))\nprint(check_Validity(1,2,-16))\nprint(check_Validity(1,2,-17))\nprint(check_Validity(1,2,-18))\nprint(check_Validity(1,2,-19))\nprint(check_Validity(1,2,-20))\nprint(check_Validity(1,2,-21))\nprint(check_Validity(1,2,-22))\nprint(check_Validity(1,2,-23))\nprint(check_Validity(1,2,-24))\nprint(check_Validity(1,2,-25))\nprint(check_Validity(1,2,-26))\nprint(check_Validity(1,2,-27))\nprint(check_Validity(1,2,-28))\nprint(check_Validity(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Validity(1,2,3))\nprint(check_Validity(1,2,5))\nprint(check_Validity(1,2,1))\nprint(check_Validity(1,2,0))\nprint(check_Validity(1,2,-1))\nprint(check_Validity(1,2,-2))\nprint(check_Validity(1,2,-3))\nprint(check_Validity(1,2,-4))\nprint(check_Validity(1,2,-5))\nprint(check_Validity(1,2,-6))\nprint(check_Validity(1,2,-7))\nprint(check_Validity(1,2,-8))\nprint(check_Validity(1,2,-9))\nprint(check_Validity(1,2,-10))\nprint(check_Validity(1,2,-11))\nprint(check_Validity(1,2,-12))\nprint(check_Validity(1,2,-13))\nprint(check_Validity(1,2,-14))\nprint(check_Validity(1,2,-15))\nprint(check_Validity(1,2,-16))\nprint(check_Validity(1,2,-17))\nprint(check_Validity(1,2,-18))\nprint(check_Validity(1,2,-19))\nprint(check_Validity(1,2,-20))\nprint(check_Validity(1,2,-21))\nprint(check_Validity(1,2,-22))\nprint(check_Validity(1,2,-23))\nprint(check_Validity(1,2,-24))\nprint(check_Validity(1,2,-25))\nprint(check_Validity(1,2,-26))\nprint(check_Validity(1,2,-27))\nprint(check_Validity(1,2,-28))\nprint(check_Validity(1"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\b\\w+[.,;]*$', text)\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'^\\w+[.,;]*', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\b\\w+[.,;]*\\b', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\b(\\w+)[.,;]*\\b', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word and the punctuation.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'(\\b\\w+[.,;]*\\b)', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word and the punctuation, but not the surrounding whitespace.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\s*(\\b\\w+[.,;]*\\b)\\s*', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word and the punctuation, but not the surrounding whitespace. The word must also be at least two letters long.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\s*(\\b\\w{2,}[.,;]*\\b)\\s*', text)\n\n\"\"\"\nWrite a function that matches a word in the middle", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.search(r'\\b\\w+[.,;]*$', text)\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'^\\w+[.,;]*', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\b\\w+[.,;]*\\b', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\b(\\w+)[.,;]*\\b', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word and the punctuation.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'(\\b\\w+[.,;]*\\b)', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word and the punctuation, but not the surrounding whitespace.\n\"\"\"\ndef text_match_word(text):\n\timport re\n\treturn re.search(r'\\s*(\\b\\w+[.,;]*\\b)\\s*', text)\n\n\"\"\"\nWrite a function that matches a word in the middle of a string, with optional punctuation on either side, and captures the word and the punctuation, but not the surrounding whitespace. The word must also be at least two letters long.\n\"\"\"\ndef text_match_word(text):"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\treturn tuple(s)\n\n\"\"\"\nWrite a function to convert the given ordered tuples into a set.\n\"\"\"\ndef tuple_to_set(t):\n\treturn set(t)\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\treturn [(k,v) for k,v in d.items()]\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\treturn {k:v for k,v in l}\n\n\"\"\"\nWrite a function to convert the given list of tuples into a set of tuples.\n\"\"\"\ndef list_to_set(l):\n\treturn {k for k,v in l}\n\n\"\"\"\nWrite a function to convert the given set of tuples into a list of tuples.\n\"\"\"\ndef set_to_list(s):\n\treturn [(k,v) for k,v in s]\n\n\"\"\"\nWrite a function to convert the given dictionary into a set of tuples.\n\"\"\"\ndef dict_to_set(d):\n\treturn {(k,v) for k,v in d.items()}\n\n\"\"\"\nWrite a function to convert the given set of tuples into a dictionary.\n\"\"\"\ndef set_to_dict(s):\n\treturn {k:v for k,v in s}\n\n\"\"\"\nWrite a function to convert the given list of tuples into a list of lists.\n\"\"\"\ndef list_to_list(l):\n\treturn [[k,v] for k,v in l]\n\n\"\"\"\nWrite a function to convert the given list of lists into a list of tuples.\n\"\"\"\ndef list_to_list(l):\n\treturn [(k,v) for k,v in l]\n\n\"\"\"\nWrite a function to convert the given set of tuples into a set of lists.\n\"\"\"\ndef set_to_set(s):\n\treturn {[k,v] for k,v in s}\n\n\"\"\"\nWrite a function to convert the given set of lists into a set of tuples.", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to convert the given ordered tuples into a set.\n\"\"\"\ndef tuple_to_set(t):\n\treturn set(t)\n\n\"\"\"\nWrite a function to convert the given dictionary into a list of tuples.\n\"\"\"\ndef dict_to_list(d):\n\treturn [(k,v) for k,v in d.items()]\n\n\"\"\"\nWrite a function to convert the given list of tuples into a dictionary.\n\"\"\"\ndef list_to_dict(l):\n\treturn {k:v for k,v in l}\n\n\"\"\"\nWrite a function to convert the given list of tuples into a set of tuples.\n\"\"\"\ndef list_to_set(l):\n\treturn {k for k,v in l}\n\n\"\"\"\nWrite a function to convert the given set of tuples into a list of tuples.\n\"\"\"\ndef set_to_list(s):\n\treturn [(k,v) for k,v in s]\n\n\"\"\"\nWrite a function to convert the given dictionary into a set of tuples.\n\"\"\"\ndef dict_to_set(d):\n\treturn {(k,v) for k,v in d.items()}\n\n\"\"\"\nWrite a function to convert the given set of tuples into a dictionary.\n\"\"\"\ndef set_to_dict(s):\n\treturn {k:v for k,v in s}\n\n\"\"\"\nWrite a function to convert the given list of tuples into a list of lists.\n\"\"\"\ndef list_to_list(l):\n\treturn [[k,v] for k,v in l]\n\n\"\"\"\nWrite a function to convert the given list of lists into a list of tuples.\n\"\"\"\ndef list_to_list(l):\n\treturn [(k,v) for k,v in l]\n\n\"\"\"\nWrite a function to convert the given set of tuples into a set of lists.\n\"\"\"\ndef set_to_set(s):\n\treturn {[k,v] for k,v in s}\n\n\"\"\"\nWrite a function to convert the given set of lists into a set of tuples."}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\tmin_range = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_range}
{"ID": 712, "source": "MBPP:349", "prompt": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given string is a binary string or not.\n\"\"\"\ndef check(string) :\n\tif string.isdigit() :\n\t\treturn True\n\telse :\n\t\treturn False\nprint(check(\"101010\"))\nprint(check(\"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(check(\"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"}
{"ID": 722, "source": "MBPP:359", "prompt": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\n\"\"\"\ndef Check_Solution(a,b,c): \n\td = b*b - 4*a*c\n\tif d < 0:\n\t\treturn False\n\telse:\n\t\tx1 = (-b + d**0.5)/(2*a)\n\t\tx2 = (-b - d**0.5)/(2*a)\n\t\tif x1 == 2*x2 or x2 == 2*x1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Check_Solution(1,2,1))\nprint(Check_Solution(1,2,2))\nprint(Check_Solution(1,2,3))\nprint(Check_Solution(1,2,4))\nprint(Check_Solution(1,2,5))\nprint(Check_Solution(1,2,6))\nprint(Check_Solution(1,2,7))\nprint(Check_Solution(1,2,8))\nprint(Check_Solution(1,2,9))\nprint(Check_Solution(1,2,10))\nprint(Check_Solution(1,2,11))\nprint(Check_Solution(1,2,12))\nprint(Check_Solution(1,2,13))\nprint(Check_Solution(1,2,14))\nprint(Check_Solution(1,2,15))\nprint(Check_Solution(1,2,16))\nprint(Check_Solution(1,2,17))\nprint(Check_Solution(1,2,18))\nprint(Check_Solution(1,2,19))\nprint(Check_Solution(1,2,20))\nprint(Check_Solution(1,2,21))\nprint(Check_Solution(1,2,22))\nprint(Check_Solution(1,2,23))\nprint(Check_Solution(1,2,24))\nprint(Check_Solution(1,2,25))\nprint(Check_Solution(1,2,26))\nprint(Check_Solution(1,2,27))\nprint(Check_Solution("}
{"ID": 724, "source": "MBPP:361", "prompt": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove empty lists from a given list of lists.\n\"\"\"\ndef remove_empty(list1):\n\treturn [sub_list for sub_list in list1 if sub_list]\n\n\"\"\"\nWrite a function to check if a given list of lists is a valid matrix.\n\"\"\"\ndef is_matrix(list1):\n\tif not list1:\n\t\treturn False\n\treturn all(len(list1[0]) == len(row) for row in list1)\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating(string):\n\tseen = {}\n\tfor char in string:\n\t\tif char not in seen:\n\t\t\tseen[char] = 1\n\t\telse:\n\t\t\tseen[char] += 1\n\tfor char in string:\n\t\tif seen[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string using a regular expression.\n\"\"\"\nimport re\ndef first_non_repeating_regex(string):\n\tmatch = re.search(r'(?P<char>\\w)(?P=char)*', string)\n\tif match:\n\t\treturn match.group()\n\treturn None\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string using a dictionary.\n\"\"\"\ndef first_non_repeating_dict(string):\n\tseen = {}\n\tfor char in string:\n\t\tif char not in seen:\n\t\t\tseen[char] = 1\n\t\telse:\n\t\t\tseen[char] += 1\n\tfor i, char in enumerate(string):\n\t\tif seen[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string using a list.\n\"\"\"\ndef first_non_repeating_list(string):\n\tseen = [0] * 26\n\tfor i, char in enumerate(string):\n\t\tseen[ord(char) - ord('a')] += 1\n\tfor i, char in enumerate(string):\n\t\tif seen", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating(string):\n\tseen = {}\n\tfor char in string:\n\t\tif char not in seen:\n\t\t\tseen[char] = 1\n\t\telse:\n\t\t\tseen[char] += 1\n\tfor char in string:\n\t\tif seen[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string using a regular expression.\n\"\"\"\nimport re\ndef first_non_repeating_regex(string):\n\tmatch = re.search(r'(?P<char>\\w)(?P=char)*', string)\n\tif match:\n\t\treturn match.group()\n\treturn None\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string using a dictionary.\n\"\"\"\ndef first_non_repeating_dict(string):\n\tseen = {}\n\tfor char in string:\n\t\tif char not in seen:\n\t\t\tseen[char] = 1\n\t\telse:\n\t\t\tseen[char] += 1\n\tfor i, char in enumerate(string):\n\t\tif seen[char] == 1:\n\t\t\treturn char\n\treturn None\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string using a list."}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\tn = len(str) \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 0\n\tif str[0] == str[1]: \n\t\treturn min(1 + min_flip_to_make_string_alternate(str[1:]), \n\t\t\t\t\tmin_flip_to_make_string_alternate(str[1:])) \n\treturn min(1 + min_flip_to_make_string_alternate(str[1:]), \n\t\t\t\tmin_flip_to_make_string_alternate(str[1:])) \n\n# Driver code \nstr = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "str = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\tif len(list_nums) < 2:\n\t\treturn None\n\treturn max(list_nums[i] * list_nums[i+1] for i in range(len(list_nums) - 1))\n\nprint(adjacent_num_product([1, 2, 3, 4]))\nprint(adjacent_num_product([1, 2, 3, 4, 5]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(adjacent_num_product([1, 2, 3, 4]))\nprint(adjacent_num_product([1, 2, 3, 4, 5]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, "}
{"ID": 731, "source": "MBPP:368", "prompt": "\"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to repeat the given tuple n times.\n\"\"\"\ndef repeat_tuples(test_tup, N):\n\treturn test_tup * N\n\nprint(repeat_tuples((1,2,3), 3))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\nprint(first_non_repeating_char('python'))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\nprint(first_non_repeating_char('python'))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\nprint(first_non_repeating_char('python'))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(repeat_tuples((1,2,3), 3))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\nprint(first_non_repeating_char('python'))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\nprint(first_non_repeating_char('python'))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(string):\n\tchar_count = {}\n\tfor char in string:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tfor char in string:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\treturn None\n\nprint(first_non_repeating_char('python'))"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\tif left_element > right_element:\n\t\treturn left_element + 1\n\tmid_element = (left_element + right_element) // 2\n\tif A[mid_element] != mid_element + 1:\n\t\treturn smallest_missing(A, left_element, mid_element - 1)\n\treturn smallest_missing(A, mid_element + 1, right_element)\n\ndef smallest_missing_element(A):\n\treturn smallest_missing(A, 0, len(A) - 1)\n\nassert smallest_missing_element([1, 2, 3, 4]) == 5\nassert smallest_missing_element([1, 2, 3, 5]) == 4\nassert smallest_missing_element([1, 2, 4, 5]) == 3\nassert smallest_missing_element([2, 3, 4, 5]) == 1\nassert smallest_missing_element([1, 2, 3, 4, 5]) == 6\nassert smallest_missing_element([1, 2, 3, 4, 5, 6]) == 7\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7]) == 8\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8]) == 9\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 12\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 13\nassert smallest", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "assert smallest_missing_element([1, 2, 3, 4]) == 5\nassert smallest_missing_element([1, 2, 3, 5]) == 4\nassert smallest_missing_element([1, 2, 4, 5]) == 3\nassert smallest_missing_element([2, 3, 4, 5]) == 1\nassert smallest_missing_element([1, 2, 3, 4, 5]) == 6\nassert smallest_missing_element([1, 2, 3, 4, 5, 6]) == 7\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7]) == 8\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8]) == 9\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 12\nassert smallest_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 13\nassert smallest"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the area of"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello\",\"l\"))\nprint(remove_Char(\"hello\",\"h\"))\nprint(remove_Char(\"hello\",\"e\"))\nprint(remove_Char(\"hello\",\"o\"))\nprint(remove_Char(\"hello\",\"p\"))\nprint(remove_Char(\"hello\",\"a\"))\nprint(remove_Char(\"hello\",\"i\"))\nprint(remove_Char(\"hello\",\"u\"))\nprint(remove_Char(\"hello\",\"y\"))\nprint(remove_Char(\"hello\",\"t\"))\nprint(remove_Char(\"hello\",\"r\"))\nprint(remove_Char(\"hello\",\"e\"))\nprint(remove_Char(\"hello\",\"w\"))\nprint(remove_Char(\"hello\",\"q\"))\nprint(remove_Char(\"hello\",\"s\"))\nprint(remove_Char(\"hello\",\"d\"))\nprint(remove_Char(\"hello\",\"f\"))\nprint(remove_Char(\"hello\",\"g\"))\nprint(remove_Char(\"hello\",\"h\"))\nprint(remove_Char(\"hello\",\"j\"))\nprint(remove_Char(\"hello\",\"k\"))\nprint(remove_Char(\"hello\",\"l\"))\nprint(remove_Char(\"hello\",\"z\"))\nprint(remove_Char(\"hello\",\"x\"))\nprint(remove_Char(\"hello\",\"c\"))\nprint(remove_Char(\"hello\",\"v\"))\nprint(remove_Char(\"hello\",\"b\"))\nprint(remove_Char(\"hello\",\"n\"))\nprint(remove_Char(\"hello\",\"m\"))\nprint(remove_Char(\"hello\",\"a\"))\nprint(remove_Char(\"hello\",\"i\"))\nprint(remove_Char(\"hello\",\"u\"))\nprint(remove_Char(\"hello\",\"y\"))\nprint(remove_Char(\"hello\",\"t\"))\nprint(remove_Char(\"hello\",\"r\"))\nprint(remove_Char(\"hello\",\"e\"))\nprint(remove_Char(\"hello\",\"w\"))\nprint(remove_Char(\"hello\",\"q\"))\nprint(remove_Char(\"hello\",\"s\"))\nprint(remove_Char(\"hello\",\"d\"))\nprint(remove_Char(\"hello\",\"f\"))\nprint(remove_Char(\"hello\",\"g\"))\nprint(remove_Char(\"hello\",\"h\"))\nprint(remove_Char(\"hello\",\"j\"))\nprint(remove_Char(\"hello\",\"k\"))\nprint(remove_Char(\"hello", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_Char(\"hello\",\"l\"))\nprint(remove_Char(\"hello\",\"h\"))\nprint(remove_Char(\"hello\",\"e\"))\nprint(remove_Char(\"hello\",\"o\"))\nprint(remove_Char(\"hello\",\"p\"))\nprint(remove_Char(\"hello\",\"a\"))\nprint(remove_Char(\"hello\",\"i\"))\nprint(remove_Char(\"hello\",\"u\"))\nprint(remove_Char(\"hello\",\"y\"))\nprint(remove_Char(\"hello\",\"t\"))\nprint(remove_Char(\"hello\",\"r\"))\nprint(remove_Char(\"hello\",\"e\"))\nprint(remove_Char(\"hello\",\"w\"))\nprint(remove_Char(\"hello\",\"q\"))\nprint(remove_Char(\"hello\",\"s\"))\nprint(remove_Char(\"hello\",\"d\"))\nprint(remove_Char(\"hello\",\"f\"))\nprint(remove_Char(\"hello\",\"g\"))\nprint(remove_Char(\"hello\",\"h\"))\nprint(remove_Char(\"hello\",\"j\"))\nprint(remove_Char(\"hello\",\"k\"))\nprint(remove_Char(\"hello\",\"l\"))\nprint(remove_Char(\"hello\",\"z\"))\nprint(remove_Char(\"hello\",\"x\"))\nprint(remove_Char(\"hello\",\"c\"))\nprint(remove_Char(\"hello\",\"v\"))\nprint(remove_Char(\"hello\",\"b\"))\nprint(remove_Char(\"hello\",\"n\"))\nprint(remove_Char(\"hello\",\"m\"))\nprint(remove_Char(\"hello\",\"a\"))\nprint(remove_Char(\"hello\",\"i\"))\nprint(remove_Char(\"hello\",\"u\"))\nprint(remove_Char(\"hello\",\"y\"))\nprint(remove_Char(\"hello\",\"t\"))\nprint(remove_Char(\"hello\",\"r\"))\nprint(remove_Char(\"hello\",\"e\"))\nprint(remove_Char(\"hello\",\"w\"))\nprint(remove_Char(\"hello\",\"q\"))\nprint(remove_Char(\"hello\",\"s\"))\nprint(remove_Char(\"hello\",\"d\"))\nprint(remove_Char(\"hello\",\"f\"))\nprint(remove_Char(\"hello\",\"g\"))\nprint(remove_Char(\"hello\",\"h\"))\nprint(remove_Char(\"hello\",\"j\"))\nprint(remove_Char(\"hello\",\"k\"))\nprint(remove_Char(\"hello"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\treturn 2*(l*w+w*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,w):\n\treturn 2*(l+w)\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef perimeter_parallelogram(a,b,c):\n\treturn 2*(a+b+c)\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\ndef perimeter_trapezium(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*(l*w+w*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circumference_circle(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,w):\n\treturn 2*(l+w)\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef perimeter_parallelogram(a,b,c):\n\treturn 2*(a+b+c)\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(a,b,h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\ndef perimeter_trapezium(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "<s> \"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(multi_list(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(multi_list(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\nprint(list_of_lists(3,4))\n\n\"\"\"\nWrite a function to generate a list of lists in Python.\n\"\"\"\ndef list_of_lists(rownum,colnum):"}
{"ID": 746, "source": "MBPP:383", "prompt": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle all odd bits of a given number.\n\"\"\"\ndef even_bit_toggle_number(n) : \n\treturn n ^ 0xaaaaaaaa\n\nprint(even_bit_toggle_number(12))\nprint(even_bit_toggle_number(13))\nprint(even_bit_toggle_number(14))\nprint(even_bit_toggle_number(15))\nprint(even_bit_toggle_number(16))\nprint(even_bit_toggle_number(17))\nprint(even_bit_toggle_number(18))\nprint(even_bit_toggle_number(19))\nprint(even_bit_toggle_number(20))\nprint(even_bit_toggle_number(21))\nprint(even_bit_toggle_number(22))\nprint(even_bit_toggle_number(23))\nprint(even_bit_toggle_number(24))\nprint(even_bit_toggle_number(25))\nprint(even_bit_toggle_number(26))\nprint(even_bit_toggle_number(27))\nprint(even_bit_toggle_number(28))\nprint(even_bit_toggle_number(29))\nprint(even_bit_toggle_number(30))\nprint(even_bit_toggle_number(31))\nprint(even_bit_toggle_number(32))\nprint(even_bit_toggle_number(33))\nprint(even_bit_toggle_number(34))\nprint(even_bit_toggle_number(35))\nprint(even_bit_toggle_number(36))\nprint(even_bit_toggle_number(37))\nprint(even_bit_toggle_number(38))\nprint(even_bit_toggle_number(39))\nprint(even_bit_toggle_number(40))\nprint(even_bit_toggle_number(41))\nprint(even_bit_toggle_number(42))\nprint(even_bit_toggle_number(43))\nprint(even_bit_toggle_number(44))\nprint(even_bit_toggle_number(45))\nprint(even_bit_toggle_number(46))\nprint(even_bit_toggle_number(47", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(even_bit_toggle_number(12))\nprint(even_bit_toggle_number(13))\nprint(even_bit_toggle_number(14))\nprint(even_bit_toggle_number(15))\nprint(even_bit_toggle_number(16))\nprint(even_bit_toggle_number(17))\nprint(even_bit_toggle_number(18))\nprint(even_bit_toggle_number(19))\nprint(even_bit_toggle_number(20))\nprint(even_bit_toggle_number(21))\nprint(even_bit_toggle_number(22))\nprint(even_bit_toggle_number(23))\nprint(even_bit_toggle_number(24))\nprint(even_bit_toggle_number(25))\nprint(even_bit_toggle_number(26))\nprint(even_bit_toggle_number(27))\nprint(even_bit_toggle_number(28))\nprint(even_bit_toggle_number(29))\nprint(even_bit_toggle_number(30))\nprint(even_bit_toggle_number(31))\nprint(even_bit_toggle_number(32))\nprint(even_bit_toggle_number(33))\nprint(even_bit_toggle_number(34))\nprint(even_bit_toggle_number(35))\nprint(even_bit_toggle_number(36))\nprint(even_bit_toggle_number(37))\nprint(even_bit_toggle_number(38))\nprint(even_bit_toggle_number(39))\nprint(even_bit_toggle_number(40))\nprint(even_bit_toggle_number(41))\nprint(even_bit_toggle_number(42))\nprint(even_bit_toggle_number(43))\nprint(even_bit_toggle_number(44))\nprint(even_bit_toggle_number(45))\nprint(even_bit_toggle_number(46))\nprint(even_bit_toggle_number(47"}
{"ID": 750, "source": "MBPP:387", "prompt": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\n\"\"\"\ndef even_or_odd(N): \n\tif int(N, 16) % 2 == 0: \n\t\treturn \"Even\"\n\telse: \n\t\treturn \"Odd\"\n\nprint(even_or_odd(\"123456789\"))\nprint(even_or_odd(\"123456788\"))\nprint(even_or_odd(\"123456787\"))\nprint(even_or_odd(\"123456786\"))\nprint(even_or_odd(\"123456785\"))\nprint(even_or_odd(\"123456784\"))\nprint(even_or_odd(\"123456783\"))\nprint(even_or_odd(\"123456782\"))\nprint(even_or_odd(\"123456781\"))\nprint(even_or_odd(\"123456780\"))\nprint(even_or_odd(\"123456779\"))\nprint(even_or_odd(\"123456778\"))\nprint(even_or_odd(\"123456777\"))\nprint(even_or_odd(\"123456776\"))\nprint(even_or_odd(\"123456775\"))\nprint(even_or_odd(\"123456774\"))\nprint(even_or_odd(\"123456773\"))\nprint(even_or_odd(\"123456772\"))\nprint(even_or_odd(\"123456771\"))\nprint(even_or_odd(\"123456770\"))\nprint(even_or_odd(\"123456769\"))\nprint(even_or_odd(\"123456768\"))\nprint(even_or_odd(\"123456767\"))\nprint(even_or_odd(\"123456766\"))\nprint(even_or_odd(\"12345676", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(even_or_odd(\"123456789\"))\nprint(even_or_odd(\"123456788\"))\nprint(even_or_odd(\"123456787\"))\nprint(even_or_odd(\"123456786\"))\nprint(even_or_odd(\"123456785\"))\nprint(even_or_odd(\"123456784\"))\nprint(even_or_odd(\"123456783\"))\nprint(even_or_odd(\"123456782\"))\nprint(even_or_odd(\"123456781\"))\nprint(even_or_odd(\"123456780\"))\nprint(even_or_odd(\"123456779\"))\nprint(even_or_odd(\"123456778\"))\nprint(even_or_odd(\"123456777\"))\nprint(even_or_odd(\"123456776\"))\nprint(even_or_odd(\"123456775\"))\nprint(even_or_odd(\"123456774\"))\nprint(even_or_odd(\"123456773\"))\nprint(even_or_odd(\"123456772\"))\nprint(even_or_odd(\"123456771\"))\nprint(even_or_odd(\"123456770\"))\nprint(even_or_odd(\"123456769\"))\nprint(even_or_odd(\"123456768\"))\nprint(even_or_odd(\"123456767\"))\nprint(even_or_odd(\"123456766\"))\nprint(even_or_odd(\"12345676"}
{"ID": 753, "source": "MBPP:390", "prompt": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\t", "predict": "<s> \"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\n\"\"\"\ndef add_string(list,string):\n\treturn [string+i for i in list]\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [string+i for i in list]\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n\n\"\"\"\nWrite a function to check if a given string is in a list.\n\"\"\"\ndef check_string(list,string):\n\treturn string in list\n"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\tchar_dict = {}\n\tfor char in str1:\n\t\tif char in char_dict:\n\t\t\tchar_dict[char] += 1\n\t\telse:\n\t\t\tchar_dict[char] = 1\n\tfor char in str1:\n\t\tif char_dict[char] == 1:\n\t\t\treturn char\n\treturn None\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"programming\"))\nprint(first_non_repeating_character(\"hello\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"programming\"))\nprint(first_non_repeating_character(\"hello\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non_repeating_character(\"python\"))\nprint(first_non"}
{"ID": 759, "source": "MBPP:396", "prompt": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\"\"\"\ndef check_char(string): \n\timport re\n\treturn re.match(r'^([a-zA-Z]).*\\1$', string)\n\n\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not without using regex.\n\"\"\"\ndef check_char(string): \n\treturn string[0] == string[-1]\n\n\"\"\"\nWrite a function to check whether the given string contains only digits or not using regex.\n\"\"\"\ndef check_digit(string): \n\timport re\n\treturn re.match(r'^[0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string contains only digits or not without using regex.\n\"\"\"\ndef check_digit(string): \n\treturn all(char.isdigit() for char in string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphabets or not using regex.\n\"\"\"\ndef check_alpha(string): \n\timport re\n\treturn re.match(r'^[a-zA-Z]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphabets or not without using regex.\n\"\"\"\ndef check_alpha(string): \n\treturn all(char.isalpha() for char in string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphanumeric characters or not using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\timport re\n\treturn re.match(r'^[a-zA-Z0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphanumeric characters or not without using regex.\n\"\"\"\ndef check_alphanumeric(string): \n\treturn all(char.isalnum() for char in string)\n\n\"\"\"\nWrite a function to check whether the given string contains only lowercase characters or not using regex.\n\"\"\"\ndef check_lowercase(string): \n\timport re\n\treturn re.match(r'^[a-z]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string contains only lowercase characters or not without using regex.\n\"\"\"\ndef check", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(r'^([a-zA-Z]).*\\1$', string)\n\n\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not without using regex.\n\"\"\"\ndef check_char(string): \n\treturn string[0] == string[-1]\n\n\"\"\"\nWrite a function to check whether the given string contains only digits or not using regex.\n\"\"\"\ndef check_digit(string): \n\timport re\n\treturn re.match(r'^[0-9]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string contains only digits or not without using regex.\n\"\"\"\ndef check_digit(string): \n\treturn all(char.isdigit() for char in string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphabets or not using regex.\n\"\"\"\ndef check_alpha(string): \n\timport re\n\treturn re.match(r'^[a-zA-Z]+$', string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphabets or not without using regex.\n\"\"\"\ndef check_alpha(string): \n\treturn all(char.isalpha() for char in string)\n\n\"\"\"\nWrite a function to check whether the given string contains only alphanumeric characters or not using regex."}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\tregex = r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid email address or not using regex.\n\"\"\"\ndef is_valid_email(str):\n\tregex = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid phone number or not using regex.\n\"\"\"\ndef is_valid_phone(str):\n\tregex = r\"^[0-9]{10}$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid password or not using regex.\n\"\"\"\ndef is_valid_password(str):\n\tregex = r\"^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid hex color code or not using regex.\n\"\"\"\ndef is_valid_hex_color_code(str):\n\tregex = r\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid credit card number or not using regex.\n\"\"\"\ndef is_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tregex = r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid email address or not using regex.\n\"\"\"\ndef is_valid_email(str):\n\tregex = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid phone number or not using regex.\n\"\"\"\ndef is_valid_phone(str):\n\tregex = r\"^[0-9]{10}$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid password or not using regex.\n\"\"\"\ndef is_valid_password(str):\n\tregex = r\"^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid hex color code or not using regex.\n\"\"\"\ndef is_valid_hex_color_code(str):\n\tregex = r\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"\n\tpattern = re.compile(regex)\n\treturn True if re.search(pattern, str) else False\n\n\"\"\"\nWrite a function to check if a string is a valid credit card number or not using regex.\n\"\"\"\ndef is_"}
{"ID": 767, "source": "MBPP:404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"\ndef minimum(a,b):   \n\treturn a if a<b else b\n\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20))\nprint(minimum(10,20"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\treturn tuplex in tuple1\n\nprint(check_tuplex(1,(1,2,3,4,5)))\nprint(check_tuplex(1,(1,2,3,4,5,6)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_tuplex(1,(1,2,3,4,5)))\nprint(check_tuplex(1,(1,2,3,4,5,6)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\nprint(check_tuplex(1,(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1"}
{"ID": 769, "source": "MBPP:406", "prompt": "\"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the parity of a given number.\n\"\"\"\ndef find_Parity(x): \n\treturn x % 2\n\nprint(find_Parity(10))\nprint(find_Parity(11))\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint(find_Parity(54))\nprint(find_Parity(55))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_Parity(10))\nprint(find_Parity(11))\nprint(find_Parity(12))\nprint(find_Parity(13))\nprint(find_Parity(14))\nprint(find_Parity(15))\nprint(find_Parity(16))\nprint(find_Parity(17))\nprint(find_Parity(18))\nprint(find_Parity(19))\nprint(find_Parity(20))\nprint(find_Parity(21))\nprint(find_Parity(22))\nprint(find_Parity(23))\nprint(find_Parity(24))\nprint(find_Parity(25))\nprint(find_Parity(26))\nprint(find_Parity(27))\nprint(find_Parity(28))\nprint(find_Parity(29))\nprint(find_Parity(30))\nprint(find_Parity(31))\nprint(find_Parity(32))\nprint(find_Parity(33))\nprint(find_Parity(34))\nprint(find_Parity(35))\nprint(find_Parity(36))\nprint(find_Parity(37))\nprint(find_Parity(38))\nprint(find_Parity(39))\nprint(find_Parity(40))\nprint(find_Parity(41))\nprint(find_Parity(42))\nprint(find_Parity(43))\nprint(find_Parity(44))\nprint(find_Parity(45))\nprint(find_Parity(46))\nprint(find_Parity(47))\nprint(find_Parity(48))\nprint(find_Parity(49))\nprint(find_Parity(50))\nprint(find_Parity(51))\nprint(find_Parity(52))\nprint(find_Parity(53))\nprint(find_Parity(54))\nprint(find_Parity(55))"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\treturn int(\"\".join(n))\n\ndef next_bigger(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_2(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_3(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_4(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_5(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn int(\"\".join(n))\n\ndef next_bigger(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_2(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_3(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_4(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:\n\t\t\tn[i], n[i-1] = n[i-1], n[i]\n\t\t\tbreak\n\treturn int(\"\".join(n))\n\ndef next_bigger_5(n):\n\tn = list(str(n))\n\tn.sort()\n\tn.reverse()\n\tfor i in range(len(n)):\n\t\tif n[i] > n[i-1]:"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2:\n\t\treturn []\n\tresult = []\n\tfor i in range(k):\n\t\tif len(nums1) == 0 or len(nums2) == 0:\n\t\t\tbreak\n\t\tif nums1[0] < nums2[0]:\n\t\t\tresult.append([nums1[0], nums2[0]])\n\t\t\tnums1 = nums1[1:]\n\t\telse:\n\t\t\tresult.append([nums2[0], nums1[0]])\n\t\t\tnums2 = nums2[1:]\n\treturn result\n\n\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 2) == [[1, 2], [2, 3]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 3) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 4) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 5) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 6) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 7) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3],", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "assert k_smallest_pairs([1, 2, 3], [2, 3, 4], 2) == [[1, 2], [2, 3]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 3) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 4) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 5) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 6) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3], [2, 3, 4], 7) == [[1, 2], [2, 3], [3, 4]]\nassert k_smallest_pairs([1, 2, 3],"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\tmin_product = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_product}
{"ID": 773, "source": "MBPP:410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"\ndef min_val(listval):\n\tmin_val = listval[0]\n\tfor i in listval:\n\t\tif i < min_val:\n\t\t\tmin_val = i\n\treturn min_val\n\nprint(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\n\"\"\"\nWrite a function to convert the given camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).lower()\n\n\"\"\"\nWrite a function to convert the given camel case string to pascal case string by using regex.\n\"\"\"\ndef camel_to_pascal(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).title().replace('_', '')\n\n\"\"\"\nWrite a function to convert the given pascal case string to camel case string by using regex.\n\"\"\"\ndef pascal_to_camel(word):\n\treturn word[0].lower() + word[1:]\n\n\"\"\"\nWrite a function to convert the given pascal case string to snake case string by using regex.\n\"\"\"\ndef pascal_to_snake(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).lower()\n\n\"\"\"\nWrite a function to convert the given snake case string to pascal case string by using regex.\n\"\"\"\ndef snake_to_pascal(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word).title().replace('_', '')\n\n\"\"\"\nWrite a function to convert the given string to title case by using regex.\n\"\"\"\ndef to_title(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).title().replace('_', '')\n\n\"\"\"\nWrite a function to convert the given string to sentence case by using regex.\n\"\"\"\ndef to_sentence(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).lower().capitalize()\n\n\"\"\"\nWrite a function to convert the given string to upper case by using regex.\n\"\"\"\ndef to_upper(word):\n\treturn re.sub(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\n\"\"\"\nWrite a function to convert the given camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).lower()\n\n\"\"\"\nWrite a function to convert the given camel case string to pascal case string by using regex.\n\"\"\"\ndef camel_to_pascal(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).title().replace('_', '')\n\n\"\"\"\nWrite a function to convert the given pascal case string to camel case string by using regex.\n\"\"\"\ndef pascal_to_camel(word):\n\treturn word[0].lower() + word[1:]\n\n\"\"\"\nWrite a function to convert the given pascal case string to snake case string by using regex.\n\"\"\"\ndef pascal_to_snake(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).lower()\n\n\"\"\"\nWrite a function to convert the given snake case string to pascal case string by using regex.\n\"\"\"\ndef snake_to_pascal(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word).title().replace('_', '')\n\n\"\"\"\nWrite a function to convert the given string to title case by using regex.\n\"\"\"\ndef to_title(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).title().replace('_', '')\n\n\"\"\"\nWrite a function to convert the given string to sentence case by using regex.\n\"\"\"\ndef to_sentence(word):\n\treturn re.sub(r'([A-Z])', r'_\\1', word).lower().capitalize()\n\n\"\"\"\nWrite a function to convert the given string to upper case by using regex.\n\"\"\"\ndef to_upper(word):"}
{"ID": 775, "source": "MBPP:412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"\ndef remove_odd(l):\n\treturn [x for x in l if x%2==0]\n\n\"\"\"\nWrite a python function to find the maximum element in a given list.\n\"\"\"\ndef max_element(l):\n\treturn max(l)\n\n\"\"\"\nWrite a python function to find the minimum element in a given list.\n\"\"\"\ndef min_element(l):\n\treturn min(l)\n\n\"\"\"\nWrite a python function to find the sum of all elements in a given list.\n\"\"\"\ndef sum_element(l):\n\treturn sum(l)\n\n\"\"\"\nWrite a python function to find the product of all elements in a given list.\n\"\"\"\ndef product_element(l):\n\treturn product(l)\n\n\"\"\"\nWrite a python function to find the mean of all elements in a given list.\n\"\"\"\ndef mean_element(l):\n\treturn sum(l)/len(l)\n\n\"\"\"\nWrite a python function to find the median of all elements in a given list.\n\"\"\"\ndef median_element(l):\n\tl.sort()\n\tif len(l)%2==0:\n\t\treturn (l[len(l)//2]+l[len(l)//2-1])/2\n\telse:\n\t\treturn l[len(l)//2]\n\n\"\"\"\nWrite a python function to find the mode of all elements in a given list.\n\"\"\"\ndef mode_element(l):\n\treturn max(set(l), key=l.count)\n\n\"\"\"\nWrite a python function to find the variance of all elements in a given list.\n\"\"\"\ndef variance_element(l):\n\tmean = sum(l)/len(l)\n\treturn sum([(x-mean)**2 for x in l])/len(l)\n\n\"\"\"\nWrite a python function to find the standard deviation of all elements in a given list.\n\"\"\"\ndef std_element(l):\n\treturn variance_element(l)**0.5\n\n\"\"\"\nWrite a python function to find the frequency of all elements in a given list.\n\"\"\"\ndef frequency_element(l):\n\treturn {x:l.count(x) for x in set(l", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a python function to find the maximum element in a given list.\n\"\"\"\ndef max_element(l):\n\treturn max(l)\n\n\"\"\"\nWrite a python function to find the minimum element in a given list.\n\"\"\"\ndef min_element(l):\n\treturn min(l)\n\n\"\"\"\nWrite a python function to find the sum of all elements in a given list.\n\"\"\"\ndef sum_element(l):\n\treturn sum(l)\n\n\"\"\"\nWrite a python function to find the product of all elements in a given list.\n\"\"\"\ndef product_element(l):\n\treturn product(l)\n\n\"\"\"\nWrite a python function to find the mean of all elements in a given list.\n\"\"\"\ndef mean_element(l):\n\treturn sum(l)/len(l)\n\n\"\"\"\nWrite a python function to find the median of all elements in a given list.\n\"\"\"\ndef median_element(l):\n\tl.sort()\n\tif len(l)%2==0:\n\t\treturn (l[len(l)//2]+l[len(l)//2-1])/2\n\telse:\n\t\treturn l[len(l)//2]\n\n\"\"\"\nWrite a python function to find the mode of all elements in a given list.\n\"\"\"\ndef mode_element(l):\n\treturn max(set(l), key=l.count)\n\n\"\"\"\nWrite a python function to find the variance of all elements in a given list.\n\"\"\"\ndef variance_element(l):\n\tmean = sum(l)/len(l)\n\treturn sum([(x-mean)**2 for x in l])/len(l)\n\n\"\"\"\nWrite a python function to find the standard deviation of all elements in a given list.\n\"\"\"\ndef std_element(l):\n\treturn variance_element(l)**0.5\n"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 6\n\tif n == 5: \n\t\treturn 9\n\tif n == 6: \n\t\treturn 12\n\tif n == 7: \n\t\treturn 18\n\tif n == 8: \n\t\treturn 24\n\tif n == 9: \n\t\treturn 30\n\tif n == 10: \n\t\treturn 36\n\tif n == 11: \n\t\treturn 42\n\tif n == 12: \n\t\treturn 48\n\tif n == 13: \n\t\treturn 54\n\tif n == 14: \n\t\treturn 60\n\tif n == 15: \n\t\treturn 66\n\tif n == 16: \n\t\treturn 72\n\tif n == 17: \n\t\treturn 78\n\tif n == 18: \n\t\treturn 84\n\tif n == 19: \n\t\treturn 90\n\tif n == 20: \n\t\treturn 96\n\tif n == 21: \n\t\treturn 102\n\tif n == 22: \n\t\treturn 108\n\tif n == 23: \n\t\treturn 114\n\tif n == 24: \n\t\treturn 120\n\tif n == 25: \n\t\treturn 126\n\tif n == 26: \n\t\treturn 132\n\tif n == 27: \n\t\treturn 138\n\tif n == 28: \n\t\treturn 144\n\tif n == 29: \n\t\treturn 150\n\tif n == 30: \n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 6\n\tif n == 5: \n\t\treturn 9\n\tif n == 6: \n\t\treturn 12\n\tif n == 7: \n\t\treturn 18\n\tif n == 8: \n\t\treturn 24\n\tif n == 9: \n\t\treturn 30\n\tif n == 10: \n\t\treturn 36\n\tif n == 11: \n\t\treturn 42\n\tif n == 12: \n\t\treturn 48\n\tif n == 13: \n\t\treturn 54\n\tif n == 14: \n\t\treturn 60\n\tif n == 15: \n\t\treturn 66\n\tif n == 16: \n\t\treturn 72\n\tif n == 17: \n\t\treturn 78\n\tif n == 18: \n\t\treturn 84\n\tif n == 19: \n\t\treturn 90\n\tif n == 20: \n\t\treturn 96\n\tif n == 21: \n\t\treturn 102\n\tif n == 22: \n\t\treturn 108\n\tif n == 23: \n\t\treturn 114\n\tif n == 24: \n\t\treturn 120\n\tif n == 25: \n\t\treturn 126\n\tif n == 26: \n\t\treturn 132\n\tif n == 27: \n\t\treturn 138\n\tif n == 28: \n\t\treturn 144\n\tif n == 29: \n\t\treturn 150"}
{"ID": 780, "source": "MBPP:417", "prompt": "\"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\t", "predict": "<s> \"\"\"\nWrite a function to find common first element in given list of tuple.\n\"\"\"\ndef group_tuples(Input): \n\treturn list(zip(*Input))\n\ndef common_first_element(Input):\n\treturn group_tuples(Input)[0][0]\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4)]))\n# 1\n\nprint(common_first_element([(1, 2), (2, 3), (3, 4)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11)]))\n# 1\n\nprint(common_first_element([(1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn group_tuples(Input)[0][0]\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4)]))\n# 1\n\nprint(common_first_element([(1, 2), (2, 3), (3, 4)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10)]))\n# 1\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11)]))"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\tmax_len = 0\n\tfor i in range(len(lst)): \n\t\tcurr_len = 1\n\t\tfor j in range(i + 1, len(lst)): \n\t\t\tif lst[i] != lst[j]: \n\t\t\t\tbreak\n\t\t\tcurr_len += 1\n\t\tmax_len = max(max_len, curr_len) \n\treturn max_len \n\nlst = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "lst = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"ID": 789, "source": "MBPP:426", "prompt": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\ndef filter_oddnumbers(nums):\n\treturn list(filter(lambda x: x%2==0, nums))\n\n\"\"\"\nWrite a function to filter numbers greater than 5 using lambda function.\n\"\"\"\ndef filter_greaterthan(nums):\n\treturn list(filter(lambda x: x>5, nums))\n\n\"\"\"\nWrite a function to filter numbers less than 5 using lambda function.\n\"\"\"\ndef filter_lessthan(nums):\n\treturn list(filter(lambda x: x<5, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 using lambda function.\n\"\"\"\ndef filter_divisible(nums):\n\treturn list(filter(lambda x: x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers not divisible by 5 using lambda function.\n\"\"\"\ndef filter_notdivisible(nums):\n\treturn list(filter(lambda x: x%5!=0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and greater than 5 using lambda function.\n\"\"\"\ndef filter_divisible_greaterthan(nums):\n\treturn list(filter(lambda x: x%5==0 and x>5, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and less than 5 using lambda function.\n\"\"\"\ndef filter_divisible_lessthan(nums):\n\treturn list(filter(lambda x: x%5==0 and x<5, nums))\n\n\"\"\"\nWrite a function to filter numbers not divisible by 5 and greater than 5 using lambda function.\n\"\"\"\ndef filter_notdivisible_greaterthan(nums):\n\treturn list(filter(lambda x: x%5!=0 and x>5, nums))\n\n\"\"\"\nWrite a function to filter numbers not divisible by 5 and less than 5 using lambda function.\n\"\"\"\ndef filter_notdivisible_lessthan(nums):\n\treturn list(filter(lambda x: x%5!=0 and x<5, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and not divis", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to filter numbers greater than 5 using lambda function.\n\"\"\"\ndef filter_greaterthan(nums):\n\treturn list(filter(lambda x: x>5, nums))\n\n\"\"\"\nWrite a function to filter numbers less than 5 using lambda function.\n\"\"\"\ndef filter_lessthan(nums):\n\treturn list(filter(lambda x: x<5, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 using lambda function.\n\"\"\"\ndef filter_divisible(nums):\n\treturn list(filter(lambda x: x%5==0, nums))\n\n\"\"\"\nWrite a function to filter numbers not divisible by 5 using lambda function.\n\"\"\"\ndef filter_notdivisible(nums):\n\treturn list(filter(lambda x: x%5!=0, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and greater than 5 using lambda function.\n\"\"\"\ndef filter_divisible_greaterthan(nums):\n\treturn list(filter(lambda x: x%5==0 and x>5, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and less than 5 using lambda function.\n\"\"\"\ndef filter_divisible_lessthan(nums):\n\treturn list(filter(lambda x: x%5==0 and x<5, nums))\n\n\"\"\"\nWrite a function to filter numbers not divisible by 5 and greater than 5 using lambda function.\n\"\"\"\ndef filter_notdivisible_greaterthan(nums):\n\treturn list(filter(lambda x: x%5!=0 and x>5, nums))\n\n\"\"\"\nWrite a function to filter numbers not divisible by 5 and less than 5 using lambda function.\n\"\"\"\ndef filter_notdivisible_lessthan(nums):\n\treturn list(filter(lambda x: x%5!=0 and x<5, nums))\n\n\"\"\"\nWrite a function to filter numbers divisible by 5 and not divis"}
{"ID": 793, "source": "MBPP:430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"\ndef parabola_directrix(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\treturn -b / (4 * a)\n\n\"\"\"\nWrite a function to find the axis of symmetry of a parabola.\n\"\"\"\ndef parabola_axis(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the x-coordinate of the vertex of a parabola.\n\"\"\"\ndef parabola_vertex_x(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the y-coordinate of the vertex of a parabola.\n\"\"\"\ndef parabola_vertex_y(a, b, c): \n\treturn c - b ** 2 / (4 * a)\n\n\"\"\"\nWrite a function to find the y-intercept of a parabola.\n\"\"\"\ndef parabola_y_intercept(a, b, c): \n\treturn c - b ** 2 / (4 * a)\n\n\"\"\"\nWrite a function to find the x-intercept of a parabola.\n\"\"\"\ndef parabola_x_intercept(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the axis of symmetry of a parabola given the vertex.\n\"\"\"\ndef parabola_vertex_axis(v): \n\treturn v\n\n\"\"\"\nWrite a function to find the vertex of a parabola given the axis of symmetry.\n\"\"\"\ndef parabola_axis_vertex(a): \n\treturn a\n\n\"\"\"\nWrite a function to find the focus of a parabola given the directrix.\n\"\"\"\ndef parabola_directrix_focus(d): \n\treturn d + 1 /", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the focus of a parabola.\n\"\"\"\ndef parabola_focus(a, b, c): \n\treturn -b / (4 * a)\n\n\"\"\"\nWrite a function to find the axis of symmetry of a parabola.\n\"\"\"\ndef parabola_axis(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the vertex of a parabola.\n\"\"\"\ndef parabola_vertex(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the x-coordinate of the vertex of a parabola.\n\"\"\"\ndef parabola_vertex_x(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the y-coordinate of the vertex of a parabola.\n\"\"\"\ndef parabola_vertex_y(a, b, c): \n\treturn c - b ** 2 / (4 * a)\n\n\"\"\"\nWrite a function to find the y-intercept of a parabola.\n\"\"\"\ndef parabola_y_intercept(a, b, c): \n\treturn c - b ** 2 / (4 * a)\n\n\"\"\"\nWrite a function to find the x-intercept of a parabola.\n\"\"\"\ndef parabola_x_intercept(a, b, c): \n\treturn -b / (2 * a)\n\n\"\"\"\nWrite a function to find the axis of symmetry of a parabola given the vertex.\n\"\"\"\ndef parabola_vertex_axis(v): \n\treturn v\n\n\"\"\"\nWrite a function to find the vertex of a parabola given the axis of symmetry.\n\"\"\"\ndef parabola_axis_vertex(a): \n\treturn a\n\n\"\"\"\nWrite a function to find the focus of a parabola given the directrix.\n\"\"\"\ndef parabola_directrix_focus(d): "}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\timport re\n\tpattern = r\"ab+\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's and c's.\n\"\"\"\ndef text_match_two(text):\n\timport re\n\tpattern = r\"ab+c+\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two identical consecutive words.\n\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r\"\\b(\\w+)\\s\\1\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word starts with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_four(text):\n\timport re\n\tpattern = r\"\\b[A-Z]\\w*\\s[a-z]\\w*\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word ends with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_five(text):\n\timport re\n\tpattern = r\"\\b\\w*[A-Z]\\s[a-z]\\w*\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word ends with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_six(text):\n\timport re\n\tpattern = r\"\\b\\w*[A-Z]\\s[a-z]\\w*\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word ends with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_seven(text):\n\timport re\n\tpattern = r\"\\b\\w*[A", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef text_match_three(text):\n\timport re\n\tpattern = r\"\\b(\\w+)\\s\\1\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word starts with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_four(text):\n\timport re\n\tpattern = r\"\\b[A-Z]\\w*\\s[a-z]\\w*\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word ends with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_five(text):\n\timport re\n\tpattern = r\"\\b\\w*[A-Z]\\s[a-z]\\w*\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word ends with a capital letter and the second word starts with a small letter.\n\"\"\"\ndef text_match_six(text):\n\timport re\n\tpattern = r\"\\b\\w*[A-Z]\\s[a-z]\\w*\\b\"\n\treturn re.search(pattern, text) != None\n\n\"\"\"\nWrite a function that matches a string that has two words separated by a space, where the first word ends with a capital letter and the second word starts with a small letter."}
{"ID": 802, "source": "MBPP:439", "prompt": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef multiple_to_single(L):\n\treturn int(\"\".join(map(str, L)))\n\n\n\"\"\"\nWrite a function to convert a single integer into a list of multiple integers.\n\"\"\"\ndef single_to_multiple(n):\n\treturn list(map(int, str(n)))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of strings.\n\"\"\"\ndef int_to_str(L):\n\treturn list(map(str, L))\n\n\n\"\"\"\nWrite a function to convert a list of strings into a list of integers.\n\"\"\"\ndef str_to_int(L):\n\treturn list(map(int, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of floats.\n\"\"\"\ndef int_to_float(L):\n\treturn list(map(float, L))\n\n\n\"\"\"\nWrite a function to convert a list of floats into a list of integers.\n\"\"\"\ndef float_to_int(L):\n\treturn list(map(int, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of booleans.\n\"\"\"\ndef int_to_bool(L):\n\treturn list(map(bool, L))\n\n\n\"\"\"\nWrite a function to convert a list of booleans into a list of integers.\n\"\"\"\ndef bool_to_int(L):\n\treturn list(map(int, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of characters.\n\"\"\"\ndef int_to_char(L):\n\treturn list(map(chr, L))\n\n\n\"\"\"\nWrite a function to convert a list of characters into a list of integers.\n\"\"\"\ndef char_to_int(L):\n\treturn list(map(ord, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of tuples.\n\"\"\"\ndef int_to_tuple(L):\n\treturn list(map(tuple, L))\n\n\n\"\"\"\nWrite a function to convert a list of tuples into a list of integers.\n\"\"\"\ndef tuple_to_int(L):\n\treturn list(map", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn int(\"\".join(map(str, L)))\n\n\n\"\"\"\nWrite a function to convert a single integer into a list of multiple integers.\n\"\"\"\ndef single_to_multiple(n):\n\treturn list(map(int, str(n)))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of strings.\n\"\"\"\ndef int_to_str(L):\n\treturn list(map(str, L))\n\n\n\"\"\"\nWrite a function to convert a list of strings into a list of integers.\n\"\"\"\ndef str_to_int(L):\n\treturn list(map(int, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of floats.\n\"\"\"\ndef int_to_float(L):\n\treturn list(map(float, L))\n\n\n\"\"\"\nWrite a function to convert a list of floats into a list of integers.\n\"\"\"\ndef float_to_int(L):\n\treturn list(map(int, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of booleans.\n\"\"\"\ndef int_to_bool(L):\n\treturn list(map(bool, L))\n\n\n\"\"\"\nWrite a function to convert a list of booleans into a list of integers.\n\"\"\"\ndef bool_to_int(L):\n\treturn list(map(int, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of characters.\n\"\"\"\ndef int_to_char(L):\n\treturn list(map(chr, L))\n\n\n\"\"\"\nWrite a function to convert a list of characters into a list of integers.\n\"\"\"\ndef char_to_int(L):\n\treturn list(map(ord, L))\n\n\n\"\"\"\nWrite a function to convert a list of integers into a list of tuples.\n\"\"\"\ndef int_to_tuple(L):\n\treturn list(map(tuple, L))\n\n\n\"\"\"\nWrite a function to convert a list of tuples into a list of integers.\n\"\"\"\ndef tuple_to_int(L):"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\treturn 6*(l**2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n\treturn 2*(l*b + b*h + h*l)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\tfrom math import pi\n\treturn 4*pi*(r**2)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\tfrom math import pi\n\treturn (4/3)*pi*(r**3)\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\tfrom math import pi\n\treturn 2*pi*r*(r+h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\tfrom math import pi\n\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\tfrom math import pi\n\treturn pi*r*(r+sqrt(r**2+h**2))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\tfrom math import pi\n\treturn (1/3)*pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a ellipsoid.\n\"\"\"\ndef surfacearea_ellipsoid(a,b,c):\n\tfrom math import pi\n\treturn 4*pi*(a*b + b*c + c*a)\n\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\tfrom math import pi\n\treturn 4*pi*(r**2)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\tfrom math import pi\n\treturn (4/3)*pi*(r**3)\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\tfrom math import pi\n\treturn 2*pi*r*(r+h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\tfrom math import pi\n\treturn pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\tfrom math import pi\n\treturn pi*r*(r+sqrt(r**2+h**2))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\tfrom math import pi\n\treturn (1/3)*pi*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a ellipsoid.\n\"\"\"\ndef surfacearea_ellipsoid(a,b,c):"}
{"ID": 807, "source": "MBPP:444", "prompt": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\n\"\"\"\ndef trim_tuple(test_list, K):\n\treturn [tuple(i[:K]) for i in test_list]\n\nif __name__ == '__main__':\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 2))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 1))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 3))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 0))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 4))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 5))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 6))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 7))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 8))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nif __name__ == '__main__':\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 2))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 1))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 3))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 0))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 4))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 5))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 6))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 7))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\tprint(trim_tuple(test_list, 8))\n\n\ttest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]"}
{"ID": 809, "source": "MBPP:446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"\ndef count_Occurrence(tup, lst): \n\treturn [tup.count(i) for i in lst]\n\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(count_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(count_Occurrence((1,2,3,4,5,6,7,8,9,10), [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(count_"}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\timport re\n\treturn re.sub(r'\\s+', '', text1)\n\n\"\"\"\nWrite a function to remove all whitespaces from the given string without using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\treturn ''.join(text1.split())\n\n\"\"\"\nWrite a function to check if the given string is a valid email address.\n\"\"\"\ndef is_valid_email(email):\n\timport re\n\tregex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\treturn True if re.search(regex, email) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid phone number.\n\"\"\"\ndef is_valid_phone_number(phone_number):\n\timport re\n\tregex = r'^[0-9]{10}$'\n\treturn True if re.search(regex, phone_number) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid URL.\n\"\"\"\ndef is_valid_url(url):\n\timport re\n\tregex = r'^https?://'\n\treturn True if re.search(regex, url) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid password.\n\"\"\"\ndef is_valid_password(password):\n\timport re\n\tregex = r'^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$'\n\treturn True if re.search(regex, password) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid date.\n\"\"\"\ndef is_valid_date(date):\n\timport re\n\tregex = r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$'\n\treturn True if re.search(regex, date) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid time.\n\"\"\"\ndef is_valid", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef is_valid_email(email):\n\timport re\n\tregex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\treturn True if re.search(regex, email) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid phone number.\n\"\"\"\ndef is_valid_phone_number(phone_number):\n\timport re\n\tregex = r'^[0-9]{10}$'\n\treturn True if re.search(regex, phone_number) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid URL.\n\"\"\"\ndef is_valid_url(url):\n\timport re\n\tregex = r'^https?://'\n\treturn True if re.search(regex, url) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid password.\n\"\"\"\ndef is_valid_password(password):\n\timport re\n\tregex = r'^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$'\n\treturn True if re.search(regex, password) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid date.\n\"\"\"\ndef is_valid_date(date):\n\timport re\n\tregex = r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$'\n\treturn True if re.search(regex, date) else False\n\n\"\"\"\nWrite a function to check if the given string is a valid time.\n\"\"\"\ndef is_valid"}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\timport re\n\treturn re.findall(r'\\w*z\\w*', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last character.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\timport re\n\treturn re.findall(r'\\wz\\w', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character.\n\"\"\"\ndef text_match_wordz_first_last(text):\n\timport re\n\treturn re.findall(r'z\\w*|\\w*z', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both(text):\n\timport re\n\treturn re.findall(r'^z\\w*|\\w*z$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both_v2(text):\n\timport re\n\treturn re.findall(r'^z\\w*|z\\w*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both_v3(text):\n\timport re\n\treturn re.findall(r'^z\\w*|z\\w*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both_v4(text):\n\timport re\n\treturn re.findall(r'^z\\w*|z\\w*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is not the first or last character.\n\"\"\"\ndef text_match_wordz_not_first_last(text):\n\timport re\n\treturn re.findall(r'\\wz\\w', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character.\n\"\"\"\ndef text_match_wordz_first_last(text):\n\timport re\n\treturn re.findall(r'z\\w*|\\w*z', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both(text):\n\timport re\n\treturn re.findall(r'^z\\w*|\\w*z$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both_v2(text):\n\timport re\n\treturn re.findall(r'^z\\w*|z\\w*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both_v3(text):\n\timport re\n\treturn re.findall(r'^z\\w*|z\\w*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first or last character, but not both.\n\"\"\"\ndef text_match_wordz_first_last_not_both_v4(text):\n\timport re\n\treturn re.findall(r'^z\\w*|z\\w*$', text)\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'z' is the first"}
{"ID": 819, "source": "MBPP:456", "prompt": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\t", "predict": "<s> \"\"\"\nWrite a function to reverse strings in a given list of string values.\n\"\"\"\ndef reverse_string_list(stringlist):\n\treturn [string[::-1] for string in stringlist]\n\n\"\"\"\nWrite a function to find the longest common prefix in a list of strings.\n\"\"\"\ndef longest_common_prefix(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[i] != c:\n\t\t\t\treturn shortest_string[:i]\n\treturn shortest_string\n\n\"\"\"\nWrite a function to find the longest common suffix in a list of strings.\n\"\"\"\ndef longest_common_suffix(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[-i-1] != c:\n\t\t\t\treturn shortest_string[i:]\n\treturn shortest_string\n\n\"\"\"\nWrite a function to find the longest common substring in a list of strings.\n\"\"\"\ndef longest_common_substring(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[i] != c:\n\t\t\t\treturn shortest_string[:i]\n\treturn shortest_string\n\n\"\"\"\nWrite a function to find the longest common subsequence in a list of strings.\n\"\"\"\ndef longest_common_subsequence(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[i] != c:\n\t\t\t\treturn shortest_string[:i]\n\treturn shortest_string\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [string[::-1] for string in stringlist]\n\n\"\"\"\nWrite a function to find the longest common prefix in a list of strings.\n\"\"\"\ndef longest_common_prefix(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[i] != c:\n\t\t\t\treturn shortest_string[:i]\n\treturn shortest_string\n\n\"\"\"\nWrite a function to find the longest common suffix in a list of strings.\n\"\"\"\ndef longest_common_suffix(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[-i-1] != c:\n\t\t\t\treturn shortest_string[i:]\n\treturn shortest_string\n\n\"\"\"\nWrite a function to find the longest common substring in a list of strings.\n\"\"\"\ndef longest_common_substring(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[i] != c:\n\t\t\t\treturn shortest_string[:i]\n\treturn shortest_string\n\n\"\"\"\nWrite a function to find the longest common subsequence in a list of strings.\n\"\"\"\ndef longest_common_subsequence(stringlist):\n\tif not stringlist:\n\t\treturn \"\"\n\tshortest_string = min(stringlist, key=len)\n\tfor i, c in enumerate(shortest_string):\n\t\tfor other_string in stringlist:\n\t\t\tif other_string[i] != c:\n\t\t\t\treturn shortest_string[:i]\n\treturn shortest_string\n\n\"\"\""}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\ndef trapezium_perimeter(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(d1,d2):\n\treturn 4*d1\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef cube_area(s):", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l*b\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a,b,c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(l,b):\n\treturn 2*(l+b)\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn 0.5*(a+b)*h\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\ndef trapezium_perimeter(a,b,c,d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn 0.5*d1*d2\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\ndef rhombus_perimeter(d1,d2):\n\treturn 4*d1\n\n\"\"\"\nWrite a function to find the area of a cube.\n\"\"\"\ndef cube_area(s):"}
{"ID": 822, "source": "MBPP:459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\n\"\"\"\ndef remove_uppercase(str1):\n\timport re\n\treturn re.sub(r'[A-Z]+', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string.\n\"\"\"\ndef remove_vowels(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\"\ndef remove_vowels_regex(str1):\n\timport re\n\treturn re.sub(r'[aeiou]', '', str1)\n\n\"\"\"\nWrite a function to remove all the vowels from a given string using regex.\n\"\"\""}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\tif not arr:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so_far = arr[0]\n\tmin_so_far = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tnum = arr[i]\n\t\tmax_product = max(num, max_product * num, min_product * num)\n\t\tmin_product = min(num, max_product * num, min_product * num)\n\t\tmax_so_far = max(max_so_far * num, max_product)\n\t\tmin_so_far = min(min_so_far * num, min_product)\n\treturn max(max_so_far, min_so_far)\n\n\nprint(max_subarray_product([1, 2, 3, 4]))\nprint(max_subarray_product([-1, -2, -3, -4]))\nprint(max_subarray_product([-1, 2, 3, -4]))\nprint(max_subarray_product([-1, 2, -3, -4]))\nprint(max_subarray_product([-1, -2, 3, -4]))\nprint(max_subarray_product([-1, -2, -3, 4]))\nprint(max_subarray_product([-1, -2, -3, -4]))\nprint(max_subarray_product([-1, -2, -3, -4, -5]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(max_subarray_product([-1, -2, -", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_subarray_product([1, 2, 3, 4]))\nprint(max_subarray_product([-1, -2, -3, -4]))\nprint(max_subarray_product([-1, 2, 3, -4]))\nprint(max_subarray_product([-1, 2, -3, -4]))\nprint(max_subarray_product([-1, -2, 3, -4]))\nprint(max_subarray_product([-1, -2, -3, 4]))\nprint(max_subarray_product([-1, -2, -3, -4]))\nprint(max_subarray_product([-1, -2, -3, -4, -5]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8]))\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(max_subarray_product([-1, -2, -"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "<s> \"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\treturn oct(deciNum)[2:]\n\nprint(decimal_to_Octal(12))\nprint(decimal_to_Octal(15))\nprint(decimal_to_Octal(25))\nprint(decimal_to_Octal(35))\nprint(decimal_to_Octal(45))\nprint(decimal_to_Octal(55))\nprint(decimal_to_Octal(65))\nprint(decimal_to_Octal(75))\nprint(decimal_to_Octal(85))\nprint(decimal_to_Octal(95))\nprint(decimal_to_Octal(100))\nprint(decimal_to_Octal(1000))\nprint(decimal_to_Octal(10000))\nprint(decimal_to_Octal(100000))\nprint(decimal_to_Octal(1000000))\nprint(decimal_to_Octal(10000000))\nprint(decimal_to_Octal(100000000))\nprint(decimal_to_Octal(1000000000))\nprint(decimal_to_Octal(10000000000))\nprint(decimal_to_Octal(100000000000))\nprint(decimal_to_Octal(1000000000000))\nprint(decimal_to_Octal(10000000000000))\nprint(decimal_to_Octal(100000000000000))\nprint(decimal_to_Octal(1000000000000000))\nprint(decimal_to_Octal(10000000000000000))\nprint(decimal_to_Octal(100000000000000000))\nprint", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(decimal_to_Octal(12))\nprint(decimal_to_Octal(15))\nprint(decimal_to_Octal(25))\nprint(decimal_to_Octal(35))\nprint(decimal_to_Octal(45))\nprint(decimal_to_Octal(55))\nprint(decimal_to_Octal(65))\nprint(decimal_to_Octal(75))\nprint(decimal_to_Octal(85))\nprint(decimal_to_Octal(95))\nprint(decimal_to_Octal(100))\nprint(decimal_to_Octal(1000))\nprint(decimal_to_Octal(10000))\nprint(decimal_to_Octal(100000))\nprint(decimal_to_Octal(1000000))\nprint(decimal_to_Octal(10000000))\nprint(decimal_to_Octal(100000000))\nprint(decimal_to_Octal(1000000000))\nprint(decimal_to_Octal(10000000000))\nprint(decimal_to_Octal(100000000000))\nprint(decimal_to_Octal(1000000000000))\nprint(decimal_to_Octal(10000000000000))\nprint(decimal_to_Octal(100000000000000))\nprint(decimal_to_Octal(1000000000000000))\nprint(decimal_to_Octal(10000000000000000))\nprint(decimal_to_Octal(100000000000000000))\nprint"}
{"ID": 835, "source": "MBPP:472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"\ndef check_Consecutive(l): \n\tl.sort()\n\tfor i in range(len(l)-1):\n\t\tif l[i+1] - l[i] != 1:\n\t\t\treturn False\n\treturn True\n\nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,4,5,6]))\nprint(check_Consecutive([1,2,3,5,6]))\nprint(check_Consecutive([1,2,3,4,6]))\nprint(check_Consecutive([1,2,3,4,5,6]))\nprint(check_Consecutive([1,2,3,4,5,6,7]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,4,5,6]))\nprint(check_Consecutive([1,2,3,5,6]))\nprint(check_Consecutive([1,2,3,4,6]))\nprint(check_Consecutive([1,2,3,4,5,6]))\nprint(check_Consecutive([1,2,3,4,5,6,7]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(check_Consecutive([1,2,3,4,5,6"}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort counter by key.\n\"\"\"\ndef sort_counter_key(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort counter by value in descending order.\n\"\"\"\ndef sort_counter_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort counter by key in descending order.\n\"\"\"\ndef sort_counter_key_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0], reverse=True)\n\n\"\"\"\nWrite a function to sort counter by value and return a list of keys.\n\"\"\"\ndef sort_counter_key_list(dict1):\n\treturn [x[0] for x in sorted(dict1.items(), key=lambda x: x[1])]\n\n\"\"\"\nWrite a function to sort counter by value in descending order and return a list of keys.\n\"\"\"\ndef sort_counter_key_list_desc(dict1):\n\treturn [x[0] for x in sorted(dict1.items(), key=lambda x: x[1], reverse=True)]\n\n\"\"\"\nWrite a function to sort counter by key and return a list of values.\n\"\"\"\ndef sort_counter_value_list(dict1):\n\treturn [x[1] for x in sorted(dict1.items(), key=lambda x: x[0])]\n\n\"\"\"\nWrite a function to sort counter by key in descending order and return a list of values.\n\"\"\"\ndef sort_counter_value_list_desc(dict1):\n\treturn [x[1] for x in sorted(dict1.items(), key=lambda x: x[0], reverse=True)]\n\n\"\"\"\nWrite a function to sort counter by value and return a dictionary.\n\"\"\"\ndef sort_counter_dict(dict1):\n\treturn dict(sorted(dict1.items(), key=lambda x: x[1]))\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to sort counter by key.\n\"\"\"\ndef sort_counter_key(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort counter by value in descending order.\n\"\"\"\ndef sort_counter_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort counter by key in descending order.\n\"\"\"\ndef sort_counter_key_desc(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[0], reverse=True)\n\n\"\"\"\nWrite a function to sort counter by value and return a list of keys.\n\"\"\"\ndef sort_counter_key_list(dict1):\n\treturn [x[0] for x in sorted(dict1.items(), key=lambda x: x[1])]\n\n\"\"\"\nWrite a function to sort counter by value in descending order and return a list of keys.\n\"\"\"\ndef sort_counter_key_list_desc(dict1):\n\treturn [x[0] for x in sorted(dict1.items(), key=lambda x: x[1], reverse=True)]\n\n\"\"\"\nWrite a function to sort counter by key and return a list of values.\n\"\"\"\ndef sort_counter_value_list(dict1):\n\treturn [x[1] for x in sorted(dict1.items(), key=lambda x: x[0])]\n\n\"\"\"\nWrite a function to sort counter by key in descending order and return a list of values."}
{"ID": 845, "source": "MBPP:482", "prompt": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\ndef match(text): \n\timport re\n\treturn re.findall(r'[A-Z][a-z]+', text)\n\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\"\"\"\n"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[-1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[-1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[-1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[-1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the first element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the second element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): "}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\treturn (5*a**2)/(4*tan(pi/5))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\treturn (3*sqrt(3)*a**2)\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(a):\n\treturn (7*a**2)/(4*tan(pi/7))\n\n\"\"\"\nWrite a function to find the area of an octagon.\n\"\"\"\ndef area_octagon(a):\n\treturn (2*(1+sqrt(2))*a**2)\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef area_nonagon(a):\n\treturn (9*a**2)/(4*tan(pi/9))\n\n\"\"\"\nWrite a function to find the area of a decagon.\n\"\"\"\ndef area_decagon(a):\n\treturn (10*a**2)/(4*tan(pi/10))\n\n\"\"\"\nWrite a function to find the area of a hendecagon.\n\"\"\"\ndef area_hendecagon(a):\n\treturn (11*a**2)/(4*tan(pi/11))\n\n\"\"\"\nWrite a function to find the area of a dodecagon.\n\"\"\"\ndef area_dodecagon(a):\n\treturn (12*a**2)/(4*tan(pi/12))\n\n\"\"\"\nWrite a function to find the area of a triskaidecagon.\n\"\"\"\ndef area_triskaidecagon(a):\n\treturn (13*a**2)/(4*tan(pi/13))\n\n\"\"\"\nWrite a function to find the area of a tetrakaidecagon.\n\"\"\"\ndef area_tetrakaidecagon(a):\n\treturn (14*a**2)/(4*tan(pi/14))\n\n\"\"\"\nWrite a function to find the area of a pentadecagon.\n\"\"\"\ndef area_pentadecagon(a):\n\treturn (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (5*a**2)/(4*tan(pi/5))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\treturn (3*sqrt(3)*a**2)\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\ndef area_heptagon(a):\n\treturn (7*a**2)/(4*tan(pi/7))\n\n\"\"\"\nWrite a function to find the area of an octagon.\n\"\"\"\ndef area_octagon(a):\n\treturn (2*(1+sqrt(2))*a**2)\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\ndef area_nonagon(a):\n\treturn (9*a**2)/(4*tan(pi/9))\n\n\"\"\"\nWrite a function to find the area of a decagon.\n\"\"\"\ndef area_decagon(a):\n\treturn (10*a**2)/(4*tan(pi/10))\n\n\"\"\"\nWrite a function to find the area of a hendecagon.\n\"\"\"\ndef area_hendecagon(a):\n\treturn (11*a**2)/(4*tan(pi/11))\n\n\"\"\"\nWrite a function to find the area of a dodecagon.\n\"\"\"\ndef area_dodecagon(a):\n\treturn (12*a**2)/(4*tan(pi/12))\n\n\"\"\"\nWrite a function to find the area of a triskaidecagon.\n\"\"\"\ndef area_triskaidecagon(a):\n\treturn (13*a**2)/(4*tan(pi/13))\n\n\"\"\"\nWrite a function to find the area of a tetrakaidecagon.\n\"\"\"\ndef area_tetrakaidecagon(a):\n\treturn (14*a**2)/(4*tan(pi/14))\n\n\"\"\"\nWrite a function to find the area of a pentadecagon.\n\"\"\"\ndef area_pentadecagon(a):"}
{"ID": 857, "source": "MBPP:494", "prompt": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given binary tuple to integer.\n\"\"\"\ndef binary_to_integer(test_tup):\n\tresult = 0\n\tfor i in range(len(test_tup)):\n\t\tresult += test_tup[i] * 2 ** i\n\treturn result\n\nif __name__ == \"__main__\":\n\tprint(binary_to_integer((1, 0, 1)))\n\tprint(binary_to_integer((1, 1, 1)))\n\tprint(binary_to_integer((0, 0, 0, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(binary_to_integer((1, 0, 1)))\n\tprint(binary_to_integer((1, 1, 1)))\n\tprint(binary_to_integer((0, 0, 0, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))\n\tprint(binary_to_"}
{"ID": 858, "source": "MBPP:495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\n\"\"\"\ndef remove_lowercase(str1):\n\timport re\n\treturn re.sub(r'[a-z]+', '', str1)\n\n\"\"\"\nWrite a function to remove all the comments from a C program.\n\"\"\"\ndef remove_comments(str1):\n\timport re\n\treturn re.sub(r'/\\*.*?\\*/', '', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid email address or not.\n\"\"\"\ndef is_valid_email(str1):\n\timport re\n\treturn re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid phone number or not.\n\"\"\"\ndef is_valid_phone(str1):\n\timport re\n\treturn re.match(r'^[0-9]{10}$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid URL or not.\n\"\"\"\ndef is_valid_url(str1):\n\timport re\n\treturn re.match(r'^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid IP address or not.\n\"\"\"\ndef is_valid_ip(str1):\n\timport re\n\treturn re.match(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid MAC address or not.\n\"\"\"\ndef is_valid_mac(str1):\n\timport re\n\treturn re.match(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\timport re\n\treturn re.sub(r'/\\*.*?\\*/', '', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid email address or not.\n\"\"\"\ndef is_valid_email(str1):\n\timport re\n\treturn re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid phone number or not.\n\"\"\"\ndef is_valid_phone(str1):\n\timport re\n\treturn re.match(r'^[0-9]{10}$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid URL or not.\n\"\"\"\ndef is_valid_url(str1):\n\timport re\n\treturn re.match(r'^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid IP address or not.\n\"\"\"\ndef is_valid_ip(str1):\n\timport re\n\treturn re.match(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', str1)\n\n\"\"\"\nWrite a function to check whether a given string is a valid MAC address or not.\n\"\"\"\ndef is_valid_mac(str1):"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "<s> \"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\treturn \"\".join(list)\n\n\"\"\"\nWrite a function to check if the given string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check if the given string is a pangram.\n\"\"\"\ndef is_pangram(string):\n\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tfor char in alphabet:\n\t\tif char not in string:\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid hexadecimal color code.\n\"\"\"\ndef is_hexadecimal_color_code(string):\n\tif len(string) != 7:\n\t\treturn False\n\tif string[0] != \"#\":\n\t\treturn False\n\tfor char in string[1:]:\n\t\tif char not in \"0123456789abcdef\":\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid email address.\n\"\"\"\ndef is_email_address(string):\n\tif \"@\" not in string:\n\t\treturn False\n\tif \".\" not in string:\n\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid phone number.\n\"\"\"\ndef is_phone_number(string):\n\tif len(string) != 10:\n\t\treturn False\n\tfor char in string:\n\t\tif char not in \"0123456789\":\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid URL.\n\"\"\"\ndef is_url(string):\n\tif \".\" not in string:\n\t\treturn False\n\tif \"http\" not in string:\n\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid Roman numeral.\n\"\"\"\ndef is_roman_numeral(string):\n\troman_numerals = [\"I\", \"V\", \"X\", \"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def is_hexadecimal_color_code(string):\n\tif len(string) != 7:\n\t\treturn False\n\tif string[0] != \"#\":\n\t\treturn False\n\tfor char in string[1:]:\n\t\tif char not in \"0123456789abcdef\":\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid email address.\n\"\"\"\ndef is_email_address(string):\n\tif \"@\" not in string:\n\t\treturn False\n\tif \".\" not in string:\n\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid phone number.\n\"\"\"\ndef is_phone_number(string):\n\tif len(string) != 10:\n\t\treturn False\n\tfor char in string:\n\t\tif char not in \"0123456789\":\n\t\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid URL.\n\"\"\"\ndef is_url(string):\n\tif \".\" not in string:\n\t\treturn False\n\tif \"http\" not in string:\n\t\treturn False\n\treturn True\n\n\"\"\"\nWrite a function to check if the given string is a valid Roman numeral.\n\"\"\"\ndef is_roman_numeral(string):\n\troman_numerals = [\"I\", \"V\", \"X\", \""}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\treturn n%m\n\nprint(find(10,3))\nprint(find(10,5))\nprint(find(10,7))\nprint(find(10,9))\nprint(find(10,10))\nprint(find(10,11))\nprint(find(10,12))\nprint(find(10,13))\nprint(find(10,14))\nprint(find(10,15))\nprint(find(10,16))\nprint(find(10,17))\nprint(find(10,18))\nprint(find(10,19))\nprint(find(10,20))\nprint(find(10,21))\nprint(find(10,22))\nprint(find(10,23))\nprint(find(10,24))\nprint(find(10,25))\nprint(find(10,26))\nprint(find(10,27))\nprint(find(10,28))\nprint(find(10,29))\nprint(find(10,30))\nprint(find(10,31))\nprint(find(10,32))\nprint(find(10,33))\nprint(find(10,34))\nprint(find(10,35))\nprint(find(10,36))\nprint(find(10,37))\nprint(find(10,38))\nprint(find(10,39))\nprint(find(10,40))\nprint(find(10,41))\nprint(find(10,42))\nprint(find(10,43))\nprint(find(10,44))\nprint(find(10,45))\nprint(find(10,46))\nprint(find(10,47))\nprint(find(10,48))\nprint(find(10,49))\nprint(find(10,50))\nprint(find(10,51))\nprint(find(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find(10,3))\nprint(find(10,5))\nprint(find(10,7))\nprint(find(10,9))\nprint(find(10,10))\nprint(find(10,11))\nprint(find(10,12))\nprint(find(10,13))\nprint(find(10,14))\nprint(find(10,15))\nprint(find(10,16))\nprint(find(10,17))\nprint(find(10,18))\nprint(find(10,19))\nprint(find(10,20))\nprint(find(10,21))\nprint(find(10,22))\nprint(find(10,23))\nprint(find(10,24))\nprint(find(10,25))\nprint(find(10,26))\nprint(find(10,27))\nprint(find(10,28))\nprint(find(10,29))\nprint(find(10,30))\nprint(find(10,31))\nprint(find(10,32))\nprint(find(10,33))\nprint(find(10,34))\nprint(find(10,35))\nprint(find(10,36))\nprint(find(10,37))\nprint(find(10,38))\nprint(find(10,39))\nprint(find(10,40))\nprint(find(10,41))\nprint(find(10,42))\nprint(find(10,43))\nprint(find(10,44))\nprint(find(10,45))\nprint(find(10,46))\nprint(find(10,47))\nprint(find(10,48))\nprint(find(10,49))\nprint(find(10,50))\nprint(find(10,51))\nprint(find("}
{"ID": 872, "source": "MBPP:509", "prompt": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\n\"\"\"\ndef average_Odd(n) : \n\tsum = 0\n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif (i % 2 != 0) : \n\t\t\tsum = sum + i \n\t\t\tcount = count + 1\n\treturn sum / count\n\nprint(average_Odd(5))\nprint(average_Odd(15))\nprint(average_Odd(25))\nprint(average_Odd(35))\nprint(average_Odd(45))\nprint(average_Odd(55))\nprint(average_Odd(65))\nprint(average_Odd(75))\nprint(average_Odd(85))\nprint(average_Odd(95))\nprint(average_Odd(105))\nprint(average_Odd(115))\nprint(average_Odd(125))\nprint(average_Odd(135))\nprint(average_Odd(145))\nprint(average_Odd(155))\nprint(average_Odd(165))\nprint(average_Odd(175))\nprint(average_Odd(185))\nprint(average_Odd(195))\nprint(average_Odd(205))\nprint(average_Odd(215))\nprint(average_Odd(225))\nprint(average_Odd(235))\nprint(average_Odd(245))\nprint(average_Odd(255))\nprint(average_Odd(265))\nprint(average_Odd(275))\nprint(average_Odd(285))\nprint(average_Odd(295))\nprint(average_Odd(305))\nprint(average_Odd(315))\nprint(average_Odd(325))\nprint(average_Odd(335))\nprint(average_Odd(345))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(average_Odd(5))\nprint(average_Odd(15))\nprint(average_Odd(25))\nprint(average_Odd(35))\nprint(average_Odd(45))\nprint(average_Odd(55))\nprint(average_Odd(65))\nprint(average_Odd(75))\nprint(average_Odd(85))\nprint(average_Odd(95))\nprint(average_Odd(105))\nprint(average_Odd(115))\nprint(average_Odd(125))\nprint(average_Odd(135))\nprint(average_Odd(145))\nprint(average_Odd(155))\nprint(average_Odd(165))\nprint(average_Odd(175))\nprint(average_Odd(185))\nprint(average_Odd(195))\nprint(average_Odd(205))\nprint(average_Odd(215))\nprint(average_Odd(225))\nprint(average_Odd(235))\nprint(average_Odd(245))\nprint(average_Odd(255))\nprint(average_Odd(265))\nprint(average_Odd(275))\nprint(average_Odd(285))\nprint(average_Odd(295))\nprint(average_Odd(305))\nprint(average_Odd(315))\nprint(average_Odd(325))\nprint(average_Odd(335))\nprint(average_Odd(345))"}
{"ID": 873, "source": "MBPP:510", "prompt": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\"\"\"\ndef no_of_subsequences(arr, k): \n\tn = len(arr)\n\tif n == 0:\n\t\treturn 0\n\tif k == 1:\n\t\treturn (2 ** n) - 1\n\tdp = [0] * (n + 1)\n\tdp[0] = 1\n\tans = 0\n\tfor i in range(1, n + 1):\n\t\tdp[i] = dp[i - 1] * arr[i - 1]\n\t\tif dp[i] < k:\n\t\t\tans += 2 ** (i - 1)\n\t\tif dp[i] == k:\n\t\t\tans += 1\n\tfor i in range(n, 0, -1):\n\t\tif dp[i - 1] > k:\n\t\t\tans += 2 ** (n - i)\n\treturn ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 875, "source": "MBPP:512", "prompt": "\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\ndef count_element_freq(test_tuple):\n\tcount = {}\n\tfor i in test_tuple:\n\t\tif type(i) == tuple:\n\t\t\tcount_element_freq(i)\n\t\telse:\n\t\t\tif i in count:\n\t\t\t\tcount[i] += 1\n\t\t\telse:\n\t\t\t\tcount[i] = 1\n\treturn count\n\ntest_tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,1", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_tuple = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,1"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\treturn num**3/6\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn (base*height)/2\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(radius):\n\treturn 3.14*radius**2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(length, width):\n\treturn length*width\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1, diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(base1, base2, height):\n\treturn (base1+base2)*height/2\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn (base*height)/2\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(radius):\n\treturn 3.14*radius**2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(length, width):\n\treturn length*width\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1, diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\n\"\"\"\nWrite a function to calculate the area of a parallelo", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn (base*height)/2\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(radius):\n\treturn 3.14*radius**2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(length, width):\n\treturn length*width\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1, diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\n\"\"\"\nWrite a function to calculate the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(base1, base2, height):\n\treturn (base1+base2)*height/2\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn (base*height)/2\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\ndef area_circle(radius):\n\treturn 3.14*radius**2\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(length, width):\n\treturn length*width\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to calculate the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1, diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\n\"\"\"\nWrite a function to calculate the area of a parallelo"}
{"ID": 888, "source": "MBPP:525", "prompt": "\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether two given lines are parallel or not.\n\"\"\"\ndef parallel_lines(line1, line2):\n\tif line1[0] == line2[0] and line1[1] == line2[1]:\n\t\treturn True\n\telse:\n\t\treturn False\nprint(parallel_lines((2, 3), (2, 3)))\nprint(parallel_lines((2, 3), (3, 4)))\nprint(parallel_lines((2, 3), (4, 5)))\nprint(parallel_lines((2, 3), (5, 6)))\nprint(parallel_lines((2, 3), (6, 7)))\nprint(parallel_lines((2, 3), (7, 8)))\nprint(parallel_lines((2, 3), (8, 9)))\nprint(parallel_lines((2, 3), (9, 10)))\nprint(parallel_lines((2, 3), (10, 11)))\nprint(parallel_lines((2, 3), (11, 12)))\nprint(parallel_lines((2, 3), (12, 13)))\nprint(parallel_lines((2, 3), (13, 14)))\nprint(parallel_lines((2, 3), (14, 15)))\nprint(parallel_lines((2, 3), (15, 16)))\nprint(parallel_lines((2, 3), (16, 17)))\nprint(parallel_lines((2, 3), (17, 18)))\nprint(parallel_lines((2, 3), (18, 19)))\nprint(parallel_lines((2, 3), (19, 20)))\nprint(parallel_lines((2, 3), (20, 21)))\nprint(parallel_lines((2, 3), (21, 22)))\nprint(parallel_lines((2, 3), (22, 23)))\nprint(parallel_lines((2, 3), (23, 24)))\nprint(parallel_lines((2, 3), (24, 25)))\nprint(parallel_lines((2, 3), (25, 26)))\nprint(parallel_lines((2,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(parallel_lines((2, 3), (2, 3)))\nprint(parallel_lines((2, 3), (3, 4)))\nprint(parallel_lines((2, 3), (4, 5)))\nprint(parallel_lines((2, 3), (5, 6)))\nprint(parallel_lines((2, 3), (6, 7)))\nprint(parallel_lines((2, 3), (7, 8)))\nprint(parallel_lines((2, 3), (8, 9)))\nprint(parallel_lines((2, 3), (9, 10)))\nprint(parallel_lines((2, 3), (10, 11)))\nprint(parallel_lines((2, 3), (11, 12)))\nprint(parallel_lines((2, 3), (12, 13)))\nprint(parallel_lines((2, 3), (13, 14)))\nprint(parallel_lines((2, 3), (14, 15)))\nprint(parallel_lines((2, 3), (15, 16)))\nprint(parallel_lines((2, 3), (16, 17)))\nprint(parallel_lines((2, 3), (17, 18)))\nprint(parallel_lines((2, 3), (18, 19)))\nprint(parallel_lines((2, 3), (19, 20)))\nprint(parallel_lines((2, 3), (20, 21)))\nprint(parallel_lines((2, 3), (21, 22)))\nprint(parallel_lines((2, 3), (22, 23)))\nprint(parallel_lines((2, 3), (23, 24)))\nprint(parallel_lines((2, 3), (24, 25)))\nprint(parallel_lines((2, 3), (25, 26)))\nprint(parallel_lines((2,"}
{"ID": 891, "source": "MBPP:528", "prompt": "\"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the list of lists with minimum length.\n\"\"\"\ndef min_length(list1):\n\tmin_len = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_len}
{"ID": 897, "source": "MBPP:534", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\t", "predict": "<s> \"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\"\"\"\ndef search_literal(pattern,text):\n\tn = len(pattern)\n\tm = len(text)\n\tfor i in range(m-n+1):\n\t\tj = 0\n\t\twhile j < n and pattern[j] == text[i+j]:\n\t\t\tj += 1\n\t\tif j == n:\n\t\t\treturn i\n\treturn -1\n\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\"abcdefg\"))\nprint(search_literal(\"abcd\",\""}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\treturn 2 * 3.14 * r * r\n\nprint(topbottom_surfacearea(10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume(r, h):\n\treturn 3.14 * r * r * h\n\nprint(volume(10, 10))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea(r):\n\treturn 4 * 3.14 * r * r\n\nprint(surfacearea(10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume(r):\n\treturn (4/3) * 3.14 * r * r * r\n\nprint(volume(10))\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea(s):\n\treturn 6 * s * s\n\nprint(surfacearea(10))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume(s):\n\treturn s * s * s\n\nprint(volume(10))\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\nprint(surfacearea(10, 10, 10))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume(l, w, h):\n\treturn l * w * h\n\nprint(volume(10, 10, 10))\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\nprint(surfacearea(10, 10, 10))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume(l, w, h):\n\treturn l *", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2 * 3.14 * r * r\n\nprint(topbottom_surfacearea(10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume(r, h):\n\treturn 3.14 * r * r * h\n\nprint(volume(10, 10))\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea(r):\n\treturn 4 * 3.14 * r * r\n\nprint(surfacearea(10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume(r):\n\treturn (4/3) * 3.14 * r * r * r\n\nprint(volume(10))\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea(s):\n\treturn 6 * s * s\n\nprint(surfacearea(10))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume(s):\n\treturn s * s * s\n\nprint(volume(10))\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\nprint(surfacearea(10, 10, 10))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume(l, w, h):\n\treturn l * w * h\n\nprint(volume(10, 10, 10))\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea(l, w, h):\n\treturn 2 * (l * w + l * h + w * h)\n\nprint(surfacearea(10, 10, 10))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume(l, w, h):"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn list[n-1]\n\n\"\"\"\nWrite a function to select the even items of a list.\n\"\"\"\ndef even_items(list):\n\treturn [item for index,item in enumerate(list) if index%2==0]\n\n\"\"\"\nWrite a function to select the odd items of a list.\n\"\"\"\ndef odd_items(list):\n\treturn [item for index,item in enumerate(list) if index%2!=0]\n\n\"\"\"\nWrite a function to select the first item of a list.\n\"\"\"\ndef first_item(list):\n\treturn list[0]\n\n\"\"\"\nWrite a function to select the last item of a list.\n\"\"\"\ndef last_item(list):\n\treturn list[-1]\n\n\"\"\"\nWrite a function to select the last n items of a list.\n\"\"\"\ndef last_n_items(list,n):\n\treturn list[-n:]\n\n\"\"\"\nWrite a function to select the first n items of a list.\n\"\"\"\ndef first_n_items(list,n):\n\treturn list[:n]\n\n\"\"\"\nWrite a function to select the middle items of a list.\n\"\"\"\ndef middle_items(list):\n\treturn list[1:-1]\n\n\"\"\"\nWrite a function to select the middle item of a list.\n\"\"\"\ndef middle_item(list):\n\treturn list[len(list)//2]\n\n\"\"\"\nWrite a function to select the last item of a list.\n\"\"\"\ndef last_item(list):\n\treturn list[-1]\n\n\"\"\"\nWrite a function to select the first item of a list.\n\"\"\"\ndef first_item(list):\n\treturn list[0]\n\n\"\"\"\nWrite a function to select the last n items of a list.\n\"\"\"\ndef last_n_items(list,n):\n\treturn list[-n:]\n\n\"\"\"\nWrite a function to select the first n items of a list.\n\"\"\"\ndef first_n_items(list,n):\n\treturn list[:n]\n\n\"\"\"\nWrite a function to select the middle items of a list.\n\"\"\"\ndef middle_items(list):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list[n-1]\n\n\"\"\"\nWrite a function to select the even items of a list.\n\"\"\"\ndef even_items(list):\n\treturn [item for index,item in enumerate(list) if index%2==0]\n\n\"\"\"\nWrite a function to select the odd items of a list.\n\"\"\"\ndef odd_items(list):\n\treturn [item for index,item in enumerate(list) if index%2!=0]\n\n\"\"\"\nWrite a function to select the first item of a list.\n\"\"\"\ndef first_item(list):\n\treturn list[0]\n\n\"\"\"\nWrite a function to select the last item of a list.\n\"\"\"\ndef last_item(list):\n\treturn list[-1]\n\n\"\"\"\nWrite a function to select the last n items of a list.\n\"\"\"\ndef last_n_items(list,n):\n\treturn list[-n:]\n\n\"\"\"\nWrite a function to select the first n items of a list.\n\"\"\"\ndef first_n_items(list,n):\n\treturn list[:n]\n\n\"\"\"\nWrite a function to select the middle items of a list.\n\"\"\"\ndef middle_items(list):\n\treturn list[1:-1]\n\n\"\"\"\nWrite a function to select the middle item of a list.\n\"\"\"\ndef middle_item(list):\n\treturn list[len(list)//2]\n\n\"\"\"\nWrite a function to select the last item of a list.\n\"\"\"\ndef last_item(list):\n\treturn list[-1]\n\n\"\"\"\nWrite a function to select the first item of a list.\n\"\"\"\ndef first_item(list):\n\treturn list[0]\n\n\"\"\"\nWrite a function to select the last n items of a list.\n\"\"\"\ndef last_n_items(list,n):\n\treturn list[-n:]\n\n\"\"\"\nWrite a function to select the first n items of a list.\n\"\"\"\ndef first_n_items(list,n):\n\treturn list[:n]\n\n\"\"\"\nWrite a function to select the middle items of a list.\n\"\"\"\ndef middle_items(list):"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string without using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn ':'.join(text.split())\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and lambda.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and map.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and filter.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and reduce.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and list comprehension.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and dictionary.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string without using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn ':'.join(text.split())\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and lambda.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and map.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and filter.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and reduce.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and list comprehension.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex and dictionary.\n\"\"\"\ndef fill_spaces(text):\n\timport re\n\treturn re.sub(r'[ ,.]', lambda x: ':', text)\n"}
{"ID": 907, "source": "MBPP:544", "prompt": "\"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to flatten the tuple list to a string.\n\"\"\"\ndef flatten_tuple(test_list):\n\treturn ''.join(str(i) for i in test_list)\n\n\nif __name__ == '__main__':\n\tprint(flatten_tuple((1,2,3,4,5)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10))))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16,17)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16,17,18)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16,17,18,19)))\n\tprint(flatten", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(flatten_tuple((1,2,3,4,5)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10))))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16,17)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16,17,18)))\n\tprint(flatten_tuple((1,2,(3,4,5),6,7,(8,9,10),11,12,13,14,15,16,17,18,19)))\n\tprint(flatten"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\tif len(seq_nums) < 2:\n\t\treturn False\n\telse:\n\t\tfor i in range(len(seq_nums)-1):\n\t\t\tif seq_nums[i] + 1 == seq_nums[i+1]:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\treturn False\n\t\treturn True\n\nprint(Seq_Linear([1,2,3,4,5]))\nprint(Seq_Linear([1,2,4,5]))\nprint(Seq_Linear([1,2,3,5]))\nprint(Seq_Linear([1,2,3,4]))\nprint(Seq_Linear([1,2,3,4,5,6]))\nprint(Seq_Linear([1,2,3,4,5,6,7]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(Seq_Linear([1,2,3,4,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(Seq_Linear([1,2,3,4,5]))\nprint(Seq_Linear([1,2,4,5]))\nprint(Seq_Linear([1,2,3,5]))\nprint(Seq_Linear([1,2,3,4]))\nprint(Seq_Linear([1,2,3,4,5,6]))\nprint(Seq_Linear([1,2,3,4,5,6,7]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(Seq_Linear([1,2,3,4,"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t# code here\n\treturn float(\"\".join(map(str, test_tup)))\n\n\n\"\"\"\nWrite a function to convert the given string to a tuple.\n\"\"\"\ndef string_to_tuple(my_string):\n\t# code here\n\treturn tuple(my_string)\n\n\n\"\"\"\nWrite a function to convert the given tuple to a list.\n\"\"\"\ndef tuple_to_list(test_tup):\n\t# code here\n\treturn list(test_tup)\n\n\n\"\"\"\nWrite a function to convert the given list to a tuple.\n\"\"\"\ndef list_to_tuple(test_list):\n\t# code here\n\treturn tuple(test_list)\n\n\n\"\"\"\nWrite a function to convert the given dictionary to a list.\n\"\"\"\ndef dict_to_list(test_dict):\n\t# code here\n\treturn list(test_dict.values())\n\n\n\"\"\"\nWrite a function to convert the given list to a dictionary.\n\"\"\"\ndef list_to_dict(test_list):\n\t# code here\n\treturn {i:test_list[i] for i in range(len(test_list))}\n\n\n\"\"\"\nWrite a function to convert the given dictionary to a tuple.\n\"\"\"\ndef dict_to_tuple(test_dict):\n\t# code here\n\treturn tuple(test_dict.values())\n\n\n\"\"\"\nWrite a function to convert the given tuple to a dictionary.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t# code here\n\treturn {i:test_tup[i] for i in range(len(test_tup))}\n\n\n\"\"\"\nWrite a function to convert the given set to a list.\n\"\"\"\ndef set_to_list(test_set):\n\t# code here\n\treturn list(test_set)\n\n\n\"\"\"\nWrite a function to convert the given list to a set.\n\"\"\"\ndef list_to_set(test_list):\n\t# code here\n\treturn set(test_list)\n\n\n\"\"\"\nWrite a function to convert the given dictionary to a set.\n\"\"\"\ndef dict_to_set(test", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t# code here\n\treturn float(\"\".join(map(str, test_tup)))\n\n\n\"\"\"\nWrite a function to convert the given string to a tuple.\n\"\"\"\ndef string_to_tuple(my_string):\n\t# code here\n\treturn tuple(my_string)\n\n\n\"\"\"\nWrite a function to convert the given tuple to a list.\n\"\"\"\ndef tuple_to_list(test_tup):\n\t# code here\n\treturn list(test_tup)\n\n\n\"\"\"\nWrite a function to convert the given list to a tuple.\n\"\"\"\ndef list_to_tuple(test_list):\n\t# code here\n\treturn tuple(test_list)\n\n\n\"\"\"\nWrite a function to convert the given dictionary to a list.\n\"\"\"\ndef dict_to_list(test_dict):\n\t# code here\n\treturn list(test_dict.values())\n\n\n\"\"\"\nWrite a function to convert the given list to a dictionary.\n\"\"\"\ndef list_to_dict(test_list):\n\t# code here\n\treturn {i:test_list[i] for i in range(len(test_list))}\n\n\n\"\"\"\nWrite a function to convert the given dictionary to a tuple.\n\"\"\"\ndef dict_to_tuple(test_dict):\n\t# code here\n\treturn tuple(test_dict.values())\n\n\n\"\"\"\nWrite a function to convert the given tuple to a dictionary.\n\"\"\"\ndef tuple_to_dict(test_tup):\n\t# code here\n\treturn {i:test_tup[i] for i in range(len(test_tup))}\n\n\n\"\"\"\nWrite a function to convert the given set to a list.\n\"\"\"\ndef set_to_list(test_set):\n\t# code here\n\treturn list(test_set)\n\n\n\"\"\"\nWrite a function to convert the given list to a set.\n\"\"\"\ndef list_to_set(test_list):\n\t# code here\n\treturn set(test_list)\n\n\n\"\"\"\nWrite a function to convert the given dictionary to a set.\n\"\"\"\ndef dict_to_set(test"}
{"ID": 920, "source": "MBPP:557", "prompt": "\"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to toggle characters case in a string.\n\"\"\"\ndef toggle_string(string):\n\treturn ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check if a string is a isogram.\n\"\"\"\ndef is_isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\ndef is_palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check if a string is a pangram.\n\"\"\"\ndef is_pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check if a string is a isogram.\n\"\"\"\ndef is_isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a string is a anagram.\n\"\"\"\ndef is_anagram(string1, string2):"}
{"ID": 925, "source": "MBPP:562", "prompt": "\"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum length of sublist.\n\"\"\"\ndef Find_Max_Length(lst):  \n\tmax_length = 0\n\tfor i in range(len(lst)):\n\t\tif len(lst[i]) > max_length:\n\t\t\tmax_length = len(lst[i])\n\treturn max_length\n\nprint(Find_Max_Length([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(Find_Max_Length([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\treturn sum(int(i) for i in str(n))\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes an integer as input, and returns the\nnumber of bits that are equal to one in the binary representation of that number.\n\nYou can guarantee that input is non-negative.\n\nExample: The binary representation of 1234 is 10011010010, so the function should return 5 in this case\n\"\"\"\ndef count_bits(n):\n\treturn bin(n).count('1')\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def count_bits(n):\n\treturn bin(n).count('1')\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\treturn all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n\n#test\nlist1 = [1,2,3,4,5]\nprint(issort_list(list1))\n\nlist2 = [1,3,2,4,5]\nprint(issort_list(list2))\n\nlist3 = [1,2,3,4,5,6]\nprint(issort_list(list3))\n\nlist4 = [1,2,3,4,5,6,7]\nprint(issort_list(list4))\n\nlist5 = [1,2,3,4,5,6,7,8]\nprint(issort_list(list5))\n\nlist6 = [1,2,3,4,5,6,7,8,9]\nprint(issort_list(list6))\n\nlist7 = [1,2,3,4,5,6,7,8,9,10]\nprint(issort_list(list7))\n\nlist8 = [1,2,3,4,5,6,7,8,9,10,11]\nprint(issort_list(list8))\n\nlist9 = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(issort_list(list9))\n\nlist10 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nprint(issort_list(list10))\n\nlist11 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nprint(issort_list(list11))\n\nlist12 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nprint(issort_list(list12))\n\nlist13 = [1,2,3,4,5,6,7", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "#test\nlist1 = [1,2,3,4,5]\nprint(issort_list(list1))\n\nlist2 = [1,3,2,4,5]\nprint(issort_list(list2))\n\nlist3 = [1,2,3,4,5,6]\nprint(issort_list(list3))\n\nlist4 = [1,2,3,4,5,6,7]\nprint(issort_list(list4))\n\nlist5 = [1,2,3,4,5,6,7,8]\nprint(issort_list(list5))\n\nlist6 = [1,2,3,4,5,6,7,8,9]\nprint(issort_list(list6))\n\nlist7 = [1,2,3,4,5,6,7,8,9,10]\nprint(issort_list(list7))\n\nlist8 = [1,2,3,4,5,6,7,8,9,10,11]\nprint(issort_list(list8))\n\nlist9 = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(issort_list(list9))\n\nlist10 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nprint(issort_list(list10))\n\nlist11 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nprint(issort_list(list11))\n\nlist12 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nprint(issort_list(list12))"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\treturn [[sorted(sublist) for sublist in list1]]\n\n\"\"\"\nWrite a function to sort a list of strings in ascending order.\n\"\"\"\ndef sort_strings(list1):\n\treturn sorted(list1)\n\n\"\"\"\nWrite a function to sort a list of integers in descending order.\n\"\"\"\ndef sort_integers(list1):\n\treturn sorted(list1, reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple.\n\"\"\"\ndef sort_tuples(list1):\n\treturn sorted(list1, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples by the first element of the tuple.\n\"\"\"\ndef sort_tuples_first(list1):\n\treturn sorted(list1, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple in descending order.\n\"\"\"\ndef sort_tuples_second(list1):\n\treturn sorted(list1, key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples by the first element of the tuple in descending order.\n\"\"\"\ndef sort_tuples_first_descending(list1):\n\treturn sorted(list1, key=lambda x: x[0], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple in ascending order.\n\"\"\"\ndef sort_tuples_second_ascending(list1):\n\treturn sorted(list1, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples by the first element of the tuple in ascending order.\n\"\"\"\ndef sort_tuples_first_ascending(list1):\n\treturn sorted(list1, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple in descending order.\n\"\"\"\ndef sort_tuples_second_descending(list1):\n\treturn sorted(list1, key", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple.\n\"\"\"\ndef sort_tuples(list1):\n\treturn sorted(list1, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples by the first element of the tuple.\n\"\"\"\ndef sort_tuples_first(list1):\n\treturn sorted(list1, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple in descending order.\n\"\"\"\ndef sort_tuples_second(list1):\n\treturn sorted(list1, key=lambda x: x[1], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples by the first element of the tuple in descending order.\n\"\"\"\ndef sort_tuples_first_descending(list1):\n\treturn sorted(list1, key=lambda x: x[0], reverse=True)\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple in ascending order.\n\"\"\"\ndef sort_tuples_second_ascending(list1):\n\treturn sorted(list1, key=lambda x: x[1])\n\n\"\"\"\nWrite a function to sort a list of tuples by the first element of the tuple in ascending order.\n\"\"\"\ndef sort_tuples_first_ascending(list1):\n\treturn sorted(list1, key=lambda x: x[0])\n\n\"\"\"\nWrite a function to sort a list of tuples by the second element of the tuple in descending order.\n\"\"\"\ndef sort_tuples_second_descending(list1):"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*h+2*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r*h+3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n\treturn 2*(l*b+b*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6*s**2\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_rectangularprism(l,b,h):\n\treturn 2*(l*b+b*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*3.14*r*h+2*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r*h+3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n\treturn 2*(l*b+b*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,b,h):\n\treturn l*b*h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6*s**2\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_rectangularprism(l,b,h):\n\treturn 2*(l*b+b*h+h*l)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_"}
{"ID": 944, "source": "MBPP:581", "prompt": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the surface area of the square pyramid.\n\"\"\"\ndef surface_Area(b,s): \n\treturn (b*s) + (s*s)\n\nprint(surface_Area(2,3))\n\n\"\"\"\nWrite a python function to find the volume of the square pyramid.\n\"\"\"\ndef volume(b,s): \n\treturn (b*s)/3\n\nprint(volume(2,3))\n\n\"\"\"\nWrite a python function to find the area of the circle.\n\"\"\"\nimport math\ndef area(r): \n\treturn math.pi * r * r\n\nprint(area(2))\n\n\"\"\"\nWrite a python function to find the circumference of the circle.\n\"\"\"\nimport math\ndef circumference(r): \n\treturn 2 * math.pi * r\n\nprint(circumference(2))\n\n\"\"\"\nWrite a python function to find the diameter of the circle.\n\"\"\"\ndef diameter(r): \n\treturn 2 * r\n\nprint(diameter(2))\n\n\"\"\"\nWrite a python function to find the area of the rectangle.\n\"\"\"\ndef area(l,b): \n\treturn l * b\n\nprint(area(2,3))\n\n\"\"\"\nWrite a python function to find the perimeter of the rectangle.\n\"\"\"\ndef perimeter(l,b): \n\treturn 2 * (l + b)\n\nprint(perimeter(2,3))\n\n\"\"\"\nWrite a python function to find the area of the triangle.\n\"\"\"\ndef area(b,h): \n\treturn (b * h) / 2\n\nprint(area(2,3))\n\n\"\"\"\nWrite a python function to find the perimeter of the triangle.\n\"\"\"\ndef perimeter(a,b,c): \n\treturn a + b + c\n\nprint(perimeter(2,3,4))\n\n\"\"\"\nWrite a python function to find the area of the trapezoid.\n\"\"\"\ndef area(a,b,h): \n\treturn ((a + b) * h) / 2\n\nprint(area(2,3,4))\n\n\"\"\"\nWrite a python function to find the perimeter of the trapezoid.\n\"\"\"\ndef perimeter(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (b*s) + (s*s)\n\nprint(surface_Area(2,3))\n\n\"\"\"\nWrite a python function to find the volume of the square pyramid.\n\"\"\"\ndef volume(b,s): \n\treturn (b*s)/3\n\nprint(volume(2,3))\n\n\"\"\"\nWrite a python function to find the area of the circle.\n\"\"\"\nimport math\ndef area(r): \n\treturn math.pi * r * r\n\nprint(area(2))\n\n\"\"\"\nWrite a python function to find the circumference of the circle.\n\"\"\"\nimport math\ndef circumference(r): \n\treturn 2 * math.pi * r\n\nprint(circumference(2))\n\n\"\"\"\nWrite a python function to find the diameter of the circle.\n\"\"\"\ndef diameter(r): \n\treturn 2 * r\n\nprint(diameter(2))\n\n\"\"\"\nWrite a python function to find the area of the rectangle.\n\"\"\"\ndef area(l,b): \n\treturn l * b\n\nprint(area(2,3))\n\n\"\"\"\nWrite a python function to find the perimeter of the rectangle.\n\"\"\"\ndef perimeter(l,b): \n\treturn 2 * (l + b)\n\nprint(perimeter(2,3))\n\n\"\"\"\nWrite a python function to find the area of the triangle.\n\"\"\"\ndef area(b,h): \n\treturn (b * h) / 2\n\nprint(area(2,3))\n\n\"\"\"\nWrite a python function to find the perimeter of the triangle.\n\"\"\"\ndef perimeter(a,b,c): \n\treturn a + b + c\n\nprint(perimeter(2,3,4))\n\n\"\"\"\nWrite a python function to find the area of the trapezoid.\n\"\"\"\ndef area(a,b,h): \n\treturn ((a + b) * h) / 2\n\nprint(area(2,3,4))\n\n\"\"\"\nWrite a python function to find the perimeter of the trapezoid."}
{"ID": 948, "source": "MBPP:585", "prompt": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\ndef expensive_items(items,n):\n\tif n > len(items):\n\t\treturn None\n\theap = []\n\tfor item in items:\n\t\tif len(heap) < n:\n\t\t\theapq.heappush(heap,item)\n\t\telse:\n\t\t\theapq.heappushpop(heap,item)\n\treturn heap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\treturn tuple(listx)\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\ndef palindrome(string):\n\treturn string == string[::-1]\n\n\"\"\"\nWrite a function to check if a given string is a pangram.\n\"\"\"\ndef pangram(string):\n\treturn len(set(string.lower())) == 26\n\n\"\"\"\nWrite a function to check if a given string is a isogram.\n\"\"\"\ndef isogram(string):\n\treturn len(string) == len(set(string.lower()))\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram(string1, string2):\n\treturn sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram_2(string1, string2):\n\treturn len(string1) == len(string2) and sorted(string1.lower()) == sorted(string2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram_3(string1, string2):\n\treturn len(string1) == len(string2) and set(string1.lower()) == set(string2.lower())\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram_4(string1, string2):\n\treturn len(string1) == len(string2) and len(string1) == len(set(string1.lower())) == len(set(string2.lower()))\n\n\"\"\"\nWrite a function to check if a given string is a anagram.\n\"\"\"\ndef anagram_5(string1, string2):\n\treturn len(string1) == len(string2) and len(string1) == len(set(string1.lower())) == len(set(string2.lower())) and sorted(string1.", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\treturn len(string1) == len(string2) and len(string1) == len(set(string1.lower())) == len(set(string2.lower())) and sorted(string1."}
{"ID": 956, "source": "MBPP:593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\"\"\"\ndef removezero_ip(ip):\n\tip = ip.split('.')\n\tnewip = []\n\tfor i in ip:\n\t\tif i != '0':\n\t\t\tnewip.append(i)\n\t\telif i == '0' and len(newip) == 0:\n\t\t\tnewip.append(i)\n\twhile len(newip) != 4:\n\t\tnewip.append('0')\n\treturn '.'.join(newip)\n\nprint(removezero_ip('0.0.0.0'))\nprint(removezero_ip('0.0.0.1'))\nprint(removezero_ip('192.168.0.1'))\nprint(removezero_ip('192.168.0.0'))\nprint(removezero_ip('0.0.0.10'))\nprint(removezero_ip('0.0.0.00'))\nprint(removezero_ip('0.0.0.01'))\nprint(removezero_ip('0.0.0.100'))\nprint(removezero_ip('0.0.0.101'))\nprint(removezero_ip('0.0.0.1000'))\nprint(removezero_ip('0.0.0.1001'))\nprint(removezero_ip('0.0.0.10000'))\nprint(removezero_ip('0.0.0.10001'))\nprint(removezero_ip('0.0.0.100000'))\nprint(removezero_ip('0.0.0.100001'))\nprint(removezero_ip('0.0.0.1000000'))\nprint(removezero_ip('0.0.0.1000001'))\nprint(removezero_ip('0.0.0.10000000'))\nprint(removezero_ip('0.0.0.10000001'))\nprint(removezero_ip('0.0.0.100000000'))\nprint(removezero_ip('0.0.0.10", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(removezero_ip('0.0.0.0'))\nprint(removezero_ip('0.0.0.1'))\nprint(removezero_ip('192.168.0.1'))\nprint(removezero_ip('192.168.0.0'))\nprint(removezero_ip('0.0.0.10'))\nprint(removezero_ip('0.0.0.00'))\nprint(removezero_ip('0.0.0.01'))\nprint(removezero_ip('0.0.0.100'))\nprint(removezero_ip('0.0.0.101'))\nprint(removezero_ip('0.0.0.1000'))\nprint(removezero_ip('0.0.0.1001'))\nprint(removezero_ip('0.0.0.10000'))\nprint(removezero_ip('0.0.0.10001'))\nprint(removezero_ip('0.0.0.100000'))\nprint(removezero_ip('0.0.0.100001'))\nprint(removezero_ip('0.0.0.1000000'))\nprint(removezero_ip('0.0.0.1000001'))\nprint(removezero_ip('0.0.0.10000000'))\nprint(removezero_ip('0.0.0.10000001'))\nprint(removezero_ip('0.0.0.100000000'))\nprint(removezero_ip('0.0.0.10"}
{"ID": 966, "source": "MBPP:3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"\ndef is_not_prime(n):\n\tif n <= 1:\n\t\treturn True\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn True\n\treturn False\n\nprint(is_not_prime(10))\nprint(is_not_prime(11))\nprint(is_not_prime(12))\nprint(is_not_prime(13))\nprint(is_not_prime(14))\nprint(is_not_prime(15))\nprint(is_not_prime(16))\nprint(is_not_prime(17))\nprint(is_not_prime(18))\nprint(is_not_prime(19))\nprint(is_not_prime(20))\nprint(is_not_prime(21))\nprint(is_not_prime(22))\nprint(is_not_prime(23))\nprint(is_not_prime(24))\nprint(is_not_prime(25))\nprint(is_not_prime(26))\nprint(is_not_prime(27))\nprint(is_not_prime(28))\nprint(is_not_prime(29))\nprint(is_not_prime(30))\nprint(is_not_prime(31))\nprint(is_not_prime(32))\nprint(is_not_prime(33))\nprint(is_not_prime(34))\nprint(is_not_prime(35))\nprint(is_not_prime(36))\nprint(is_not_prime(37))\nprint(is_not_prime(38))\nprint(is_not_prime(39))\nprint(is_not_prime(40))\nprint(is_not_prime(41))\nprint(is_not_prime(42))\nprint(is_not_prime(43))\nprint(is_not_prime(44))\nprint(is_not_prime(45))\nprint(is_not_prime(46))\nprint(is_not_prime(47))\nprint(is_not_prime(48))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_not_prime(10))\nprint(is_not_prime(11))\nprint(is_not_prime(12))\nprint(is_not_prime(13))\nprint(is_not_prime(14))\nprint(is_not_prime(15))\nprint(is_not_prime(16))\nprint(is_not_prime(17))\nprint(is_not_prime(18))\nprint(is_not_prime(19))\nprint(is_not_prime(20))\nprint(is_not_prime(21))\nprint(is_not_prime(22))\nprint(is_not_prime(23))\nprint(is_not_prime(24))\nprint(is_not_prime(25))\nprint(is_not_prime(26))\nprint(is_not_prime(27))\nprint(is_not_prime(28))\nprint(is_not_prime(29))\nprint(is_not_prime(30))\nprint(is_not_prime(31))\nprint(is_not_prime(32))\nprint(is_not_prime(33))\nprint(is_not_prime(34))\nprint(is_not_prime(35))\nprint(is_not_prime(36))\nprint(is_not_prime(37))\nprint(is_not_prime(38))\nprint(is_not_prime(39))\nprint(is_not_prime(40))\nprint(is_not_prime(41))\nprint(is_not_prime(42))\nprint(is_not_prime(43))\nprint(is_not_prime(44))\nprint(is_not_prime(45))\nprint(is_not_prime(46))\nprint(is_not_prime(47))\nprint(is_not_prime(48))"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\treturn bin(a^b).count('1') == 1\n\nprint(differ_At_One_Bit_Pos(10, 12))\nprint(differ_At_One_Bit_Pos(10, 11))\nprint(differ_At_One_Bit_Pos(10, 13))\nprint(differ_At_One_Bit_Pos(10, 14))\nprint(differ_At_One_Bit_Pos(10, 15))\nprint(differ_At_One_Bit_Pos(10, 16))\nprint(differ_At_One_Bit_Pos(10, 17))\nprint(differ_At_One_Bit_Pos(10, 18))\nprint(differ_At_One_Bit_Pos(10, 19))\nprint(differ_At_One_Bit_Pos(10, 20))\nprint(differ_At_One_Bit_Pos(10, 21))\nprint(differ_At_One_Bit_Pos(10, 22))\nprint(differ_At_One_Bit_Pos(10, 23))\nprint(differ_At_One_Bit_Pos(10, 24))\nprint(differ_At_One_Bit_Pos(10, 25))\nprint(differ_At_One_Bit_Pos(10, 26))\nprint(differ_At_One_Bit_Pos(10, 27))\nprint(differ_At_One_Bit_Pos(10, 28))\nprint(differ_At_One_Bit_Pos(10, 29))\nprint(differ_At_One_Bit_Pos(10, 30))\nprint(differ_At_One_Bit_Pos(10, 31))\nprint(differ_At_One_Bit_Pos(10, 32))\nprint(differ_At_One_Bit_Pos(10, 33))\nprint(differ_At_One_Bit_Pos(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(differ_At_One_Bit_Pos(10, 12))\nprint(differ_At_One_Bit_Pos(10, 11))\nprint(differ_At_One_Bit_Pos(10, 13))\nprint(differ_At_One_Bit_Pos(10, 14))\nprint(differ_At_One_Bit_Pos(10, 15))\nprint(differ_At_One_Bit_Pos(10, 16))\nprint(differ_At_One_Bit_Pos(10, 17))\nprint(differ_At_One_Bit_Pos(10, 18))\nprint(differ_At_One_Bit_Pos(10, 19))\nprint(differ_At_One_Bit_Pos(10, 20))\nprint(differ_At_One_Bit_Pos(10, 21))\nprint(differ_At_One_Bit_Pos(10, 22))\nprint(differ_At_One_Bit_Pos(10, 23))\nprint(differ_At_One_Bit_Pos(10, 24))\nprint(differ_At_One_Bit_Pos(10, 25))\nprint(differ_At_One_Bit_Pos(10, 26))\nprint(differ_At_One_Bit_Pos(10, 27))\nprint(differ_At_One_Bit_Pos(10, 28))\nprint(differ_At_One_Bit_Pos(10, 29))\nprint(differ_At_One_Bit_Pos(10, 30))\nprint(differ_At_One_Bit_Pos(10, 31))\nprint(differ_At_One_Bit_Pos(10, 32))\nprint(differ_At_One_Bit_Pos(10, 33))\nprint(differ_At_One_Bit_Pos("}
