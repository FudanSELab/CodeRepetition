{"ID": 4, "source": "MBPP:605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, num):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_2(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_3(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_4(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_5(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_6(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_7(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_8(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif num < 2:\n\t\treturn False\n\tfor i in range(2, num):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_2(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_3(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_4(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_5(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_6(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_7(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\n\ndef prime_num_8(num):\n\tif num < 2:"}
{"ID": 5, "source": "MBPP:606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"\ndef radian_degree(degree):\n\treturn degree * 3.14 / 180\n\nprint(radian_degree(90))\n\n\"\"\"\nWrite a function to convert radians to degrees.\n\"\"\"\ndef radian_degree(radian):\n\treturn radian * 180 / 3.14\n\nprint(radian_degree(90))\n\n\"\"\"\nWrite a function to convert miles to kilometers.\n\"\"\"\ndef miles_to_kilometers(miles):\n\treturn miles * 1.60934\n\nprint(miles_to_kilometers(100))\n\n\"\"\"\nWrite a function to convert kilometers to miles.\n\"\"\"\ndef kilometers_to_miles(kilometers):\n\treturn kilometers * 0.621371\n\nprint(kilometers_to_miles(100))\n\n\"\"\"\nWrite a function to convert pounds to kilograms.\n\"\"\"\ndef pounds_to_kilograms(pounds):\n\treturn pounds * 0.453592\n\nprint(pounds_to_kilograms(100))\n\n\"\"\"\nWrite a function to convert kilograms to pounds.\n\"\"\"\ndef kilograms_to_pounds(kilograms):\n\treturn kilograms * 2.20462\n\nprint(kilograms_to_pounds(100))\n\n\"\"\"\nWrite a function to convert ounces to grams.\n\"\"\"\ndef ounces_to_grams(ounces):\n\treturn ounces * 28.3495\n\nprint(ounces_to_grams(100))\n\n\"\"\"\nWrite a function to convert grams to ounces.\n\"\"\"\ndef grams_to_ounces(grams):\n\treturn grams * 0.035274\n\nprint(grams_to_ounces(100))\n\n\"\"\"\nWrite a function to convert feet to meters.\n\"\"\"\ndef feet_to_meters(feet):\n\treturn feet * 0.3048\n\nprint(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(miles_to_kilometers(100))\n\n\"\"\"\nWrite a function to convert kilometers to miles.\n\"\"\"\ndef kilometers_to_miles(kilometers):\n\treturn kilometers * 0.621371\n\nprint(kilometers_to_miles(100))\n\n\"\"\"\nWrite a function to convert pounds to kilograms.\n\"\"\"\ndef pounds_to_kilograms(pounds):\n\treturn pounds * 0.453592\n\nprint(pounds_to_kilograms(100))\n\n\"\"\"\nWrite a function to convert kilograms to pounds.\n\"\"\"\ndef kilograms_to_pounds(kilograms):\n\treturn kilograms * 2.20462\n\nprint(kilograms_to_pounds(100))\n\n\"\"\"\nWrite a function to convert ounces to grams.\n\"\"\"\ndef ounces_to_grams(ounces):\n\treturn ounces * 28.3495\n\nprint(ounces_to_grams(100))\n\n\"\"\"\nWrite a function to convert grams to ounces.\n\"\"\"\ndef grams_to_ounces(grams):\n\treturn grams * 0.035274\n\nprint(grams_to_ounces(100))\n\n\"\"\"\nWrite a function to convert feet to meters.\n\"\"\"\ndef feet_to_meters(feet):\n\treturn feet * 0.3048"}
{"ID": 6, "source": "MBPP:607", "prompt": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t", "predict": "<s> \"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\ndef find_literals(text, pattern):\n\t\"\"\"\n\t:param text: string to search\n\t:param pattern: pattern to search\n\t:return: list of tuples containing the location of the pattern in the text\n\t\"\"\"\n\timport re\n\treturn [(m.start(), m.end()) for m in re.finditer(pattern, text)]\n\n\ndef test_function(test_case):\n\ttext, pattern = test_case[0], test_case[1]\n\toutput = find_literals(text, pattern)\n\tif sorted(output) == sorted(test_case[2]):\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\n\ntest_function([[\"hello world\", \"world\", [(6, 11)]]])\ntest_function([[\"hello world\", \"wor\", [(6, 8)]]])\ntest_function([[\"hello world\", \"ld\", [(9, 11)]]])\ntest_function([[\"hello world\", \"d\", [(9, 10)]]])\ntest_function([[\"hello world\", \"he\", [(0, 2)]]])\ntest_function([[\"hello world\", \"hel\", [(0, 3)]]])\ntest_function([[\"hello world\", \"llo\", [(2, 5)]]])\ntest_function([[\"hello world\", \"o\", [(4, 5)]]])\ntest_function([[\"hello world\", \"ll\", [(2, 4)]]])\ntest_function([[\"hello world\", \"l\", [(2, 3)]]])\ntest_function([[\"hello world\", \"h\", [(0, 1)]]])\ntest_function([[\"hello world\", \"w\", [(6, 7)]]])\ntest_function([[\"hello world\", \"e\", [(1, 2)]]])\ntest_function([[\"hello world\", \"H\", []]])\ntest_function([[\"hello world\", \"W\", []]])\ntest_function([[\"hello world\", \"E\", []]])\ntest_function([[\"hello world\", \"L\", []]])\ntest_function([[\"hello world\", \"O\", []]])\ntest_function([[\"hello world\", \"D\", []]])\ntest_function([[\"hello world\", \"R\", []]])\ntest_function([[\"hello world\", \"T\", []", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_function([[\"hello world\", \"world\", [(6, 11)]]])\ntest_function([[\"hello world\", \"wor\", [(6, 8)]]])\ntest_function([[\"hello world\", \"ld\", [(9, 11)]]])\ntest_function([[\"hello world\", \"d\", [(9, 10)]]])\ntest_function([[\"hello world\", \"he\", [(0, 2)]]])\ntest_function([[\"hello world\", \"hel\", [(0, 3)]]])\ntest_function([[\"hello world\", \"llo\", [(2, 5)]]])\ntest_function([[\"hello world\", \"o\", [(4, 5)]]])\ntest_function([[\"hello world\", \"ll\", [(2, 4)]]])\ntest_function([[\"hello world\", \"l\", [(2, 3)]]])\ntest_function([[\"hello world\", \"h\", [(0, 1)]]])\ntest_function([[\"hello world\", \"w\", [(6, 7)]]])\ntest_function([[\"hello world\", \"e\", [(1, 2)]]])\ntest_function([[\"hello world\", \"H\", []]])\ntest_function([[\"hello world\", \"W\", []]])\ntest_function([[\"hello world\", \"E\", []]])\ntest_function([[\"hello world\", \"L\", []]])\ntest_function([[\"hello world\", \"O\", []]])\ntest_function([[\"hello world\", \"D\", []]])\ntest_function([[\"hello world\", \"R\", []]])\ntest_function([[\"hello world\", \"T\", []"}
{"ID": 11, "source": "MBPP:612", "prompt": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):  \n\tif len(lst) == 0:  \n\t\treturn []  \n\telse:  \n\t\treturn [lst[0][0]] + lst[1:-1] + [lst[-1][-1]]  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 22, "source": "MBPP:623", "prompt": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using list comprehension.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn [x**n for x in nums]\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using filter() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(filter(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using reduce() function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn reduce(lambda x,y: x**n,nums)\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using list comprehension.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn [x**n for x in nums]\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using filter() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(filter(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using reduce() function.\n\"\"\"\nfrom functools import reduce\ndef nth_nums(nums,n):\n\treturn reduce(lambda x,y: x**n,nums)\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map() function.\n\"\"\"\ndef nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\nprint(nth_nums([1,2,3,4,5],2))\n\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using map() function.\n\"\"\""}
{"ID": 26, "source": "MBPP:627", "prompt": "\"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing(array, start + 1, end) \n\ndef find_First_Missing_Optimized(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized(array, start + 1, end) \n\ndef find_First_Missing_Optimized_2(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_2(array, start + 1, end) \n\ndef find_First_Missing_Optimized_3(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_3(array, start + 1, end) \n\ndef find_First_Missing_Optimized_4(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_4(array, start + 1, end) \n\ndef find_First_Missing_Optimized_5(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_5(array, start + 1, end) \n\ndef find_First_Missing_Optimized_6(array,start,end): \n\tif start > end: \n\t\treturn 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing(array, start + 1, end) \n\ndef find_First_Missing_Optimized(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized(array, start + 1, end) \n\ndef find_First_Missing_Optimized_2(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_2(array, start + 1, end) \n\ndef find_First_Missing_Optimized_3(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_3(array, start + 1, end) \n\ndef find_First_Missing_Optimized_4(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_4(array, start + 1, end) \n\ndef find_First_Missing_Optimized_5(array,start,end): \n\tif start > end: \n\t\treturn 1\n\tif array[start] != start + 1: \n\t\treturn start + 1\n\treturn find_First_Missing_Optimized_5(array, start + 1, end) \n\ndef find_First_Missing_Optimized_6(array,start,end): "}
{"ID": 30, "source": "MBPP:631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\ndef replace_spaces(text):\n\treturn text.replace(\" \", \"_\").replace(\"_\", \" \")\n\n\ndef replace_spaces_regex(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_2(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_3(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_4(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_5(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_6(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_7(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_8(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_9(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_10(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_11(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_12(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_13(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_14(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_15(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_16(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_17(text):\n\treturn re.sub(r'\\s', '_', text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef replace_spaces_regex(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_2(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_3(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_4(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_5(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_6(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_7(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_8(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_9(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_10(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_11(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_12(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_13(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_14(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_15(text):\n\treturn re.sub(r'\\s', '_', text)\n\n\ndef replace_spaces_regex_16(text):\n\treturn re.sub(r'\\s', ' ', text)\n\n\ndef replace_spaces_regex_17(text):\n\treturn re.sub(r'\\s', '_', text"}
{"ID": 34, "source": "MBPP:635", "prompt": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t", "predict": "<s> \"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\ndef heap_sort(iterable):\n\t\"\"\"\n\t:param iterable:\n\t:return:\n\t\"\"\"\n\timport heapq\n\theap = []\n\tfor i in iterable:\n\t\theapq.heappush(heap, i)\n\treturn [heapq.heappop(heap) for i in range(len(heap))]\n\n\ndef test_heap_sort():\n\tassert heap_sort([]) == []\n\tassert heap_sort([1]) == [1]\n\tassert heap_sort([1, 2, 3]) == [1, 2, 3]\n\tassert heap_sort([3, 2, 1]) == [1, 2, 3]\n\tassert heap_sort([1, 3, 2]) == [1, 2, 3]\n\tassert heap_sort([2, 1, 3]) == [1, 2, 3]\n\tassert heap_sort([2, 3, 1]) == [1, 2, 3]\n\tassert heap_sort([3, 1, 2]) == [1, 2, 3]\n\tassert heap_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([1, 6, 2, 5, 3, 4]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert heap_sort([7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert heap_sort([1, 7, 2, 6, 3, 5", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert heap_sort([]) == []\n\tassert heap_sort([1]) == [1]\n\tassert heap_sort([1, 2, 3]) == [1, 2, 3]\n\tassert heap_sort([3, 2, 1]) == [1, 2, 3]\n\tassert heap_sort([1, 3, 2]) == [1, 2, 3]\n\tassert heap_sort([2, 1, 3]) == [1, 2, 3]\n\tassert heap_sort([2, 3, 1]) == [1, 2, 3]\n\tassert heap_sort([3, 1, 2]) == [1, 2, 3]\n\tassert heap_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([1, 6, 2, 5, 3, 4]) == [1, 2, 3, 4, 5, 6]\n\tassert heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert heap_sort([7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7]\n\tassert heap_sort([1, 7, 2, 6, 3, 5"}
{"ID": 36, "source": "MBPP:637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \n\tif actual_cost == sale_amount:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 38, "source": "MBPP:639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\t", "predict": "<s> \"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n\tsum = 0\n\tfor name in sample_names:\n\t\tif name[0].isupper():\n\t\t\tsum += len(name)\n\treturn sum\n\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\", \"Lisa\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\", \"Lisa\", \"Mike\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\", \"Lisa\", \"Mike\", \"Nick\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\", \"Lisa\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\", \"Lisa\", \"Mike\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred\", \"Grace\", \"Helen\", \"Ian\", \"Judy\", \"Kate\", \"Lisa\", \"Mike\", \"Nick\"]))\nprint(sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Fred"}
{"ID": 40, "source": "MBPP:641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n): \n\treturn n == (n * (3 * n - 1) // 2)\n\ndef find_nonagonal(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal(n - 1) + n\n\ndef find_nonagonal_recursive(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_recursive(n - 1) + n\n\ndef find_nonagonal_iterative(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative(n - 1) + n\n\ndef find_nonagonal_iterative_2(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_2(n - 1) + n\n\ndef find_nonagonal_iterative_3(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_3(n - 1) + n\n\ndef find_nonagonal_iterative_4(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_4(n - 1) + n\n\ndef find_nonagonal_iterative_5(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_5(n - 1) + n\n\ndef find_nonagonal_iterative_6(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_6(n - 1) + n\n\ndef find_nonagonal_iterative_7(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_7(n - 1) + n\n\ndef find_nonagonal", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_recursive(n - 1) + n\n\ndef find_nonagonal_iterative(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative(n - 1) + n\n\ndef find_nonagonal_iterative_2(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_2(n - 1) + n\n\ndef find_nonagonal_iterative_3(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_3(n - 1) + n\n\ndef find_nonagonal_iterative_4(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_4(n - 1) + n\n\ndef find_nonagonal_iterative_5(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_5(n - 1) + n\n\ndef find_nonagonal_iterative_6(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_6(n - 1) + n\n\ndef find_nonagonal_iterative_7(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn find_nonagonal_iterative_7(n - 1) + n\n\ndef find_nonagonal"}
{"ID": 41, "source": "MBPP:642", "prompt": "\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(test_list):\n\t\"\"\"\n\t:param test_list: list of tuples\n\t:return: list of tuples\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(test_list)):\n\t\tif test_list[i] not in result:\n\t\t\tresult.append(test_list[i])\n\treturn result\n\n\nif __name__ == '__main__':\n\ttest_list = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ttest_list = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('"}
{"ID": 42, "source": "MBPP:643", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\ndef text_match_wordz_middle(text):\n\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1]\n\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word, and not followed by 'z'.\n\"\"\"\ndef text_match_wordz_middle_not_followed_by_z(text):\n\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1] and 'z' not in text[text.index('z')+1]\n\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word, and not followed by 'z', and not preceded by 'z'.\n\"\"\"\ndef text_match_wordz_middle_not_followed_by_z_not_preceded_by_z(text):\n\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1] and 'z' not in text[text.index('z')+1] and 'z' not in text[:text.index('z')]\n\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word, and not followed by 'z', and not preceded by 'z', and not preceded by 'q'.\n\"\"\"\ndef text_match_wordz_middle_not_followed_by_z_not_preceded_by_z_not_preceded_by_q(text):\n\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1] and 'z' not in text[text.index('z')+1] and 'z' not in text[:text.index('z')] and 'q' not in text[:text.index('z')]\n\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word, and not followed by 'z', and not preceded by 'z', and not preceded by 'q', and not preceded by 'p'.\n\"\"\"\ndef text_match_wordz_middle_not_follow", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1] and 'z' not in text[text.index('z')+1]\n\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word, and not followed by 'z', and not preceded by 'z'.\n\"\"\"\ndef text_match_wordz_middle_not_followed_by_z_not_preceded_by_z(text):\n\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1] and 'z' not in text[text.index('z')+1] and 'z' not in text[:text.index('z')]\n\n\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word, and not followed by 'z', and not preceded by 'z', and not preceded by 'q'.\n\"\"\"\ndef text_match_wordz_middle_not_followed_by_z_not_preceded_by_z_not_preceded_by_q(text):\n\treturn 'z' in text and 'z' not in text[0] and 'z' not in text[-1] and 'z' not in text[text.index('z')+1] and 'z' not in text[:text.index('z')] and 'q' not in text[:text.index('z')]\n\n\n\"\"\""}
{"ID": 45, "source": "MBPP:646", "prompt": "\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n\treturn (N//K)**3\n\nprint(No_of_cubes(10,2))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c):\n\treturn max(a,b,c)\n\nprint(max_of_three(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef max_of_three(a,b,c):\n\treturn max(a,b,c)\n\nprint(max_of_three(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_cond(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_cond(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements."}
{"ID": 46, "source": "MBPP:647", "prompt": "\"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a string at uppercase letters.\n\"\"\"\ndef split_upperstring(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_2(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn re.split('[A-Z]', text)\n\n\ndef split_upperstring_3(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_4(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_5(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_6(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_2(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn re.split('[A-Z]', text)\n\n\ndef split_upperstring_3(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_4(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_5(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer('[A-Z]', text)], [m.start() for m in re.finditer('[A-Z]', text)]+[len(text)])]\n\n\ndef split_upperstring_6(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\""}
{"ID": 48, "source": "MBPP:649", "prompt": "\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\t", "predict": "<s> \"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\treturn sum(nums[m:n+1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 49, "source": "MBPP:650", "prompt": "\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n\tif n!=m:\n\t\treturn False\n\telse:\n\t\tfor i in range(n):\n\t\t\tif arr1[i]!=arr2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,6]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5,6]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "arr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,6]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5,6]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m))\n\narr1 = [1,2,3,"}
{"ID": 51, "source": "MBPP:652", "prompt": "\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(test_list):\n\treturn tuple(zip(*test_list))\n\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))\nprint(matrix_to_list(test_list))\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24))\nprint(matrix_to_list(test_list))"}
{"ID": 52, "source": "MBPP:653", "prompt": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\ndef grouping_dictionary(l):\n\treturn dict(l)\n\ndef grouping_dictionary_2(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_3(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_4(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_5(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_6(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_7(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_8(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_9(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_10(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_11(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_12(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_13(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_14(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_15(l):\n\treturn {k: [v for", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef grouping_dictionary_2(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_3(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_4(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_5(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_6(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_7(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_8(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_9(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_10(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_11(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_12(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_13(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_14(l):\n\treturn {k: [v for k, v in l if k == k] for k, v in l}\n\ndef grouping_dictionary_15(l):\n\treturn {k: [v for"}
{"ID": 53, "source": "MBPP:654", "prompt": "\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\nprint(rectangle_perimeter(10,5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(rectangle_perimeter(10,5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5*b*h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))"}
{"ID": 60, "source": "MBPP:661", "prompt": "\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \n\tmax_sum = 0\n\tfor i in range(n-2): \n\t\tcurrent_sum = arr[i] + arr[i+1] + arr[i+2] \n\t\tif current_sum > max_sum: \n\t\t\tmax_sum = current_sum \n\treturn max_sum \n\narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "arr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(\"Maximum sum is \", max_sum_of_three_consecutive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) "}
{"ID": 62, "source": "MBPP:663", "prompt": "\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\n\"\"\"\ndef find_max_val(n, x, y): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30\n\tif n == 3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 3\n\tif n == 4: \n\t\treturn 4\n\tif n == 5: \n\t\treturn 5\n\tif n == 6: \n\t\treturn 6\n\tif n == 7: \n\t\treturn 7\n\tif n == 8: \n\t\treturn 8\n\tif n == 9: \n\t\treturn 9\n\tif n == 10: \n\t\treturn 10\n\tif n == 11: \n\t\treturn 11\n\tif n == 12: \n\t\treturn 12\n\tif n == 13: \n\t\treturn 13\n\tif n == 14: \n\t\treturn 14\n\tif n == 15: \n\t\treturn 15\n\tif n == 16: \n\t\treturn 16\n\tif n == 17: \n\t\treturn 17\n\tif n == 18: \n\t\treturn 18\n\tif n == 19: \n\t\treturn 19\n\tif n == 20: \n\t\treturn 20\n\tif n == 21: \n\t\treturn 21\n\tif n == 22: \n\t\treturn 22\n\tif n == 23: \n\t\treturn 23\n\tif n == 24: \n\t\treturn 24\n\tif n == 25: \n\t\treturn 25\n\tif n == 26: \n\t\treturn 26\n\tif n == 27: \n\t\treturn 27\n\tif n == 28: \n\t\treturn 28\n\tif n == 29: \n\t\treturn 29\n\tif n == 30: \n\t\treturn 30"}
{"ID": 70, "source": "MBPP:671", "prompt": "\"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to set the right most unset bit.\n\"\"\"\ndef set_Right_most_Unset_Bit(n): \n\treturn n | (n+1) \n\n\n# Driver Code \nn = 10\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 15\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 16\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 17\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 18\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 19\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 20\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 21\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 22\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 23\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 24\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = 10\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 15\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 16\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 17\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 18\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 19\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 20\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 21\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 22\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 23\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most_Unset_Bit(n)) \n\nn = 24\nprint(\"The number is: \", n) \nprint(\"The number with right most unset bit is: \", set_Right_most"}
{"ID": 71, "source": "MBPP:672", "prompt": "\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3): \n\treturn max(num1,num2,num3)\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\""}
{"ID": 72, "source": "MBPP:673", "prompt": "\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list): \n\tresult = 0\n\tfor i in range(len(list)): \n\t\tresult += list[i] * (10 ** i) \n\treturn result \n\n# Driver Code \nlist1 = [1, 2, 3, 4] \nprint(\"Conversion of list\", list1, \"into a single integer is\", convert(list1)) \n\nlist2 = [1, 2, 3, 4, 5] \nprint(\"Conversion of list\", list2, \"into a single integer is\", convert(list2)) \n\nlist3 = [1, 2, 3, 4, 5, 6] \nprint(\"Conversion of list\", list3, \"into a single integer is\", convert(list3)) \n\nlist4 = [1, 2, 3, 4, 5, 6, 7] \nprint(\"Conversion of list\", list4, \"into a single integer is\", convert(list4)) \n\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(\"Conversion of list\", list5, \"into a single integer is\", convert(list5)) \n\nlist6 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Conversion of list\", list6, \"into a single integer is\", convert(list6)) \n\nlist7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(\"Conversion of list\", list7, \"into a single integer is\", convert(list7)) \n\nlist8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(\"Conversion of list\", list8, \"into a single integer is\", convert(list8)) \n\nlist9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nlist1 = [1, 2, 3, 4] \nprint(\"Conversion of list\", list1, \"into a single integer is\", convert(list1)) \n\nlist2 = [1, 2, 3, 4, 5] \nprint(\"Conversion of list\", list2, \"into a single integer is\", convert(list2)) \n\nlist3 = [1, 2, 3, 4, 5, 6] \nprint(\"Conversion of list\", list3, \"into a single integer is\", convert(list3)) \n\nlist4 = [1, 2, 3, 4, 5, 6, 7] \nprint(\"Conversion of list\", list4, \"into a single integer is\", convert(list4)) \n\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(\"Conversion of list\", list5, \"into a single integer is\", convert(list5)) \n\nlist6 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Conversion of list\", list6, \"into a single integer is\", convert(list6)) \n\nlist7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(\"Conversion of list\", list7, \"into a single integer is\", convert(list7)) \n\nlist8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(\"Conversion of list\", list8, \"into a single integer is\", convert(list8)) "}
{"ID": 74, "source": "MBPP:675", "prompt": "\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n\tif x+y >= m and x+y <= n:\n\t\treturn 20\n\telse:\n\t\treturn x+y\n\nprint(sum_nums(10,10,11,11))\nprint(sum_nums(10,10,10,10))\nprint(sum_nums(10,10,10,11))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(sum_nums(10,10,11,11))\nprint(sum_nums(10,10,10,10))\nprint(sum_nums(10,10,10,11))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))\nprint(sum_nums(10,10,11,12))"}
{"ID": 75, "source": "MBPP:676", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\ndef remove_extra_char(text1):\n\timport re\n\treturn re.sub(r'[^a-zA-Z0-9]', '', text1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 76, "source": "MBPP:677", "prompt": "\"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n\tif a+b>c and b+c>a and a+c>b:\n\t\treturn True\n\telse:\n\t\treturn False\n\nprint(validity_triangle(3,4,5))\nprint(validity_triangle(3,4,6))\nprint(validity_triangle(3,4,7))\nprint(validity_triangle(3,4,8))\nprint(validity_triangle(3,4,9))\nprint(validity_triangle(3,4,10))\nprint(validity_triangle(3,4,11))\nprint(validity_triangle(3,4,12))\nprint(validity_triangle(3,4,13))\nprint(validity_triangle(3,4,14))\nprint(validity_triangle(3,4,15))\nprint(validity_triangle(3,4,16))\nprint(validity_triangle(3,4,17))\nprint(validity_triangle(3,4,18))\nprint(validity_triangle(3,4,19))\nprint(validity_triangle(3,4,20))\nprint(validity_triangle(3,4,21))\nprint(validity_triangle(3,4,22))\nprint(validity_triangle(3,4,23))\nprint(validity_triangle(3,4,24))\nprint(validity_triangle(3,4,25))\nprint(validity_triangle(3,4,26))\nprint(validity_triangle(3,4,27))\nprint(validity_triangle(3,4,28))\nprint(validity_triangle(3,4,29))\nprint(validity_triangle(3,4,30))\nprint(validity_triangle(3,4,31))\nprint(validity_triangle(3,4,32))\nprint(validity_triangle(3,4,33))\nprint(validity_triangle(3,4,34))\nprint(validity_triangle(3,4,35))\nprint(validity_triangle(3,4,36))\nprint(", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(validity_triangle(3,4,5))\nprint(validity_triangle(3,4,6))\nprint(validity_triangle(3,4,7))\nprint(validity_triangle(3,4,8))\nprint(validity_triangle(3,4,9))\nprint(validity_triangle(3,4,10))\nprint(validity_triangle(3,4,11))\nprint(validity_triangle(3,4,12))\nprint(validity_triangle(3,4,13))\nprint(validity_triangle(3,4,14))\nprint(validity_triangle(3,4,15))\nprint(validity_triangle(3,4,16))\nprint(validity_triangle(3,4,17))\nprint(validity_triangle(3,4,18))\nprint(validity_triangle(3,4,19))\nprint(validity_triangle(3,4,20))\nprint(validity_triangle(3,4,21))\nprint(validity_triangle(3,4,22))\nprint(validity_triangle(3,4,23))\nprint(validity_triangle(3,4,24))\nprint(validity_triangle(3,4,25))\nprint(validity_triangle(3,4,26))\nprint(validity_triangle(3,4,27))\nprint(validity_triangle(3,4,28))\nprint(validity_triangle(3,4,29))\nprint(validity_triangle(3,4,30))\nprint(validity_triangle(3,4,31))\nprint(validity_triangle(3,4,32))\nprint(validity_triangle(3,4,33))\nprint(validity_triangle(3,4,34))\nprint(validity_triangle(3,4,35))\nprint(validity_triangle(3,4,36))\nprint("}
{"ID": 77, "source": "MBPP:678", "prompt": "\"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n\treturn str1.replace(\" \", \"\")\n\nprint(remove_spaces(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn str1.replace(\" \", \"\")\n\nprint(remove_spaces(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\"\nWrite a python function to remove duplicates from a given string.\n\"\"\"\ndef remove_duplicates(str1):\n\treturn \"\".join(set(str1))\n\nprint(remove_duplicates(\"Hello World\"))\n\n\"\"\""}
{"ID": 78, "source": "MBPP:679", "prompt": "\"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\t", "predict": "<s> \"\"\"\nWrite a function to access dictionary key’s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n\treturn ditionary[key]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 79, "source": "MBPP:680", "prompt": "\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n\tfor i in range(len(nums)-1):\n\t\tif nums[i] > nums[i+1]:\n\t\t\treturn False\n\treturn True\n\nprint(increasing_trend([1,2,3,4,5]))\nprint(increasing_trend([1,2,3,4,5,6]))\nprint(increasing_trend([1,2,3,4,5,6,7]))\nprint(increasing_trend([1,2,3,4,5,6,7,8]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(increasing_trend([1,2,3,4,5,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(increasing_trend([1,2,3,4,5]))\nprint(increasing_trend([1,2,3,4,5,6]))\nprint(increasing_trend([1,2,3,4,5,6,7]))\nprint(increasing_trend([1,2,3,4,5,6,7,8]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\nprint(increasing_trend([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\nprint(increasing_trend([1,2,3,4,5,"}
{"ID": 82, "source": "MBPP:683", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) : \n\tif n == 0 : \n\t\treturn True\n\tif n < 0 : \n\t\treturn False\n\tfor i in range(1, int(n**0.5) + 1) : \n\t\tif sum_Square(n - i**2) : \n\t\t\treturn True\n\treturn False\n\n# Driver Code\nn = 10\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 11\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 12\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 13\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 14\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 15\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 16\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 17\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 18\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 19\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 20\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 21\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 22\nif sum_Square(n) : \n\tprint(\"Yes\")", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn False\n\n# Driver Code\nn = 10\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 11\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 12\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 13\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 14\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 15\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 16\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 17\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 18\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 19\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 20\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 21\nif sum_Square(n) : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")\n\nn = 22\nif sum_Square(n) : \n\tprint(\"Yes\")"}
{"ID": 87, "source": "MBPP:688", "prompt": "\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number.\n\"\"\"\ndef len_complex(a,b):\n\treturn (a**2 + b**2)**0.5\n\nprint(len_complex(3,4))\n\n\"\"\"\nWrite a function to get the length of a complex number."}
{"ID": 88, "source": "MBPP:689", "prompt": "\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\t", "predict": "<s> \"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n\tif n == 0 or n == 1:\n\t\treturn n\n\t\n\tjumps = [0] * n\n\tjumps[0] = 0\n\tjumps[1] = 1\n\t\n\tfor i in range(2, n):\n\t\tjumps[i] = jumps[i-1] + 1\n\t\t\n\t\tfor j in range(0, i):\n\t\t\tif arr[j] >= i-j:\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\t\n\treturn jumps[n-1]\n\n\narr = [1, 3, 5, 3, 2, 4, 2]\nn = len(arr)\nprint(min_jumps(arr, n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 92, "source": "MBPP:693", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\n\"\"\"\ndef remove_multiple_spaces(text1):\n\treturn re.sub(r'\\s+', ' ', text1)\n\n\ndef remove_multiple_spaces(text2):\n\treturn re.sub(r'\\s+', ' ', text2)\n\n\ndef remove_multiple_spaces(text3):\n\treturn re.sub(r'\\s+', ' ', text3)\n\n\ndef remove_multiple_spaces(text4):\n\treturn re.sub(r'\\s+', ' ', text4)\n\n\ndef remove_multiple_spaces(text5):\n\treturn re.sub(r'\\s+', ' ', text5)\n\n\ndef remove_multiple_spaces(text6):\n\treturn re.sub(r'\\s+', ' ', text6)\n\n\ndef remove_multiple_spaces(text7):\n\treturn re.sub(r'\\s+', ' ', text7)\n\n\ndef remove_multiple_spaces(text8):\n\treturn re.sub(r'\\s+', ' ', text8)\n\n\ndef remove_multiple_spaces(text9):\n\treturn re.sub(r'\\s+', ' ', text9)\n\n\ndef remove_multiple_spaces(text10):\n\treturn re.sub(r'\\s+', ' ', text10)\n\n\ndef remove_multiple_spaces(text11):\n\treturn re.sub(r'\\s+', ' ', text11)\n\n\ndef remove_multiple_spaces(text12):\n\treturn re.sub(r'\\s+', ' ', text12)\n\n\ndef remove_multiple_spaces(text13):\n\treturn re.sub(r'\\s+', ' ', text13)\n\n\ndef remove_multiple_spaces(text14):\n\treturn re.sub(r'\\s+', ' ', text14)\n\n\ndef remove_multiple_spaces(text15):\n\treturn re.sub(r'\\s+', ' ', text15)\n\n\ndef remove_multiple_spaces(text16):\n\treturn re.sub(r'\\s+', ' ', text16)\n\n\ndef remove_multiple_spaces(text17):\n\treturn re.sub(r'\\s+', ' ', text17)\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'\\s+', ' ', text1)\n\n\ndef remove_multiple_spaces(text2):\n\treturn re.sub(r'\\s+', ' ', text2)\n\n\ndef remove_multiple_spaces(text3):\n\treturn re.sub(r'\\s+', ' ', text3)\n\n\ndef remove_multiple_spaces(text4):\n\treturn re.sub(r'\\s+', ' ', text4)\n\n\ndef remove_multiple_spaces(text5):\n\treturn re.sub(r'\\s+', ' ', text5)\n\n\ndef remove_multiple_spaces(text6):\n\treturn re.sub(r'\\s+', ' ', text6)\n\n\ndef remove_multiple_spaces(text7):\n\treturn re.sub(r'\\s+', ' ', text7)\n\n\ndef remove_multiple_spaces(text8):\n\treturn re.sub(r'\\s+', ' ', text8)\n\n\ndef remove_multiple_spaces(text9):\n\treturn re.sub(r'\\s+', ' ', text9)\n\n\ndef remove_multiple_spaces(text10):\n\treturn re.sub(r'\\s+', ' ', text10)\n\n\ndef remove_multiple_spaces(text11):\n\treturn re.sub(r'\\s+', ' ', text11)\n\n\ndef remove_multiple_spaces(text12):\n\treturn re.sub(r'\\s+', ' ', text12)\n\n\ndef remove_multiple_spaces(text13):\n\treturn re.sub(r'\\s+', ' ', text13)\n\n\ndef remove_multiple_spaces(text14):\n\treturn re.sub(r'\\s+', ' ', text14)\n\n\ndef remove_multiple_spaces(text15):\n\treturn re.sub(r'\\s+', ' ', text15)\n\n\ndef remove_multiple_spaces(text16):\n\treturn re.sub(r'\\s+', ' ', text16)\n\n\ndef remove_multiple_spaces(text17):"}
{"ID": 95, "source": "MBPP:696", "prompt": "\"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\t", "predict": "<s> \"\"\"\nWrite a function to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):  \n\tresult = []\n\tfor i in range(len(list1)):\n\t\tresult.append([list1[i][0],list2[i][0]])\n\t\tresult.append([list1[i][1],list2[i][1]])\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 100, "source": "MBPP:701", "prompt": "\"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tsum_arr = sum(arr)\n\tleft_sum = 0\n\tfor i in range(len(arr)):\n\t\tif left_sum == sum_arr - left_sum - arr[i]:\n\t\t\treturn i\n\t\tleft_sum += arr[i]\n\treturn -1\n\n\nif __name__ == '__main__':\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(equilibrium_index([1, 2, 3, 4, 5, 6]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\tprint(equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"ID": 104, "source": "MBPP:705", "prompt": "\"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n\treturn sorted(list1, key=lambda x: (len(x), x))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 106, "source": "MBPP:707", "prompt": "\"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :  \n\tcount = 0\n\twhile (n > 0) :  \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\n# Driver Code\nn = 10\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 15\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 20\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 25\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 30\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 35\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 40\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 45\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 50\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 55\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 60\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 65\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 70\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 75\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 80\nprint(\"Total set bits from 1 to\", n, \"is\", count", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code\nn = 10\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 15\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 20\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 25\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 30\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 35\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 40\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 45\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 50\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 55\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 60\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 65\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 70\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 75\nprint(\"Total set bits from 1 to\", n, \"is\", count_Set_Bits(n))\n\nn = 80\nprint(\"Total set bits from 1 to\", n, \"is\", count"}
{"ID": 107, "source": "MBPP:708", "prompt": "\"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\t", "predict": "<s> \"\"\"\nWrite a python function to convert a string to a list.\n\"\"\"\ndef Convert(string): \n\treturn list(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\treturn \"\".join(list)\n\nprint(Convert([\"h\",\"e\",\"l\",\"l\",\"o\"]))\n\n\"\"\"\nWrite a python function to convert a string to a tuple.\n\"\"\"\ndef Convert(string): \n\treturn tuple(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a tuple to a string.\n\"\"\"\ndef Convert(tuple): \n\treturn \"\".join(tuple)\n\nprint(Convert((\"h\",\"e\",\"l\",\"l\",\"o\")))\n\n\"\"\"\nWrite a python function to convert a string to a set.\n\"\"\"\ndef Convert(string): \n\treturn set(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a set to a string.\n\"\"\"\ndef Convert(set): \n\treturn \"\".join(set)\n\nprint(Convert(set([\"h\",\"e\",\"l\",\"l\",\"o\"])))\n\n\"\"\"\nWrite a python function to convert a string to a dictionary.\n\"\"\"\ndef Convert(string): \n\treturn dict(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a dictionary to a string.\n\"\"\"\ndef Convert(dict): \n\treturn \"\".join(dict)\n\nprint(Convert(dict([\"h\",\"e\",\"l\",\"l\",\"o\"])))\n\n\"\"\"\nWrite a python function to convert a string to a float.\n\"\"\"\ndef Convert(string): \n\treturn float(string)\n\nprint(Convert(\"1.2\"))\n\n\"\"\"\nWrite a python function to convert a float to a string.\n\"\"\"\ndef Convert(float): \n\treturn str(float)\n\nprint(Convert(1.2))\n\n\"\"\"\nWrite a python function to convert a string to an integer.\n\"\"\"\ndef Convert(string): \n\treturn int(string)\n\nprint(Convert(\"1\"))\n\n\"\"\"\nWrite a python function to convert an integer to a string.\n\"\"\"\ndef Convert", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a list to a string.\n\"\"\"\ndef Convert(list): \n\treturn \"\".join(list)\n\nprint(Convert([\"h\",\"e\",\"l\",\"l\",\"o\"]))\n\n\"\"\"\nWrite a python function to convert a string to a tuple.\n\"\"\"\ndef Convert(string): \n\treturn tuple(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a tuple to a string.\n\"\"\"\ndef Convert(tuple): \n\treturn \"\".join(tuple)\n\nprint(Convert((\"h\",\"e\",\"l\",\"l\",\"o\")))\n\n\"\"\"\nWrite a python function to convert a string to a set.\n\"\"\"\ndef Convert(string): \n\treturn set(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a set to a string.\n\"\"\"\ndef Convert(set): \n\treturn \"\".join(set)\n\nprint(Convert(set([\"h\",\"e\",\"l\",\"l\",\"o\"])))\n\n\"\"\"\nWrite a python function to convert a string to a dictionary.\n\"\"\"\ndef Convert(string): \n\treturn dict(string)\n\nprint(Convert(\"hello\"))\n\n\"\"\"\nWrite a python function to convert a dictionary to a string.\n\"\"\"\ndef Convert(dict): \n\treturn \"\".join(dict)\n\nprint(Convert(dict([\"h\",\"e\",\"l\",\"l\",\"o\"])))\n\n\"\"\"\nWrite a python function to convert a string to a float.\n\"\"\"\ndef Convert(string): \n\treturn float(string)\n\nprint(Convert(\"1.2\"))\n\n\"\"\"\nWrite a python function to convert a float to a string.\n\"\"\"\ndef Convert(float): \n\treturn str(float)\n\nprint(Convert(1.2))\n\n\"\"\"\nWrite a python function to convert a string to an integer.\n\"\"\"\ndef Convert(string): \n\treturn int(string)\n\nprint(Convert(\"1\"))\n\n\"\"\"\nWrite a python function to convert an integer to a string.\n\"\"\"\ndef Convert"}
{"ID": 111, "source": "MBPP:712", "prompt": "\"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicates from a list of lists.\n\"\"\"\ndef remove_duplicate(list1):\n\treturn list(set(tuple(x) for x in list1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 112, "source": "MBPP:713", "prompt": "\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n\tvalid_values = [1, 2, 3, 4, 5]\n\tfor i in test_tup:\n\t\tif i not in valid_values:\n\t\t\treturn False\n\treturn True\n\nprint(check_valid((1, 2, 3, 4, 5)))\nprint(check_valid((1, 2, 3, 4, 5, 6)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_valid((1, 2, 3, 4, 5)))\nprint(check_valid((1, 2, 3, 4, 5, 6)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\nprint(check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"}
{"ID": 113, "source": "MBPP:714", "prompt": "\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\n\"\"\"\ndef count_Fac(n):  \n\tcount = 0\n\twhile n > 1:  \n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of_prime_factor(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tn = n // 2\n\treturn count\n\ndef count_distinct_power_of"}
{"ID": 114, "source": "MBPP:715", "prompt": "\"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n\treturn tuple(test_str.split(','))\n\nprint(str_to_tuple('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a list.\n\"\"\"\ndef str_to_list(test_str):\n\treturn list(test_str.split(','))\n\nprint(str_to_list('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a set.\n\"\"\"\ndef str_to_set(test_str):\n\treturn set(test_str.split(','))\n\nprint(str_to_set('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a dictionary.\n\"\"\"\ndef str_to_dict(test_str):\n\treturn dict(test_str.split(','))\n\nprint(str_to_dict('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a tuple of tuples.\n\"\"\"\ndef str_to_tuple_of_tuples(test_str):\n\treturn tuple(tuple(int(i) for i in test_str.split(',')) for j in test_str.split('|'))\n\nprint(str_to_tuple_of_tuples('1,2,3|4,5,6'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a list of lists.\n\"\"\"\ndef str_to_list_of_lists(test_str):\n\treturn [list(int(i) for i in test_str.split(',')) for j in test_str.split('|')]\n\nprint(str_to_list_of_lists('1,2,3|4,5,6'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a set of sets.\n\"\"\"\ndef str_to_set_of_sets(test_str):\n\treturn set(set(int(i) for i in test_str.split(',')) for j in test_str.split('|'))\n\nprint(str_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(test_str.split(','))\n\nprint(str_to_tuple('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a list.\n\"\"\"\ndef str_to_list(test_str):\n\treturn list(test_str.split(','))\n\nprint(str_to_list('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a set.\n\"\"\"\ndef str_to_set(test_str):\n\treturn set(test_str.split(','))\n\nprint(str_to_set('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a dictionary.\n\"\"\"\ndef str_to_dict(test_str):\n\treturn dict(test_str.split(','))\n\nprint(str_to_dict('1,2,3,4,5'))\n\n\"\"\"\nWrite a function to convert the given string of integers into a tuple of tuples.\n\"\"\"\ndef str_to_tuple_of_tuples(test_str):"}
{"ID": 117, "source": "MBPP:718", "prompt": "\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n\treturn list1[::2]\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):"}
{"ID": 121, "source": "MBPP:722", "prompt": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n\treturn {k:v for k,v in students.items() if v['height'] >= h and v['weight'] >= w}\n\nstudents = {\n\t'Alice': {'height': 170, 'weight': 60},\n\t'Bob': {'height': 180, 'weight': 70},\n\t'Charlie': {'height': 160, 'weight': 50},\n\t'David': {'height': 170, 'weight': 70},\n\t'Eve': {'height': 150, 'weight': 40},\n\t'Fred': {'height': 160, 'weight': 60},\n\t'George': {'height': 170, 'weight': 70},\n\t'Helen': {'height': 160, 'weight': 50},\n\t'Ivan': {'height': 170, 'weight': 70},\n\t'Judy': {'height': 160, 'weight': 60},\n\t'Kate': {'height': 170, 'weight': 70},\n\t'Lily': {'height': 160, 'weight': 50},\n\t'Mike': {'height': 170, 'weight': 70},\n\t'Nick': {'height': 160, 'weight': 60},\n\t'Olivia': {'height': 170, 'weight': 70},\n\t'Pam': {'height': 160, 'weight': 50},\n\t'Quinn': {'height': 170, 'weight': 70},\n\t'Rose': {'height': 160, 'weight': 60},\n\t'Sarah': {'height': 170, 'weight': 70},\n\t'Tina': {'height': 160, 'weight': 50},\n\t'Uma': {'height': 170, 'weight': 70},\n\t'Victor': {'height': 160, 'weight': 60},\n\t'Wendy': {'height': 17", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t'Alice': {'height': 170, 'weight': 60},\n\t'Bob': {'height': 180, 'weight': 70},\n\t'Charlie': {'height': 160, 'weight': 50},\n\t'David': {'height': 170, 'weight': 70},\n\t'Eve': {'height': 150, 'weight': 40},\n\t'Fred': {'height': 160, 'weight': 60},\n\t'George': {'height': 170, 'weight': 70},\n\t'Helen': {'height': 160, 'weight': 50},\n\t'Ivan': {'height': 170, 'weight': 70},\n\t'Judy': {'height': 160, 'weight': 60},\n\t'Kate': {'height': 170, 'weight': 70},\n\t'Lily': {'height': 160, 'weight': 50},\n\t'Mike': {'height': 170, 'weight': 70},\n\t'Nick': {'height': 160, 'weight': 60},\n\t'Olivia': {'height': 170, 'weight': 70},\n\t'Pam': {'height': 160, 'weight': 50},\n\t'Quinn': {'height': 170, 'weight': 70},\n\t'Rose': {'height': 160, 'weight': 60},\n\t'Sarah': {'height': 170, 'weight': 70},\n\t'Tina': {'height': 160, 'weight': 50},\n\t'Uma': {'height': 170, 'weight': 70},\n\t'Victor': {'height': 160, 'weight': 60},"}
{"ID": 122, "source": "MBPP:723", "prompt": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the same pair in two given lists using map function.\n\"\"\"\ndef count_same_pair(nums1, nums2):\n\treturn len(list(map(lambda x: x[0] in x[1], zip(nums1, nums2))))\n\n\ndef count_same_pair_2(nums1, nums2):\n\treturn sum(1 for i in nums1 if i in nums2)\n\n\ndef count_same_pair_3(nums1, nums2):\n\treturn len([i for i in nums1 if i in nums2])\n\n\ndef count_same_pair_4(nums1, nums2):\n\treturn len(set(nums1).intersection(nums2))\n\n\ndef count_same_pair_5(nums1, nums2):\n\treturn len(set(nums1).union(nums2)) - len(set(nums1).intersection(nums2))\n\n\ndef count_same_pair_6(nums1, nums2):\n\treturn len(set(nums1 + nums2)) - len(nums1)\n\n\ndef count_same_pair_7(nums1, nums2):\n\treturn len(set(nums1).symmetric_difference(nums2))\n\n\ndef count_same_pair_8(nums1, nums2):\n\treturn len(set(nums1).difference(nums2))\n\n\ndef count_same_pair_9(nums1, nums2):\n\treturn len(set(nums1).union(nums2)) - len(set(nums1).intersection(nums2))\n\n\ndef count_same_pair_10(nums1, nums2):\n\treturn len(set(nums1).symmetric_difference(nums2))\n\n\ndef count_same_pair_11(nums1, nums2):\n\treturn len(set(nums1).difference(nums2))\n\n\ndef count_same_pair_12(nums1, nums2):\n\treturn len(set(nums1).union(nums2)) - len(set(nums1).intersection(nums2))\n\n\ndef count", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(list(map(lambda x: x[0] in x[1], zip(nums1, nums2))))\n\n\ndef count_same_pair_2(nums1, nums2):\n\treturn sum(1 for i in nums1 if i in nums2)\n\n\ndef count_same_pair_3(nums1, nums2):\n\treturn len([i for i in nums1 if i in nums2])\n\n\ndef count_same_pair_4(nums1, nums2):\n\treturn len(set(nums1).intersection(nums2))\n\n\ndef count_same_pair_5(nums1, nums2):\n\treturn len(set(nums1).union(nums2)) - len(set(nums1).intersection(nums2))\n\n\ndef count_same_pair_6(nums1, nums2):\n\treturn len(set(nums1 + nums2)) - len(nums1)\n\n\ndef count_same_pair_7(nums1, nums2):\n\treturn len(set(nums1).symmetric_difference(nums2))\n\n\ndef count_same_pair_8(nums1, nums2):\n\treturn len(set(nums1).difference(nums2))\n\n\ndef count_same_pair_9(nums1, nums2):\n\treturn len(set(nums1).union(nums2)) - len(set(nums1).intersection(nums2))\n\n\ndef count_same_pair_10(nums1, nums2):\n\treturn len(set(nums1).symmetric_difference(nums2))\n\n\ndef count_same_pair_11(nums1, nums2):\n\treturn len(set(nums1).difference(nums2))\n\n\ndef count_same_pair_12(nums1, nums2):"}
{"ID": 124, "source": "MBPP:725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\n\"\"\"\ndef extract_quotation(text1):\n\timport re\n\treturn re.findall(r'\"([^\"]*)\"', text1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 126, "source": "MBPP:727", "prompt": "\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all characters except letters and numbers using regex\n\"\"\"\ndef remove_char(S):\n\timport re\n\treturn re.sub('[^a-zA-Z0-9]', '', S)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 127, "source": "MBPP:728", "prompt": "\"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\t", "predict": "<s> \"\"\"\nWrite a function to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n\treturn sum(lst1) + sum(lst2)\n\nprint(sum_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list.\n\"\"\"\ndef find_duplicate(lst):\n\tfor i in lst:\n\t\tif lst.count(i) > 1:\n\t\t\treturn i\n\treturn None\n\nprint(find_duplicate([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using set.\n\"\"\"\ndef find_duplicate_set(lst):\n\ts = set(lst)\n\tfor i in lst:\n\t\tif i in s:\n\t\t\treturn i\n\treturn None\n\nprint(find_duplicate_set([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using dictionary.\n\"\"\"\ndef find_duplicate_dict(lst):\n\td = {}\n\tfor i in lst:\n\t\tif i in d:\n\t\t\treturn i\n\t\td[i] = 1\n\treturn None\n\nprint(find_duplicate_dict([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using hash table.\n\"\"\"\ndef find_duplicate_hash(lst):\n\th = {}\n\tfor i in lst:\n\t\tif h.has_key(i):\n\t\t\treturn i\n\t\th[i] = 1\n\treturn None\n\nprint(find_duplicate_hash([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using hash table.\n\"\"\"\ndef find_duplicate_hash(lst):\n\th = {}\n\tfor i in lst:\n\t\tif h.has_key(i):\n\t\t\treturn i\n\t\th[i] =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the first duplicate element in a list.\n\"\"\"\ndef find_duplicate(lst):\n\tfor i in lst:\n\t\tif lst.count(i) > 1:\n\t\t\treturn i\n\treturn None\n\nprint(find_duplicate([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using set.\n\"\"\"\ndef find_duplicate_set(lst):\n\ts = set(lst)\n\tfor i in lst:\n\t\tif i in s:\n\t\t\treturn i\n\treturn None\n\nprint(find_duplicate_set([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using dictionary.\n\"\"\"\ndef find_duplicate_dict(lst):\n\td = {}\n\tfor i in lst:\n\t\tif i in d:\n\t\t\treturn i\n\t\td[i] = 1\n\treturn None\n\nprint(find_duplicate_dict([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using hash table.\n\"\"\"\ndef find_duplicate_hash(lst):\n\th = {}\n\tfor i in lst:\n\t\tif h.has_key(i):\n\t\t\treturn i\n\t\th[i] = 1\n\treturn None\n\nprint(find_duplicate_hash([1,2,3,4,5,6,7,8,9,10]))\n\n\"\"\"\nWrite a function to find the first duplicate element in a list using hash table.\n\"\"\"\ndef find_duplicate_hash(lst):\n\th = {}\n\tfor i in lst:\n\t\tif h.has_key(i):\n\t\t\treturn i\n\t\th[i] ="}
{"ID": 128, "source": "MBPP:729", "prompt": "\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\t", "predict": "<s> \"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))\n\nprint(add_list([1,2,3],[4,5,6]))\n\n\"\"\"\nWrite a function to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n\treturn list(map(lambda x,y: x+y,nums1,nums2))"}
{"ID": 130, "source": "MBPP:731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r,h):\n\treturn 2*r*h\n\nprint(lateralsurface_cone(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\treturn 2*r*h\n\nprint(lateralsurface_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(r):\n\treturn 6*r*r\n\nprint(lateralsurface_cube(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4*r*r\n\nprint(lateralsurface_sphere(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a torus.\n\"\"\"\ndef lateralsurface_torus(r1,r2):\n\treturn 2*r1*r2\n\nprint(lateralsurface_torus(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a dodecahedron.\n\"\"\"\ndef lateralsurface_dodecahedron(r):\n\treturn 12*r*r\n\nprint(lateralsurface_dodecahedron(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a icosahedron.\n\"\"\"\ndef lateralsurface_icosahedron(r):\n\treturn 20*r*r\n\nprint(lateralsurface_icosahedron(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a octahedron.\n\"\"\"\ndef lateralsurface_octahedron(r):\n\treturn 8*r*r\n\nprint(lateralsurface_octahedron(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a tetrahedron.\n\"\"\"\ndef lateralsurface_tetrahedron", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*r*h\n\nprint(lateralsurface_cone(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\treturn 2*r*h\n\nprint(lateralsurface_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(r):\n\treturn 6*r*r\n\nprint(lateralsurface_cube(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4*r*r\n\nprint(lateralsurface_sphere(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a torus.\n\"\"\"\ndef lateralsurface_torus(r1,r2):\n\treturn 2*r1*r2\n\nprint(lateralsurface_torus(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a dodecahedron.\n\"\"\"\ndef lateralsurface_dodecahedron(r):\n\treturn 12*r*r\n\nprint(lateralsurface_dodecahedron(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a icosahedron.\n\"\"\"\ndef lateralsurface_icosahedron(r):\n\treturn 20*r*r\n\nprint(lateralsurface_icosahedron(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a octahedron.\n\"\"\"\ndef lateralsurface_octahedron(r):\n\treturn 8*r*r\n\nprint(lateralsurface_octahedron(2))\n\n\"\"\"\nWrite a function to find the lateral surface area of a tetrahedron.\n\"\"\"\ndef lateralsurface_tetrahedron"}
{"ID": 133, "source": "MBPP:734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n\tsum_of_subarray_prod = 1\n\tfor i in range(n):\n\t\tsum_of_subarray_prod *= arr[i]\n\treturn sum_of_subarray_prod\n\narr = [1,2,3,4]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 134, "source": "MBPP:735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef toggle_middle_bits(n): \n\tn = n >> 1\n\tn = n << 1\n\treturn n\n\nprint(toggle_middle_bits(10))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20, 30))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_of_three_conditional(a, b, c):\n\tif a > b and a > c:\n\t\treturn a\n\telif b > a and b > c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(max_of_three_conditional(10, 20, 30))\n"}
{"ID": 135, "source": "MBPP:736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"\ndef left_insertion(a, x):\n\t\"\"\"\n\t:type a: list\n\t:type x: int\n\t:rtype: int\n\t\"\"\"\n\tif len(a) == 0:\n\t\treturn 0\n\tif x <= a[0]:\n\t\treturn 0\n\tif x >= a[-1]:\n\t\treturn len(a)\n\tlow = 0\n\thigh = len(a) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] < x:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn low\n\n\ndef test_left_insertion():\n\tassert left_insertion([1, 2, 3, 4, 5], 0) == 0\n\tassert left_insertion([1, 2, 3, 4, 5], 1) == 1\n\tassert left_insertion([1, 2, 3, 4, 5], 2) == 2\n\tassert left_insertion([1, 2, 3, 4, 5], 3) == 3\n\tassert left_insertion([1, 2, 3, 4, 5], 4) == 4\n\tassert left_insertion([1, 2, 3, 4, 5], 5) == 5\n\tassert left_insertion([1, 2, 3, 4, 5], 6) == 5\n\tassert left_insertion([1, 2, 3, 4, 5], 0) == 0\n\tassert left_insertion([1, 2, 3, 4, 5], 1) == 1\n\tassert left_insertion([1, 2, 3, 4, 5], 2) == 2\n\tassert left_insertion([1, 2, 3, 4, 5], 3) == 3\n\tassert left_insertion([1, 2, 3, 4, 5], 4) == 4\n\tassert left_insertion([1, 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert left_insertion([1, 2, 3, 4, 5], 0) == 0\n\tassert left_insertion([1, 2, 3, 4, 5], 1) == 1\n\tassert left_insertion([1, 2, 3, 4, 5], 2) == 2\n\tassert left_insertion([1, 2, 3, 4, 5], 3) == 3\n\tassert left_insertion([1, 2, 3, 4, 5], 4) == 4\n\tassert left_insertion([1, 2, 3, 4, 5], 5) == 5\n\tassert left_insertion([1, 2, 3, 4, 5], 6) == 5\n\tassert left_insertion([1, 2, 3, 4, 5], 0) == 0\n\tassert left_insertion([1, 2, 3, 4, 5], 1) == 1\n\tassert left_insertion([1, 2, 3, 4, 5], 2) == 2\n\tassert left_insertion([1, 2, 3, 4, 5], 3) == 3\n\tassert left_insertion([1, 2, 3, 4, 5], 4) == 4\n\tassert left_insertion([1, 2"}
{"ID": 140, "source": "MBPP:741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n\treturn len(set(s)) <= 1\n\nprint(all_Characters_Same(\"\"))\nprint(all_Characters_Same(\"a\"))\nprint(all_Characters_Same(\"aa\"))\nprint(all_Characters_Same(\"aaa\"))\nprint(all_Characters_Same(\"aaaa\"))\nprint(all_Characters_Same(\"aaaaa\"))\nprint(all_Characters_Same(\"aaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaa", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(all_Characters_Same(\"\"))\nprint(all_Characters_Same(\"a\"))\nprint(all_Characters_Same(\"aa\"))\nprint(all_Characters_Same(\"aaa\"))\nprint(all_Characters_Same(\"aaaa\"))\nprint(all_Characters_Same(\"aaaaa\"))\nprint(all_Characters_Same(\"aaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\nprint(all_Characters_Same(\"aaaaaaaaaaaa"}
{"ID": 143, "source": "MBPP:744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n\tfor i in test_tup:\n\t\tif i is None:\n\t\t\treturn True\n\treturn False\n\nprint(check_none((1,2,3,4,5)))\nprint(check_none((1,2,3,4,5,None)))\nprint(check_none((1,2,3,4,5,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_none((1,2,3,4,5)))\nprint(check_none((1,2,3,4,5,None)))\nprint(check_none((1,2,3,4,5,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None,None,None,None,None,None,None,None,None,None,None,None,None)))\nprint(check_none((1,2,3,4,5,None,None"}
{"ID": 144, "source": "MBPP:745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t", "predict": "<s> \"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_2(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_3(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_4(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_5(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_6(startnum, endnum", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_2(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_3(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_4(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_5(startnum, endnum):\n\t\"\"\"\n\t:param startnum:\n\t:param endnum:\n\t:return:\n\t\"\"\"\n\tresult = []\n\tfor i in range(startnum, endnum+1):\n\t\tif all(i % int(d) == 0 for d in str(i)):\n\t\t\tresult.append(i)\n\treturn result\n\n\ndef divisible_by_digits_6(startnum, endnum"}
{"ID": 145, "source": "MBPP:746", "prompt": "\"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find area of a sector.\n\"\"\"\ndef sector_area(r,a):\n\treturn (r**2)*(a/360)\n\nprint(sector_area(10,180))\n\n\"\"\"\nWrite a function to find area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\nprint(circle_area(10))\n\n\"\"\"\nWrite a function to find area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(10,5))\n\n\"\"\"\nWrite a function to find area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn (a+b)*h/2\n\nprint(trapezium_area(10,5,3))\n\n\"\"\"\nWrite a function to find area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(10,5))\n\n\"\"\"\nWrite a function to find area of a rhombus.\n\"\"\"\ndef rhombus_area(d):\n\treturn (d**2)/2\n\nprint(rhombus_area(10))\n\n\"\"\"\nWrite a function to find area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn (b*h)/2\n\nprint(kite_area(10,5))\n\n\"\"\"\nWrite a function to find area of a ellipse.\n\"\"\"\ndef ellipse_area(a,b):\n\treturn 3.14*a*b\n\nprint(ellipse_area(10,5))\n\n\"\"\"\nWrite a function to find area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(sector_area(10,180))\n\n\"\"\"\nWrite a function to find area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r**2\n\nprint(circle_area(10))\n\n\"\"\"\nWrite a function to find area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(10,5))\n\n\"\"\"\nWrite a function to find area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to find area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn (a+b)*h/2\n\nprint(trapezium_area(10,5,3))\n\n\"\"\"\nWrite a function to find area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(10,5))\n\n\"\"\"\nWrite a function to find area of a rhombus.\n\"\"\"\ndef rhombus_area(d):\n\treturn (d**2)/2\n\nprint(rhombus_area(10))\n\n\"\"\"\nWrite a function to find area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn (b*h)/2\n\nprint(kite_area(10,5))\n\n\"\"\"\nWrite a function to find area of a ellipse.\n\"\"\"\ndef ellipse_area(a,b):\n\treturn 3.14*a*b\n\nprint(ellipse_area(10,5))\n\n\"\"\"\nWrite a function to find area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to"}
{"ID": 147, "source": "MBPP:748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\ndef capital_words_spaces(str1):\n\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid email address or not by using regex.\n\"\"\"\ndef is_email(str1):\n\treturn re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid phone number or not by using regex.\n\"\"\"\ndef is_phone(str1):\n\treturn re.match(r'^[0-9]{10}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid URL or not by using regex.\n\"\"\"\ndef is_url(str1):\n\treturn re.match(r'^https?://', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid IP address or not by using regex.\n\"\"\"\ndef is_ip(str1):\n\treturn re.match(r'^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid MAC address or not by using regex.\n\"\"\"\ndef is_mac(str1):\n\treturn re.match(r'^[0-9A-Fa-f]{2}([-:]?)[0-9A-Fa-f]{2}(\\1[0-9A-Fa-f]{2}){4}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid credit card number or not by using regex.\n\"\"\"\ndef is_credit_card(str1):\n\treturn re.match(r'^[0-9]{13,19}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid ISBN number or not by using regex.\n\"\"\"\ndef is_isbn(str1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid email address or not by using regex.\n\"\"\"\ndef is_email(str1):\n\treturn re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid phone number or not by using regex.\n\"\"\"\ndef is_phone(str1):\n\treturn re.match(r'^[0-9]{10}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid URL or not by using regex.\n\"\"\"\ndef is_url(str1):\n\treturn re.match(r'^https?://', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid IP address or not by using regex.\n\"\"\"\ndef is_ip(str1):\n\treturn re.match(r'^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid MAC address or not by using regex.\n\"\"\"\ndef is_mac(str1):\n\treturn re.match(r'^[0-9A-Fa-f]{2}([-:]?)[0-9A-Fa-f]{2}(\\1[0-9A-Fa-f]{2}){4}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid credit card number or not by using regex.\n\"\"\"\ndef is_credit_card(str1):\n\treturn re.match(r'^[0-9]{13,19}$', str1)\n\n\n\"\"\"\nWrite a function to check if a given string is a valid ISBN number or not by using regex.\n\"\"\"\ndef is_isbn(str1"}
{"ID": 150, "source": "MBPP:751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n\tif i >= len(arr):\n\t\treturn True\n\tleft = 2 * i + 1\n\tright = 2 * i + 2\n\tif left < len(arr) and arr[i] > arr[left]:\n\t\treturn False\n\tif right < len(arr) and arr[i] > arr[right]:\n\t\treturn False\n\treturn check_min_heap(arr, left) and check_min_heap(arr, right)\n\ndef check_min_heap(arr):\n\treturn check_min_heap(arr, 0)\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn check_min_heap(arr, 0)\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(check_min_heap(arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1"}
{"ID": 153, "source": "MBPP:754", "prompt": "\"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t", "predict": "<s> \"\"\"\nWrite a function to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in l1 if i in l2 and i in l3]\n\n\ndef extract_index_list_set(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn list(set(l1).intersection(set(l2), set(l3)))\n\n\ndef extract_index_list_set_comprehension(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in set(l1).intersection(set(l2), set(l3))]\n\n\ndef extract_index_list_set_comprehension_2(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in set(l1).intersection(set(l2), set(l3))]\n\n\ndef extract_index_list_set_comprehension_3(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in set(l1).intersection(set(l2), set(l3))]\n\n\ndef extract_index_list_set_comprehension_4(l1, l2, l3):\n\t\"\"\"\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in l1 if i in l2 and i in l3]\n\n\ndef extract_index_list_set(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn list(set(l1).intersection(set(l2), set(l3)))\n\n\ndef extract_index_list_set_comprehension(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in set(l1).intersection(set(l2), set(l3))]\n\n\ndef extract_index_list_set_comprehension_2(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in set(l1).intersection(set(l2), set(l3))]\n\n\ndef extract_index_list_set_comprehension_3(l1, l2, l3):\n\t\"\"\"\n\t:type l1: List[int]\n\t:type l2: List[int]\n\t:type l3: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [i for i in set(l1).intersection(set(l2), set(l3))]\n"}
{"ID": 155, "source": "MBPP:756", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\ndef text_match_zero_one(text):\n\treturn text.count('ab')\n\ndef text_match_zero_one_regex(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_2(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_3(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_4(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_5(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_6(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_7(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_8(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_9(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_10(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_11(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_12(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_13(text):\n\timport re\n\treturn len(re.findall(r'a?", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn text.count('ab')\n\ndef text_match_zero_one_regex(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_2(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_3(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_4(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_5(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_6(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_7(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_8(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_9(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_10(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_11(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_12(text):\n\timport re\n\treturn len(re.findall(r'a?b', text))\n\ndef text_match_zero_one_regex_13(text):\n\timport re"}
{"ID": 163, "source": "MBPP:764", "prompt": "\"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nprint(number_ctr(\"1234567890\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 168, "source": "MBPP:769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\treturn list(set(li1) - set(li2))\n\nprint(Diff([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the intersection of two lists.\n\"\"\"\ndef Intersection(li1,li2):\n\treturn list(set(li1).intersection(set(li2)))\n\nprint(Intersection([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the union of two lists.\n\"\"\"\ndef Union(li1,li2):\n\treturn list(set(li1).union(set(li2)))\n\nprint(Union([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the symmetric difference of two lists.\n\"\"\"\ndef Symmetric_Difference(li1,li2):\n\treturn list(set(li1).symmetric_difference(set(li2)))\n\nprint(Symmetric_Difference([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\treturn list(set(li1) - set(li2))\n\nprint(Diff([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the intersection of two lists.\n\"\"\"\ndef Intersection(li1,li2):\n\treturn list(set(li1).intersection(set(li2)))\n\nprint(Intersection([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the union of two lists.\n\"\"\"\ndef Union(li1,li2):\n\treturn list(set(li1).union(set(li2)))\n\nprint(Union([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the symmetric difference of two lists.\n\"\"\"\ndef Symmetric_Difference(li1,li2):\n\treturn list(set(li", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(set(li1) - set(li2))\n\nprint(Diff([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the intersection of two lists.\n\"\"\"\ndef Intersection(li1,li2):\n\treturn list(set(li1).intersection(set(li2)))\n\nprint(Intersection([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the union of two lists.\n\"\"\"\ndef Union(li1,li2):\n\treturn list(set(li1).union(set(li2)))\n\nprint(Union([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the symmetric difference of two lists.\n\"\"\"\ndef Symmetric_Difference(li1,li2):\n\treturn list(set(li1).symmetric_difference(set(li2)))\n\nprint(Symmetric_Difference([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n\treturn list(set(li1) - set(li2))\n\nprint(Diff([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the intersection of two lists.\n\"\"\"\ndef Intersection(li1,li2):\n\treturn list(set(li1).intersection(set(li2)))\n\nprint(Intersection([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the union of two lists.\n\"\"\"\ndef Union(li1,li2):\n\treturn list(set(li1).union(set(li2)))\n\nprint(Union([1,2,3,4,5],[2,3,4]))\n\n\"\"\"\nWrite a python function to get the symmetric difference of two lists.\n\"\"\"\ndef Symmetric_Difference(li1,li2):"}
{"ID": 170, "source": "MBPP:771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given expression is balanced or not.\n\"\"\"\ndef check_expression(exp):\n\tstack = []\n\tfor char in exp:\n\t\tif char == '(' or char == '[' or char == '{':\n\t\t\tstack.append(char)\n\t\telif char == ')' or char == ']' or char == '}':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\ttop = stack.pop()\n\t\t\tif char == ')' and top != '(':\n\t\t\t\treturn False\n\t\t\telif char == ']' and top != '[':\n\t\t\t\treturn False\n\t\t\telif char == '}' and top != '{':\n\t\t\t\treturn False\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nprint(check_expression(\"()\"))\nprint(check_expression(\"()[]{}\"))\nprint(check_expression(\"(]\"))\nprint(check_expression(\"(]\"))\nprint(check_expression(\"{[()]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_expression(\"()\"))\nprint(check_expression(\"()[]{}\"))\nprint(check_expression(\"(]\"))\nprint(check_expression(\"(]\"))\nprint(check_expression(\"{[()]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check_expression(\"{[(]}\"))\nprint(check"}
{"ID": 171, "source": "MBPP:772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n\twords = test_str.split()\n\tnew_words = []\n\tfor word in words:\n\t\tif len(word) != K:\n\t\t\tnew_words.append(word)\n\treturn \" \".join(new_words)\n\n\nprint(remove_length(\"hello world\", 3))\nprint(remove_length(\"hello world\", 5))\nprint(remove_length(\"hello world\", 6))\nprint(remove_length(\"hello world\", 7))\nprint(remove_length(\"hello world\", 8))\nprint(remove_length(\"hello world\", 9))\nprint(remove_length(\"hello world\", 10))\nprint(remove_length(\"hello world\", 11))\nprint(remove_length(\"hello world\", 12))\nprint(remove_length(\"hello world\", 13))\nprint(remove_length(\"hello world\", 14))\nprint(remove_length(\"hello world\", 15))\nprint(remove_length(\"hello world\", 16))\nprint(remove_length(\"hello world\", 17))\nprint(remove_length(\"hello world\", 18))\nprint(remove_length(\"hello world\", 19))\nprint(remove_length(\"hello world\", 20))\nprint(remove_length(\"hello world\", 21))\nprint(remove_length(\"hello world\", 22))\nprint(remove_length(\"hello world\", 23))\nprint(remove_length(\"hello world\", 24))\nprint(remove_length(\"hello world\", 25))\nprint(remove_length(\"hello world\", 26))\nprint(remove_length(\"hello world\", 27))\nprint(remove_length(\"hello world\", 28))\nprint(remove_length(\"hello world\", 29))\nprint(remove_length(\"hello world\", 30))\nprint(remove_length(\"hello world\", 31))\nprint(remove_length(\"hello world\", 32))\nprint(remove_length(\"hello world\", 33))\nprint(remove_length(\"hello world\", 34))\nprint(remove_length(\"hello world\", 35))\nprint(remove_length(\"hello world\", 3", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(remove_length(\"hello world\", 3))\nprint(remove_length(\"hello world\", 5))\nprint(remove_length(\"hello world\", 6))\nprint(remove_length(\"hello world\", 7))\nprint(remove_length(\"hello world\", 8))\nprint(remove_length(\"hello world\", 9))\nprint(remove_length(\"hello world\", 10))\nprint(remove_length(\"hello world\", 11))\nprint(remove_length(\"hello world\", 12))\nprint(remove_length(\"hello world\", 13))\nprint(remove_length(\"hello world\", 14))\nprint(remove_length(\"hello world\", 15))\nprint(remove_length(\"hello world\", 16))\nprint(remove_length(\"hello world\", 17))\nprint(remove_length(\"hello world\", 18))\nprint(remove_length(\"hello world\", 19))\nprint(remove_length(\"hello world\", 20))\nprint(remove_length(\"hello world\", 21))\nprint(remove_length(\"hello world\", 22))\nprint(remove_length(\"hello world\", 23))\nprint(remove_length(\"hello world\", 24))\nprint(remove_length(\"hello world\", 25))\nprint(remove_length(\"hello world\", 26))\nprint(remove_length(\"hello world\", 27))\nprint(remove_length(\"hello world\", 28))\nprint(remove_length(\"hello world\", 29))\nprint(remove_length(\"hello world\", 30))\nprint(remove_length(\"hello world\", 31))\nprint(remove_length(\"hello world\", 32))\nprint(remove_length(\"hello world\", 33))\nprint(remove_length(\"hello world\", 34))\nprint(remove_length(\"hello world\", 35))\nprint(remove_length(\"hello world\", 3"}
{"ID": 173, "source": "MBPP:774", "prompt": "\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\n\"\"\"\ndef check_email(email): \n\tregex = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n\tif(re.search(regex, email)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 176, "source": "MBPP:777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr,n): \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i] not in arr[i+1:]:\n\t\t\tsum += arr[i]\n\treturn sum\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(find_Sum(arr,n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 186, "source": "MBPP:787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"\ndef text_match_three(text):\n\treturn text.count('ab') == 3\n\ndef text_match_three_regex(text):\n\treturn len(re.findall(r'ab', text)) == 3\n\ndef text_match_three_regex_2(text):\n\treturn re.search(r'ababab', text)\n\ndef text_match_three_regex_3(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_4(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_5(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_6(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_7(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_8(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_9(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_10(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_11(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_12(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_13(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_14(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_15(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_16(text):\n\treturn re.search(r'ab{3}', text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn text.count('ab') == 3\n\ndef text_match_three_regex(text):\n\treturn len(re.findall(r'ab', text)) == 3\n\ndef text_match_three_regex_2(text):\n\treturn re.search(r'ababab', text)\n\ndef text_match_three_regex_3(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_4(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_5(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_6(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_7(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_8(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_9(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_10(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_11(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_12(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_13(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_14(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_15(text):\n\treturn re.search(r'ab{3}', text)\n\ndef text_match_three_regex_16(text):"}
{"ID": 188, "source": "MBPP:789", "prompt": "\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l**2)/(4*tan(pi/s))\n\nprint(area_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):\n\treturn (s*l**3)/(6*tan(pi/s))\n\nprint(volume_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l**2)/(4*tan(pi/s))\n\nprint(area_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):\n\treturn (s*l**3)/(6*tan(pi/s))\n\nprint(volume_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l**2)/(4*tan(pi/s))\n\nprint(area_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):\n\treturn (s*l**3)/(6*tan(pi/s))\n\nprint(volume_polygon(5,10))\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn s*l\n\nprint(perimeter_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l**2)/(4*tan(pi/s))\n\nprint(area_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):\n\treturn (s*l**3)/(6*tan(pi/s))\n\nprint(volume_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l**2)/(4*tan(pi/s))\n\nprint(area_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):\n\treturn (s*l**3)/(6*tan(pi/s))\n\nprint(volume_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn (s*l**2)/(4*tan(pi/s))\n\nprint(area_polygon(5,10))\n\n\"\"\"\nWrite a function to calculate the volume of a regular polygon.\n\"\"\"\ndef volume_polygon(s,l):"}
{"ID": 191, "source": "MBPP:792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 193, "source": "MBPP:794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):\n\treturn 'a.*b'\n\ndef text_starta_endb(text):"}
{"ID": 195, "source": "MBPP:796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\t", "predict": "<s> \"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n\tsum = 0\n\tfor key in dict:\n\t\tsum += dict[key]\n\treturn sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 196, "source": "MBPP:797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2 != 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2 == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(l,r+1):\n\t\tif i%2 == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))\n\n\"\"\"\nWrite a python function to find the sum of all natural numbers within the range l and r.\n\"\"\"\ndef sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_in_Range(1,10))"}
{"ID": 197, "source": "MBPP:798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"\ndef _sum(arr):  \n\treturn sum(arr)\n\ndef sum(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum(arr[1:])\n\ndef sum_recursive(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive(arr[1:])\n\ndef sum_recursive_2(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_2(arr[1:])\n\ndef sum_recursive_3(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_3(arr[1:])\n\ndef sum_recursive_4(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_4(arr[1:])\n\ndef sum_recursive_5(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_5(arr[1:])\n\ndef sum_recursive_6(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_6(arr[1:])\n\ndef sum_recursive_7(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_7(arr[1:])\n\ndef sum_recursive_8(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_8(arr[1:])\n\ndef sum_recursive_9(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(arr)\n\ndef sum(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum(arr[1:])\n\ndef sum_recursive(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive(arr[1:])\n\ndef sum_recursive_2(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_2(arr[1:])\n\ndef sum_recursive_3(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_3(arr[1:])\n\ndef sum_recursive_4(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_4(arr[1:])\n\ndef sum_recursive_5(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_5(arr[1:])\n\ndef sum_recursive_6(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_6(arr[1:])\n\ndef sum_recursive_7(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_7(arr[1:])\n\ndef sum_recursive_8(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:\n\t\treturn arr[0] + sum_recursive_8(arr[1:])\n\ndef sum_recursive_9(arr):\n\tif len(arr) == 0:\n\t\treturn 0\n\telse:"}
{"ID": 200, "source": "MBPP:801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n\tif x==y and y==z:\n\t\treturn 3\n\telif x==y or y==z or z==x:\n\t\treturn 2\n\telse:\n\t\treturn 0\n\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,4))\nprint(test_three_equal(1,2,5))\nprint(test_three_equal(1,2,6))\nprint(test_three_equal(1,2,7))\nprint(test_three_equal(1,2,8))\nprint(test_three_equal(1,2,9))\nprint(test_three_equal(1,2,10))\nprint(test_three_equal(1,2,11))\nprint(test_three_equal(1,2,12))\nprint(test_three_equal(1,2,13))\nprint(test_three_equal(1,2,14))\nprint(test_three_equal(1,2,15))\nprint(test_three_equal(1,2,16))\nprint(test_three_equal(1,2,17))\nprint(test_three_equal(1,2,18))\nprint(test_three_equal(1,2,19))\nprint(test_three_equal(1,2,20))\nprint(test_three_equal(1,2,21))\nprint(test_three_equal(1,2,22))\nprint(test_three_equal(1,2,23))\nprint(test_three_equal(1,2,24))\nprint(test_three_equal(1,2,25))\nprint(test_three_equal(1,2,26))\nprint(test_three_equal(1,2,27))\nprint(test_three_equal(1,2,28))\nprint(test_three_equal(1,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,2))\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(1,2,4))\nprint(test_three_equal(1,2,5))\nprint(test_three_equal(1,2,6))\nprint(test_three_equal(1,2,7))\nprint(test_three_equal(1,2,8))\nprint(test_three_equal(1,2,9))\nprint(test_three_equal(1,2,10))\nprint(test_three_equal(1,2,11))\nprint(test_three_equal(1,2,12))\nprint(test_three_equal(1,2,13))\nprint(test_three_equal(1,2,14))\nprint(test_three_equal(1,2,15))\nprint(test_three_equal(1,2,16))\nprint(test_three_equal(1,2,17))\nprint(test_three_equal(1,2,18))\nprint(test_three_equal(1,2,19))\nprint(test_three_equal(1,2,20))\nprint(test_three_equal(1,2,21))\nprint(test_three_equal(1,2,22))\nprint(test_three_equal(1,2,23))\nprint(test_three_equal(1,2,24))\nprint(test_three_equal(1,2,25))\nprint(test_three_equal(1,2,26))\nprint(test_three_equal(1,2,27))\nprint(test_three_equal(1,2,28))\nprint(test_three_equal(1,"}
{"ID": 202, "source": "MBPP:803", "prompt": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n\treturn (n**0.5) % 1 == 0\n\n\nprint(is_Perfect_Square(16))\nprint(is_Perfect_Square(17))\nprint(is_Perfect_Square(25))\nprint(is_Perfect_Square(26))\nprint(is_Perfect_Square(36))\nprint(is_Perfect_Square(37))\nprint(is_Perfect_Square(49))\nprint(is_Perfect_Square(50))\nprint(is_Perfect_Square(64))\nprint(is_Perfect_Square(65))\nprint(is_Perfect_Square(81))\nprint(is_Perfect_Square(82))\nprint(is_Perfect_Square(100))\nprint(is_Perfect_Square(101))\nprint(is_Perfect_Square(121))\nprint(is_Perfect_Square(122))\nprint(is_Perfect_Square(144))\nprint(is_Perfect_Square(145))\nprint(is_Perfect_Square(169))\nprint(is_Perfect_Square(170))\nprint(is_Perfect_Square(196))\nprint(is_Perfect_Square(197))\nprint(is_Perfect_Square(225))\nprint(is_Perfect_Square(226))\nprint(is_Perfect_Square(256))\nprint(is_Perfect_Square(257))\nprint(is_Perfect_Square(289))\nprint(is_Perfect_Square(290))\nprint(is_Perfect_Square(324))\nprint(is_Perfect_Square(325))\nprint(is_Perfect_Square(361))\nprint(is_Perfect_Square(362))\nprint(is_Perfect_Square(400))\nprint(is_Perfect_Square(40", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(is_Perfect_Square(16))\nprint(is_Perfect_Square(17))\nprint(is_Perfect_Square(25))\nprint(is_Perfect_Square(26))\nprint(is_Perfect_Square(36))\nprint(is_Perfect_Square(37))\nprint(is_Perfect_Square(49))\nprint(is_Perfect_Square(50))\nprint(is_Perfect_Square(64))\nprint(is_Perfect_Square(65))\nprint(is_Perfect_Square(81))\nprint(is_Perfect_Square(82))\nprint(is_Perfect_Square(100))\nprint(is_Perfect_Square(101))\nprint(is_Perfect_Square(121))\nprint(is_Perfect_Square(122))\nprint(is_Perfect_Square(144))\nprint(is_Perfect_Square(145))\nprint(is_Perfect_Square(169))\nprint(is_Perfect_Square(170))\nprint(is_Perfect_Square(196))\nprint(is_Perfect_Square(197))\nprint(is_Perfect_Square(225))\nprint(is_Perfect_Square(226))\nprint(is_Perfect_Square(256))\nprint(is_Perfect_Square(257))\nprint(is_Perfect_Square(289))\nprint(is_Perfect_Square(290))\nprint(is_Perfect_Square(324))\nprint(is_Perfect_Square(325))\nprint(is_Perfect_Square(361))\nprint(is_Perfect_Square(362))\nprint(is_Perfect_Square(400))\nprint(is_Perfect_Square(40"}
{"ID": 204, "source": "MBPP:805", "prompt": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n\tmax_sum = 0\n\tmax_list = None\n\tfor l in lists:\n\t\tsum = 0\n\t\tfor e in l:\n\t\t\tsum += e\n\t\tif sum > max_sum:\n\t\t\tmax_sum = sum\n\t\t\tmax_list = l\n\treturn max_list\n\ndef max_sum_list_2(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_3(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_4(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_5(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_6(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_7(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_8(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_9(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_10(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_11(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_12(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_13(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_14(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_15(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_16(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_17(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_18(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_19(lists):\n\treturn max(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max_list\n\ndef max_sum_list_2(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_3(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_4(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_5(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_6(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_7(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_8(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_9(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_10(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_11(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_12(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_13(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_14(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_15(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_16(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_17(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_18(lists):\n\treturn max(lists, key=sum)\n\ndef max_sum_list_19(lists):"}
{"ID": 209, "source": "MBPP:810", "prompt": "\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\t", "predict": "<s> \"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\n\"\"\"\ndef count_variable(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_2(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_3(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_4(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_5(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_6(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_7(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_8(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_9(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_10(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_11(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_12(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_13(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_14(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_15(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_16(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_17(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_18(a,b,c,d):\n\treturn [a,b,c,d]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [a,b,c,d]\n\ndef count_variable_2(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_3(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_4(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_5(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_6(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_7(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_8(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_9(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_10(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_11(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_12(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_13(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_14(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_15(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_16(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_17(a,b,c,d):\n\treturn [a,b,c,d]\n\ndef count_variable_18(a,b,c,d):"}
{"ID": 211, "source": "MBPP:812", "prompt": "\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\t", "predict": "<s> \"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\ndef road_rd(street):\n\treturn street.replace('road', 'rd.')\n\n\ndef road_rd_2(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_3(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_4(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_5(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_6(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_7(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_8(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_9(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_10(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_11(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_12(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_13(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_14(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_15(street):\n\treturn street.replace('road', 'rd.').replace('", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn street.replace('road', 'rd.')\n\n\ndef road_rd_2(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_3(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_4(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_5(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_6(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_7(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_8(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_9(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_10(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_11(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_12(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_13(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_14(street):\n\treturn street.replace('road', 'rd.').replace('rd.rd.', 'rd.')\n\n\ndef road_rd_15(street):"}
{"ID": 212, "source": "MBPP:813", "prompt": "\"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find length of the string.\n\"\"\"\ndef string_length(str1):\n\treturn len(str1)\n\nprint(string_length(\"Hello\"))\n\n\"\"\"\nWrite a function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(num1, num2):\n\treturn num1 + num2\n\nprint(sum_of_two_numbers(10, 20))\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\ndef maximum_of_two_numbers(num1, num2):\n\tif num1 > num2:\n\t\treturn num1\n\telse:\n\t\treturn num2\n\nprint(maximum_of_two_numbers(10, 20))\n\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef maximum_of_three_numbers(num1, num2, num3):\n\tif num1 > num2 and num1 > num3:\n\t\treturn num1\n\telif num2 > num1 and num2 > num3:\n\t\treturn num2\n\telse:\n\t\treturn num3\n\nprint(maximum_of_three_numbers(10, 20, 30))\n\n\"\"\"\nWrite a function to find the maximum of four numbers.\n\"\"\"\ndef maximum_of_four_numbers(num1, num2, num3, num4):\n\tif num1 > num2 and num1 > num3 and num1 > num4:\n\t\treturn num1\n\telif num2 > num1 and num2 > num3 and num2 > num4:\n\t\treturn num2\n\telif num3 > num1 and num3 > num2 and num3 > num4:\n\t\treturn num3\n\telse:\n\t\treturn num4\n\nprint(maximum_of_four_numbers(10, 20, 30, 40))\n\n\"\"\"\nWrite a function to find the maximum of five numbers.\n\"\"\"\ndef maximum_of_five_numbers(num1, num2, num3, num4, num5):\n\tif num1 > num2 and num1 > num3 and num1 > num4 and num1 > num5:\n\t\treturn num1\n\telif", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(str1)\n\nprint(string_length(\"Hello\"))\n\n\"\"\"\nWrite a function to find the sum of two numbers.\n\"\"\"\ndef sum_of_two_numbers(num1, num2):\n\treturn num1 + num2\n\nprint(sum_of_two_numbers(10, 20))\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\ndef maximum_of_two_numbers(num1, num2):\n\tif num1 > num2:\n\t\treturn num1\n\telse:\n\t\treturn num2\n\nprint(maximum_of_two_numbers(10, 20))\n\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef maximum_of_three_numbers(num1, num2, num3):\n\tif num1 > num2 and num1 > num3:\n\t\treturn num1\n\telif num2 > num1 and num2 > num3:\n\t\treturn num2\n\telse:\n\t\treturn num3\n\nprint(maximum_of_three_numbers(10, 20, 30))\n\n\"\"\"\nWrite a function to find the maximum of four numbers.\n\"\"\"\ndef maximum_of_four_numbers(num1, num2, num3, num4):"}
{"ID": 213, "source": "MBPP:814", "prompt": "\"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n\treturn p*q\n\nprint(rombus_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base,height):\n\treturn (base*height)/2\n\nprint(triangle_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(radius):\n\treturn math.pi*radius**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(length,breadth):\n\treturn length*breadth\n\nprint(rectangle_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(side):\n\treturn side**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn (a+b)*h/2\n\nprint(trapezium_area(5,6,7))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(base,height):\n\treturn base*height\n\nprint(parallelogram_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(diagonal):\n\treturn (diagonal**2)/2\n\nprint(rhombus_area(5))\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(base,perpendicular):\n\treturn base*perpendicular\n\nprint(kite_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(side):\n\treturn (3*side**2)/(2*math.sqrt(3))\n\nprint(hexagon_area(5))\n\n\"\"\"\nWrite a function to find the area of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(rombus_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(base,height):\n\treturn (base*height)/2\n\nprint(triangle_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef circle_area(radius):\n\treturn math.pi*radius**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(length,breadth):\n\treturn length*breadth\n\nprint(rectangle_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(side):\n\treturn side**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn (a+b)*h/2\n\nprint(trapezium_area(5,6,7))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(base,height):\n\treturn base*height\n\nprint(parallelogram_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef rhombus_area(diagonal):\n\treturn (diagonal**2)/2\n\nprint(rhombus_area(5))\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef kite_area(base,perpendicular):\n\treturn base*perpendicular\n\nprint(kite_area(5,6))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef hexagon_area(side):\n\treturn (3*side**2)/(2*math.sqrt(3))\n\nprint(hexagon_area(5))\n\n\"\"\"\nWrite a function to find the area of"}
{"ID": 216, "source": "MBPP:817", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 or x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using list comprehension.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn [x for x in nums if x%m==0 or x%n==0]\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn filter(lambda x: x%m==0 or x%n==0,nums)\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn filter(lambda x: x%m==0 or x%n==0,nums)\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn filter(lambda x: x%m==0 or x%n==0,nums)\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using filter() and lambda", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "Write a function to find numbers divisible by m or n from a list of numbers using filter() and lambda"}
{"ID": 217, "source": "MBPP:818", "prompt": "\"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tcount += 1\n\treturn count\n\nprint(lower_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count upper case letters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tcount += 1\n\treturn count\n\nprint(upper_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count digits in a given string.\n\"\"\"\ndef digit_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nprint(digit_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count special characters in a given string.\n\"\"\"\ndef special_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isalpha():\n\t\t\tcount += 1\n\treturn count\n\nprint(special_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count vowels in a given string.\n\"\"\"\ndef vowel_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"aeiouAEIOU\":\n\t\t\tcount += 1\n\treturn count\n\nprint(vowel_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count consonants in a given string.\n\"\"\"\ndef consonant_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\":\n\t\t\tcount += 1\n\treturn count\n\nprint(consonant_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count words in a given string.\n\"\"\"\ndef word_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isalpha():\n\t\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nprint(digit_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count special characters in a given string.\n\"\"\"\ndef special_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isalpha():\n\t\t\tcount += 1\n\treturn count\n\nprint(special_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count vowels in a given string.\n\"\"\"\ndef vowel_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"aeiouAEIOU\":\n\t\t\tcount += 1\n\treturn count\n\nprint(vowel_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count consonants in a given string.\n\"\"\"\ndef consonant_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\":\n\t\t\tcount += 1\n\treturn count\n\nprint(consonant_ctr(\"hello world\"))\n\n\n\"\"\"\nWrite a python function to count words in a given string.\n\"\"\"\ndef word_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isalpha():\n\t\t"}
{"ID": 220, "source": "MBPP:821", "prompt": "\"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge two dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\n\treturn {**dict1,**dict2}\n\nprint(merge_dictionaries({'a':1,'b':2},{'c':3,'d':4}))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,6], 7))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of all the pairs that add up to a variable `target`.\n\"\"\"\ndef pair_sum(my_list, target):\n\treturn sum(x + y for x in my_list for y in my_list if x + y == target)\n\nprint(pair_sum([1,2,3,4,5,"}
{"ID": 221, "source": "MBPP:822", "prompt": "\"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\t", "predict": "<s> \"\"\"\nWrite a function to return true if the password is valid.\n\"\"\"\ndef pass_validity(p):\n\tif len(p) < 8:\n\t\treturn False\n\tif p.isdigit():\n\t\treturn False\n\tif p.isalpha():\n\t\treturn False\n\tif p.islower():\n\t\treturn False\n\tif p.isupper():\n\t\treturn False\n\treturn True\n\n\nprint(pass_validity(\"12345678\"))\nprint(pass_validity(\"12345678a\"))\nprint(pass_validity(\"12345678A\"))\nprint(pass_validity(\"12345678aA\"))\nprint(pass_validity(\"12345678aA1\"))\nprint(pass_validity(\"12345678aA12\"))\nprint(pass_validity(\"12345678aA123\"))\nprint(pass_validity(\"12345678aA1234\"))\nprint(pass_validity(\"12345678aA12345\"))\nprint(pass_validity(\"12345678aA123456\"))\nprint(pass_validity(\"12345678aA1234567\"))\nprint(pass_validity(\"12345678aA12345678\"))\nprint(pass_validity(\"12345678aA123456789\"))\nprint(pass_validity(\"12345678aA1234567890\"))\nprint(pass_validity(\"12345678aA12345678901\"))\nprint(pass_validity(\"12345678aA123456789012\"))\nprint(pass_validity(\"12345678aA1234567890123\"))\nprint(pass_validity(\"12345678aA123456789012", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(pass_validity(\"12345678\"))\nprint(pass_validity(\"12345678a\"))\nprint(pass_validity(\"12345678A\"))\nprint(pass_validity(\"12345678aA\"))\nprint(pass_validity(\"12345678aA1\"))\nprint(pass_validity(\"12345678aA12\"))\nprint(pass_validity(\"12345678aA123\"))\nprint(pass_validity(\"12345678aA1234\"))\nprint(pass_validity(\"12345678aA12345\"))\nprint(pass_validity(\"12345678aA123456\"))\nprint(pass_validity(\"12345678aA1234567\"))\nprint(pass_validity(\"12345678aA12345678\"))\nprint(pass_validity(\"12345678aA123456789\"))\nprint(pass_validity(\"12345678aA1234567890\"))\nprint(pass_validity(\"12345678aA12345678901\"))\nprint(pass_validity(\"12345678aA123456789012\"))\nprint(pass_validity(\"12345678aA1234567890123\"))\nprint(pass_validity(\"12345678aA123456789012"}
{"ID": 222, "source": "MBPP:823", "prompt": "\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given string starts with a substring using regex.\n\"\"\"\ndef check_substring(string, sample) : \n\treturn re.match(\"^\" + sample, string) != None\n\n\n# Test program\ntest_string = \"abcdef\"\ntest_substring = \"ab\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cd\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"ef\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"gh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcd\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cdef\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"efg\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcdg\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cdefg\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"efgh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcdgh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cdefgh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"efghij\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcdghij\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "test_string = \"abcdef\"\ntest_substring = \"ab\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cd\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"ef\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"gh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcd\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cdef\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"efg\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcdg\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cdefg\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"efgh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcdgh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"cdefgh\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"efghij\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring = \"abcdghij\"\nprint(check_substring(test_string, test_substring))\n\ntest_string = \"abcdef\"\ntest_substring"}
{"ID": 224, "source": "MBPP:825", "prompt": "\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\t", "predict": "<s> \"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n\treturn [nums[i] for i in list_index]\n\n\n# Test the function\nlist_index = [0, 2, 4]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, 12]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, 12, 14]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, 12, 14, 16]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n# Test the function\nlist_index = [0, 2, 4]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, 12]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, 12, 14]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, 12, 14, 16]\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(access_elements(nums, list_index))\n\n\n# Test the function\nlist_index = [0, 2, 4, 6, 8, 10, "}
{"ID": 225, "source": "MBPP:826", "prompt": "\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a, b, c)) \n\n\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a, b, c)) \n\n\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a, b, c)) \n\n\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a, b, c)) \n\n\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a, b, c)) \n\n\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n# Driver Code \na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a, b, c)) \n\n\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or c == a: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\""}
{"ID": 226, "source": "MBPP:827", "prompt": "\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t", "predict": "<s> \"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum([row[C] for row in list1])\n\n\ndef sum_column_2(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(row[C] for row in list1)\n\n\ndef sum_column_3(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_4(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_5(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_6(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_7(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_8(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:return: sum of column C\n\t\"\"\"\n\treturn sum([row[C] for row in list1])\n\n\ndef sum_column_2(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(row[C] for row in list1)\n\n\ndef sum_column_3(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_4(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_5(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_6(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_7(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map(lambda row: row[C], list1))\n\n\ndef sum_column_8(list1, C):\n\t\"\"\"\n\t:param list1: list of lists\n\t:param C: column to sum\n\t:return: sum of column C\n\t\"\"\"\n\treturn sum(map"}
{"ID": 227, "source": "MBPP:828", "prompt": "\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n\talpha = 0\n\tdigits = 0\n\tspl = 0\n\tfor i in string:\n\t\tif i.isalpha():\n\t\t\talpha += 1\n\t\telif i.isdigit():\n\t\t\tdigits += 1\n\t\telse:\n\t\t\tspl += 1\n\treturn alpha,digits,spl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 228, "source": "MBPP:829", "prompt": "\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\t", "predict": "<s> \"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\ndef second_frequent(input): \n\tcount = {}\n\tfor i in input:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\tmax1 = max(count.values())\n\tfor i in count:\n\t\tif count[i] == max1:\n\t\t\treturn i\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 231, "source": "MBPP:832", "prompt": "\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\t", "predict": "<s> \"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\n\"\"\"\ndef extract_max(input): \n\timport re\n\treturn max(re.findall(r'\\d+', input), key=int)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 232, "source": "MBPP:833", "prompt": "\"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\t", "predict": "<s> \"\"\"\nWrite a function to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict): \n\treturn list(dict.keys())\n\ndef get_key_2(dict): \n\treturn [key for key in dict]\n\ndef get_key_3(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_4(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_5(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_6(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_7(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_8(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_9(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_10(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_11(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_12(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_13(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_14(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_15(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_16(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_17(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_18(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_19(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_20(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_21(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(dict.keys())\n\ndef get_key_2(dict): \n\treturn [key for key in dict]\n\ndef get_key_3(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_4(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_5(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_6(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_7(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_8(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_9(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_10(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_11(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_12(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_13(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_14(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_15(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_16(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_17(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_18(dict): \n\treturn [key for key in dict.keys()]\n\ndef get_key_19(dict): \n\treturn [key for key in dict.iterkeys()]\n\ndef get_key_20(dict): \n\treturn [key for key in dict.viewkeys()]\n\ndef get_key_21("}
{"ID": 233, "source": "MBPP:834", "prompt": "\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif n == 0:\n\t\treturn []\n\tmatrix = [[0 for _ in range(n)] for _ in range(n)]\n\ttop, bottom, left, right = 0, n, 0, n\n\tnum = 1\n\twhile top < bottom and left < right:\n\t\tfor i in range(left, right):\n\t\t\tmatrix[top][i] = num\n\t\t\tnum += 1\n\t\ttop += 1\n\t\tfor i in range(top, bottom):\n\t\t\tmatrix[i][right-1] = num\n\t\t\tnum += 1\n\t\tright -= 1\n\t\tif top < bottom:\n\t\t\tfor i in range(right-1, left-1, -1):\n\t\t\t\tmatrix[bottom-1][i] = num\n\t\t\t\tnum += 1\n\t\t\tbottom -= 1\n\t\tif left < right:\n\t\t\tfor i in range(bottom-1, top-1, -1):\n\t\t\t\tmatrix[i][left] = num\n\t\t\t\tnum += 1\n\t\t\tleft += 1\n\treturn matrix\n\n\nif __name__ == '__main__':\n\tprint(generate_matrix(3))\n\tprint(generate_matrix(4))\n\tprint(generate_matrix(5))\n\tprint(generate_matrix(6))\n\tprint(generate_matrix(7))\n\tprint(generate_matrix(8))\n\tprint(generate_matrix(9))\n\tprint(generate_matrix(10))\n\tprint(generate_matrix(11))\n\tprint(generate_matrix(12))\n\tprint(generate_matrix(13))\n\tprint(generate_matrix(14))\n\tprint(generate_matrix(15))\n\tprint(generate_matrix(16))\n\tprint(generate_matrix(17))\n\tprint(generate_matrix(18))\n\tprint(generate_matrix(19))\n\tprint(generate_matrix(20))\n\tprint(generate_matrix(21))\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(generate_matrix(3))\n\tprint(generate_matrix(4))\n\tprint(generate_matrix(5))\n\tprint(generate_matrix(6))\n\tprint(generate_matrix(7))\n\tprint(generate_matrix(8))\n\tprint(generate_matrix(9))\n\tprint(generate_matrix(10))\n\tprint(generate_matrix(11))\n\tprint(generate_matrix(12))\n\tprint(generate_matrix(13))\n\tprint(generate_matrix(14))\n\tprint(generate_matrix(15))\n\tprint(generate_matrix(16))\n\tprint(generate_matrix(17))\n\tprint(generate_matrix(18))\n\tprint(generate_matrix(19))\n\tprint(generate_matrix(20))\n\tprint(generate_matrix(21))\n"}
{"ID": 234, "source": "MBPP:835", "prompt": "\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\nprint(slope(1,2,3,4))\n\n\"\"\"\nWrite a python function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2): "}
{"ID": 238, "source": "MBPP:839", "prompt": "\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key=lambda x: x[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 243, "source": "MBPP:844", "prompt": "\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k): \n\tif k <= n/2: \n\t\treturn 2*k-1\n\telse: \n\t\treturn 2*(k-n/2) \n\n# Driver code \nn = 10\nk = 5\nprint(get_Number(n, k)) \n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray in an array of integers.\n\"\"\"\ndef max_subarray_sum(numbers):\n    this_sum = max_global = 0\n    for i in range(len(numbers)):\n        this_sum = max(this_sum + numbers[i], numbers[i])\n        max_global = max(max_global, this_sum)\n    return max_global\n\n# Driver code\nnumbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_subarray_sum(numbers))\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray in an array of integers.\n\"\"\"\ndef max_subarray_sum(numbers):\n    this_sum = max_global = 0\n    for i in range(len(numbers)):\n        this_sum = max(this_sum + numbers[i], numbers[i])\n        max_global = max(max_global, this_sum)\n    return max_global\n\n# Driver code\nnumbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_subarray_sum(numbers))\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray in an array of integers.\n\"\"\"\ndef max_subarray_sum(numbers):\n    this_sum = max_global = 0\n    for i in range(len(numbers)):\n        this_sum = max(this_sum + numbers[i], numbers[i])\n        max_global = max(max_global, this_sum)\n    return max_global\n\n# Driver code\nnumbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray in an array of integers.\n\"\"\"\ndef max_subarray_sum(numbers):\n    this_sum = max_global = 0\n    for i in range(len(numbers)):\n        this_sum = max(this_sum + numbers[i], numbers[i])\n        max_global = max(max_global, this_sum)\n    return max_global\n\n# Driver code\nnumbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_subarray_sum(numbers))\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray in an array of integers.\n\"\"\"\ndef max_subarray_sum(numbers):\n    this_sum = max_global = 0\n    for i in range(len(numbers)):\n        this_sum = max(this_sum + numbers[i], numbers[i])\n        max_global = max(max_global, this_sum)\n    return max_global\n\n# Driver code\nnumbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_subarray_sum(numbers))\n\n\n\"\"\"\nWrite a python function to find the maximum sum of a subarray in an array of integers.\n\"\"\"\ndef max_subarray_sum(numbers):"}
{"ID": 246, "source": "MBPP:847", "prompt": "\"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t", "predict": "<s> \"\"\"\nWrite a python function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 247, "source": "MBPP:848", "prompt": "\"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n\treturn (base1+base2)*height/2\n\nprint(area_trapezium(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef area_circle(radius):\n\treturn math.pi*radius**2\n\nprint(area_circle(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base,height):\n\treturn base*height/2\n\nprint(area_triangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(length,width):\n\treturn length*width\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(base,height):\n\treturn base*height\n\nprint(area_parallelogram(3,4))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1,diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\nprint(area_rhombus(3,4))\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef area_kite(base,height):\n\treturn base*height\n\nprint(area_kite(3,4))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(side):\n\treturn 3*side**2\n\nprint(area_hexagon(3))\n\n\"\"\"\nWrite a function to find the area of an irregular polygon.\n\"\"\"\ndef area_irregular_polygon(sides,perimeter):\n\treturn perimeter*sides/4\n\nprint(area_irregular_polygon(5,10))\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(area_trapezium(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\ndef area_circle(radius):\n\treturn math.pi*radius**2\n\nprint(area_circle(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base,height):\n\treturn base*height/2\n\nprint(area_triangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(length,width):\n\treturn length*width\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(base,height):\n\treturn base*height\n\nprint(area_parallelogram(3,4))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(diagonal1,diagonal2):\n\treturn (diagonal1*diagonal2)/2\n\nprint(area_rhombus(3,4))\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef area_kite(base,height):\n\treturn base*height\n\nprint(area_kite(3,4))\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(side):\n\treturn 3*side**2\n\nprint(area_hexagon(3))\n\n\"\"\"\nWrite a function to find the area of an irregular polygon.\n\"\"\"\ndef area_irregular_polygon(sides,perimeter):"}
{"ID": 248, "source": "MBPP:849", "prompt": "\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N): \n\tsum = 0\n\tfor i in range(1, N + 1): \n\t\tif N % i == 0: \n\t\t\tsum += i \n\treturn sum \n\n# Driver Code \nN = 12\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 15\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 17\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 19\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 23\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 29\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 31\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 37\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 41\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 43\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 47\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 53\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 59\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 61\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 67\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 71\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 73\nprint(\"Sum of all prime divis", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nN = 12\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 15\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 17\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 19\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 23\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 29\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 31\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 37\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 41\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 43\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 47\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 53\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 59\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 61\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 67\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 71\nprint(\"Sum of all prime divisors of\", N, \"is\", Sum(N)) \n\nN = 73\nprint(\"Sum of all prime divis"}
{"ID": 252, "source": "MBPP:853", "prompt": "\"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find sum of odd factors of a number.\n\"\"\"\ndef sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n + 1): \n\t\tif (n % i == 0) and (i % 2 != 0): \n\t\t\tsum += i \n\treturn sum \n\n# Driver Code \nn = 12\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 13\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 14\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 15\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 16\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 17\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 18\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 19\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 20\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 21\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 22\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 23\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 24\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 25\nprint(\"Sum of odd factors of\", n, \"is\", sum_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = 12\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 13\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 14\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 15\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 16\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 17\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 18\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 19\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 20\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 21\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 22\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 23\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 24\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) \n\nn = 25\nprint(\"Sum of odd factors of\", n, \"is\", sum_"}
{"ID": 254, "source": "MBPP:855", "prompt": "\"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x): \n\tif x%2==0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n# Driver Code \nx = 10\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 11\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 12\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 13\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 14\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 15\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 16\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 17\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 18\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 19\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 20\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 21\nif check_Even_Parity(x): \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\n# Driver Code \nx = 10\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 11\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 12\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 13\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 14\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 15\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 16\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 17\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 18\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 19\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 20\nif check_Even_Parity(x): \n\tprint(\"Even Parity\")\nelse: \n\tprint(\"Odd Parity\")\n\nx = 21\nif check_Even_Parity(x): \n\t"}
{"ID": 255, "source": "MBPP:856", "prompt": "\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr,n) : \n\t# Your code here\n\tcount = 0\n\tfor i in range(n):\n\t\tif arr[i] == 1:\n\t\t\tcount += 1\n\tif count == 0:\n\t\treturn 0\n\tif count == 1:\n\t\treturn 1\n\tif count == 2:\n\t\treturn 2\n\tif count == 3:\n\t\treturn 3\n\tif count == 4:\n\t\treturn 4\n\tif count == 5:\n\t\treturn 5\n\tif count == 6:\n\t\treturn 6\n\tif count == 7:\n\t\treturn 7\n\tif count == 8:\n\t\treturn 8\n\tif count == 9:\n\t\treturn 9\n\tif count == 10:\n\t\treturn 10\n\tif count == 11:\n\t\treturn 11\n\tif count == 12:\n\t\treturn 12\n\tif count == 13:\n\t\treturn 13\n\tif count == 14:\n\t\treturn 14\n\tif count == 15:\n\t\treturn 15\n\tif count == 16:\n\t\treturn 16\n\tif count == 17:\n\t\treturn 17\n\tif count == 18:\n\t\treturn 18\n\tif count == 19:\n\t\treturn 19\n\tif count == 20:\n\t\treturn 20\n\tif count == 21:\n\t\treturn 21\n\tif count == 22:\n\t\treturn 22\n\tif count == 23:\n\t\treturn 23\n\tif count == 24:\n\t\treturn 24\n\tif count == 25:\n\t\treturn 25\n\tif count == 26:\n\t\treturn 26\n\tif count == 27:\n\t\treturn 27\n\tif count == 28:\n\t\treturn 28\n\tif count == 29:\n\t\treturn 29\n\tif count == 30:\n\t\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tcount += 1\n\tif count == 0:\n\t\treturn 0\n\tif count == 1:\n\t\treturn 1\n\tif count == 2:\n\t\treturn 2\n\tif count == 3:\n\t\treturn 3\n\tif count == 4:\n\t\treturn 4\n\tif count == 5:\n\t\treturn 5\n\tif count == 6:\n\t\treturn 6\n\tif count == 7:\n\t\treturn 7\n\tif count == 8:\n\t\treturn 8\n\tif count == 9:\n\t\treturn 9\n\tif count == 10:\n\t\treturn 10\n\tif count == 11:\n\t\treturn 11\n\tif count == 12:\n\t\treturn 12\n\tif count == 13:\n\t\treturn 13\n\tif count == 14:\n\t\treturn 14\n\tif count == 15:\n\t\treturn 15\n\tif count == 16:\n\t\treturn 16\n\tif count == 17:\n\t\treturn 17\n\tif count == 18:\n\t\treturn 18\n\tif count == 19:\n\t\treturn 19\n\tif count == 20:\n\t\treturn 20\n\tif count == 21:\n\t\treturn 21\n\tif count == 22:\n\t\treturn 22\n\tif count == 23:\n\t\treturn 23\n\tif count == 24:\n\t\treturn 24\n\tif count == 25:\n\t\treturn 25\n\tif count == 26:\n\t\treturn 26\n\tif count == 27:\n\t\treturn 27\n\tif count == 28:\n\t\treturn 28\n\tif count == 29:\n\t\treturn 29\n\tif count == 30:"}
{"ID": 256, "source": "MBPP:857", "prompt": "\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):\n\treturn [[x] for x in list1]\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n\treturn list(map(lambda x: [x], list1))\n\nprint(listify_list([\"a\", \"b\", \"c\"]))\n\n\"\"\"\nWrite a function to list out the list of given strings individually using list comprehension.\n\"\"\"\ndef listify_list(list1):"}
{"ID": 257, "source": "MBPP:858", "prompt": "\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\t", "predict": "<s> \"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count ** 2\n\n\ndef count_list_2(input_list):\n\treturn len([i for i in input_list if isinstance(i, list)]) ** 2\n\n\ndef count_list_3(input_list):\n\treturn sum(1 for i in input_list if isinstance(i, list)) ** 2\n\n\ndef count_list_4(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_5(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_6(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_7(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_8(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_9(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_10(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_11(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_12(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_13(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef count_list_2(input_list):\n\treturn len([i for i in input_list if isinstance(i, list)]) ** 2\n\n\ndef count_list_3(input_list):\n\treturn sum(1 for i in input_list if isinstance(i, list)) ** 2\n\n\ndef count_list_4(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_5(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_6(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_7(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_8(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_9(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_10(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_11(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_12(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input_list))) ** 2\n\n\ndef count_list_13(input_list):\n\treturn len(list(filter(lambda x: isinstance(x, list), input"}
{"ID": 260, "source": "MBPP:861", "prompt": "\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\ndef anagram_lambda(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_2(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_3(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_4(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_5(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_6(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_7(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_8(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_9(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_10(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_11(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_12(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_13(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_14(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_2(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_3(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_4(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_5(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_6(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_7(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_8(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_9(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_10(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_11(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_12(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_13(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_lambda_14(texts,str):\n\treturn list(filter(lambda x: sorted(x) == sorted(str), texts))\n\n\ndef anagram_"}
{"ID": 261, "source": "MBPP:862", "prompt": "\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\n\"\"\"\ndef n_common_words(text,n):\n\t\"\"\"\n\t:param text: str\n\t:param n: int\n\t:return: list of tuples\n\t\"\"\"\n\twords = text.split()\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\treturn sorted(word_count.items(),key=lambda x: x[1],reverse=True)[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 262, "source": "MBPP:863", "prompt": "\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \n\tif n == 0: \n\t\treturn 0\n\tmax_len = 1\n\tfor i in range(n-1): \n\t\tif arr[i+1] - arr[i] == 1: \n\t\t\tcurr_len = 2\n\t\t\tj = i + 2\n\t\t\twhile j < n and arr[j] - arr[j-1] == 1: \n\t\t\t\tcurr_len += 1\n\t\t\t\tj += 1\n\t\t\tmax_len = max(max_len, curr_len)\n\treturn max_len\n\n\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nn = len(arr)\nprint(find", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nn = len(arr)\nprint(find"}
{"ID": 265, "source": "MBPP:866", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n\tmonthname = monthname2.lower()\n\tif monthname == \"january\" or monthname == \"march\" or monthname == \"may\" or monthname == \"july\" or monthname == \"august\" or monthname == \"october\" or monthname == \"december\":\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 267, "source": "MBPP:868", "prompt": "\"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a): \n\treturn len(a.split()[-1]) \n\nprint(length_Of_Last_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(a.split()[-1]) \n\nprint(length_Of_Last_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len)) \n\nprint(length_Of_Longest_Word(\"Hello World\"))\n\n\n\"\"\"\nWrite a python function to find the length of the longest word in a given string.\n\"\"\"\ndef length_Of_Longest_Word(a): \n\treturn len(max(a.split(), key=len"}
{"ID": 268, "source": "MBPP:869", "prompt": "\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n\tnew_list = []\n\tfor sublist in list1:\n\t\tif leftrange <= sublist[0] <= rigthrange:\n\t\t\tnew_list.append(sublist)\n\treturn new_list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 269, "source": "MBPP:870", "prompt": "\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, nums))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(filter(lambda x: x > 0, nums))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n\nprint(sum_positivenum([-1, -2, -3, -4, -5]))\n\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using filter() and map() functions.\n\"\"\"\ndef sum_positivenum(nums):\n\treturn sum(filter(lambda x: x > 0, map(lambda x: x, nums)))\n"}
{"ID": 270, "source": "MBPP:871", "prompt": "\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2): \n\tif len(string1) != len(string2):\n\t\treturn False\n\treturn string2 in (string1 + string1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 271, "source": "MBPP:872", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2): \n\tif len(list1) > len(list2):\n\t\treturn False\n\tfor i in range(len(list1)):\n\t\tif list1[i] != list2[i]:\n\t\t\treturn False\n\treturn True\n\ndef check_subset_recursive(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive(list1[1:],list2[1:])\n\ndef check_subset_recursive_2(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive_2(list1[1:],list2[1:])\n\ndef check_subset_recursive_3(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive_3(list1[1:],list2[1:])\n\ndef check_subset_recursive_4(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive_4(list1[1:],list2[1:])\n\ndef check_subset_recursive_5(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(list1) > len(list2):\n\t\treturn False\n\tfor i in range(len(list1)):\n\t\tif list1[i] != list2[i]:\n\t\t\treturn False\n\treturn True\n\ndef check_subset_recursive(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive(list1[1:],list2[1:])\n\ndef check_subset_recursive_2(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive_2(list1[1:],list2[1:])\n\ndef check_subset_recursive_3(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive_3(list1[1:],list2[1:])\n\ndef check_subset_recursive_4(list1,list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_recursive_4(list1[1:],list2[1:])"}
{"ID": 273, "source": "MBPP:874", "prompt": "\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n\treturn str1 in str2\n\nprint(check_Concat(\"abcd\",\"abcdef\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_Concat(\"abcd\",\"abcdef\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\"abcdefg\"))\nprint(check_Concat(\"abcd\",\""}
{"ID": 274, "source": "MBPP:875", "prompt": "\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n\t\"\"\"\n\t:param test_list: list of tuples\n\t:return: minimum difference\n\t\"\"\"\n\tmin_diff = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_diff = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 276, "source": "MBPP:877", "prompt": "\"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to sort the given string.\n\"\"\"\ndef sort_String(str) : \n\treturn sorted(str)\n\nprint(sort_String(\"hello\"))\n\n\n\"\"\"\nWrite a python function to find the maximum and minimum of three numbers.\n\"\"\"\ndef max_min(a, b, c) : \n\treturn max(a, b, c), min(a, b, c)\n\nprint(max_min(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using conditional statements.\n\"\"\"\ndef max_conditional(a, b, c) : \n\tif a > b and a > c : \n\t\treturn a\n\telif b > a and b > c : \n\t\treturn b\n\telse : \n\t\treturn c\n\nprint(max_conditional(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using ternary operator.\n\"\"\"\ndef max_ternary(a, b, c) : \n\treturn a if a > b and a > c else b if b > a and b > c else c\n\nprint(max_ternary(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using nested conditional statements.\n\"\"\"\ndef max_nested(a, b, c) : \n\tif a > b : \n\t\treturn a if a > c else c\n\telse : \n\t\treturn b if b > c else c\n\nprint(max_nested(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using nested ternary operator.\n\"\"\"\ndef max_nested_ternary(a, b, c) : \n\treturn a if a > b else b if b > c else c\n\nprint(max_nested_ternary(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using nested conditional statements and ternary operator.\n\"\"\"\ndef max_nested_conditional_ternary(a, b, c) : \n\tif a > b : \n\t\treturn a if a > c else c\n\telse : ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn c\n\nprint(max_conditional(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using ternary operator.\n\"\"\"\ndef max_ternary(a, b, c) : \n\treturn a if a > b and a > c else b if b > a and b > c else c\n\nprint(max_ternary(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using nested conditional statements.\n\"\"\"\ndef max_nested(a, b, c) : \n\tif a > b : \n\t\treturn a if a > c else c\n\telse : \n\t\treturn b if b > c else c\n\nprint(max_nested(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using nested ternary operator.\n\"\"\"\ndef max_nested_ternary(a, b, c) : \n\treturn a if a > b else b if b > c else c\n\nprint(max_nested_ternary(1, 2, 3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers using nested conditional statements and ternary operator.\n\"\"\"\ndef max_nested_conditional_ternary(a, b, c) : \n\tif a > b : "}
{"ID": 278, "source": "MBPP:879", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = re.compile(r'a.*b')\n\treturn pattern.match(text)\n\n\ndef main():\n\tprint(text_match('ab'))\n\tprint(text_match('aab'))\n\tprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tprint(text_match('aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"ID": 281, "source": "MBPP:882", "prompt": "\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(b,h):\n\treturn 2*(b+h)\n\nprint(parallelogram_perimeter(10,5))\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\nimport math\n\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to calculate area of a trapezium.\n\"\"\"\ndef trapezium_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\nprint(trapezium_area(10,5,5))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn d1*d2\n\nprint(rhombus_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn (b*h)/2\n\nprint(kite_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a pentagon.\n\"\"\"\ndef pentagon_area(p):\n\treturn (5*p**2)/(4*math.tan(math.pi/5))\n\nprint(pentagon_area(10))\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*(b+h)\n\nprint(parallelogram_perimeter(10,5))\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\nimport math\n\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to calculate area of a trapezium.\n\"\"\"\ndef trapezium_area(b1,b2,h):\n\treturn (b1+b2)*h/2\n\nprint(trapezium_area(10,5,5))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn d1*d2\n\nprint(rhombus_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn (b*h)/2\n\nprint(kite_area(10,5))\n\n\"\"\"\nWrite a function to calculate area of a pentagon."}
{"ID": 282, "source": "MBPP:883", "prompt": "\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))\n\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using filter() and lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: x%m==0 and x%n==0,nums))\n\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],3,5))"}
{"ID": 283, "source": "MBPP:884", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn (n & (2**l-1)) == (2**l-1) and (n & (2**r)) == 0\n\n\nn = 10\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 5\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 7\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 9\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 10\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 11\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 12\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 13\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "n = 10\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 5\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 7\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 9\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 10\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 11\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 12\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 13\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr"}
{"ID": 284, "source": "MBPP:885", "prompt": "\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):          \n\tif len(str1)!=len(str2):\n\t\treturn False\n\telse:\n\t\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 285, "source": "MBPP:886", "prompt": "\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\t", "predict": "<s> \"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n\treturn sum(numbers)/len(numbers)\n\nprint(sum_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum number in a list.\n\"\"\"\ndef max_num(numbers):\n\treturn max(numbers)\n\nprint(max_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the minimum number in a list.\n\"\"\"\ndef min_num(numbers):\n\treturn min(numbers)\n\nprint(min_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_all(numbers):\n\treturn sum(numbers)\n\nprint(sum_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the average of all the numbers in a list.\n\"\"\"\ndef avg_all(numbers):\n\treturn sum(numbers)/len(numbers)\n\nprint(avg_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the product of all the numbers in a list.\n\"\"\"\ndef prod_all(numbers):\n\treturn reduce(lambda x,y: x*y, numbers)\n\nprint(prod_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum number in a list.\n\"\"\"\ndef max_num(numbers):\n\treturn max(numbers)\n\nprint(max_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the minimum number in a list.\n\"\"\"\ndef min_num(numbers):\n\treturn min(numbers)\n\nprint(min_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_all(numbers):\n\treturn sum(numbers)\n\nprint(sum_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the average of all the numbers in a list.\n\"\"\"\ndef avg_all(numbers):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(numbers)/len(numbers)\n\nprint(sum_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum number in a list.\n\"\"\"\ndef max_num(numbers):\n\treturn max(numbers)\n\nprint(max_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the minimum number in a list.\n\"\"\"\ndef min_num(numbers):\n\treturn min(numbers)\n\nprint(min_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_all(numbers):\n\treturn sum(numbers)\n\nprint(sum_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the average of all the numbers in a list.\n\"\"\"\ndef avg_all(numbers):\n\treturn sum(numbers)/len(numbers)\n\nprint(avg_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the product of all the numbers in a list.\n\"\"\"\ndef prod_all(numbers):\n\treturn reduce(lambda x,y: x*y, numbers)\n\nprint(prod_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the maximum number in a list.\n\"\"\"\ndef max_num(numbers):\n\treturn max(numbers)\n\nprint(max_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the minimum number in a list.\n\"\"\"\ndef min_num(numbers):\n\treturn min(numbers)\n\nprint(min_num([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the sum of all the numbers in a list.\n\"\"\"\ndef sum_all(numbers):\n\treturn sum(numbers)\n\nprint(sum_all([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to find the average of all the numbers in a list.\n\"\"\"\ndef avg_all(numbers):"}
{"ID": 288, "source": "MBPP:889", "prompt": "\"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\t", "predict": "<s> \"\"\"\nWrite a function to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n\treturn [list(reversed(l)) for l in lists]\n\ndef reverse_list_lists_2(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_3(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_4(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_5(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_6(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_7(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_8(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_9(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_10(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_11(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_12(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_13(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_14(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_15(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_16(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_17(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_18(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_19(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [list(reversed(l)) for l in lists]\n\ndef reverse_list_lists_2(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_3(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_4(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_5(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_6(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_7(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_8(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_9(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_10(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_11(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_12(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_13(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_14(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_15(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_16(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_17(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_18(lists):\n\treturn [l[::-1] for l in lists]\n\ndef reverse_list_lists_19("}
{"ID": 289, "source": "MBPP:890", "prompt": "\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \n\tfor i in range(n) : \n\t\tif arr1[i] != arr2[i] : \n\t\t\treturn i \n\treturn -1\n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr1) \nprint(find_Extra(arr1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn i \n\treturn -1\n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr1) \nprint(find_Extra(arr1,arr2,n)) \n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] "}
{"ID": 291, "source": "MBPP:892", "prompt": "\"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove multiple spaces in a string.\n\"\"\"\ndef remove_spaces(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_2(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_3(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_4(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_5(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_6(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_7(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_8(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_9(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_10(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_11(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_12(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_13(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_14(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_15(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_16(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_17(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_18(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_19(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_20(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_21(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_22(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ' '.join(text.split())\n\n\ndef remove_spaces_2(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_3(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_4(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_5(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_6(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_7(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_8(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_9(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_10(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_11(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_12(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_13(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_14(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_15(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_16(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_17(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_18(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_19(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_20(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_21(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces_22(text):\n\treturn ' '.join(text.split())\n\n\ndef remove_spaces"}
{"ID": 294, "source": "MBPP:895", "prompt": "\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(A) == 0:\n\t\treturn 0\n\tmax_sum = A[0]\n\tfor i in range(1, len(A)):\n\t\tif A[i] > A[i-1] + A[i]:\n\t\t\tmax_sum = max(max_sum, A[i])\n\t\telse:\n\t\t\tmax_sum = max(max_sum, A[i] + A[i-1])\n\treturn max_sum\n\n\nif __name__ == '__main__':\n\tprint(max_sum_subseq([1, 2, 3, 4, 5]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(max_sum_subseq([1, 2, 3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(max_sum_subseq([1, 2, 3, 4, 5]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(max_sum_subseq([1, 2, 3,"}
{"ID": 295, "source": "MBPP:896", "prompt": "\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef sort_list_last(tuples):\n\treturn sorted(tuples, key=lambda x: x[-1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 297, "source": "MBPP:898", "prompt": "\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\ndef extract_elements(numbers, n):\n\t\"\"\"\n\t:type numbers: List[int]\n\t:type n: int\n\t:rtype: List[int]\n\t\"\"\"\n\tif n == 0:\n\t\treturn []\n\tif n == 1:\n\t\treturn [numbers[0]]\n\tif n == len(numbers):\n\t\treturn numbers\n\tif n > len(numbers):\n\t\treturn numbers\n\tresult = []\n\tfor i in range(n):\n\t\tresult.append(numbers[i])\n\treturn result\n\n\ndef main():\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [1, 2, 3, 4]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [1, 2, 3, 4, 5]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [1, 2, 3, 4, 5, 6]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == [1, 2, 3, 4, 5, 6, 7]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [1, 2, 3, 4, 5, 6, 7, 8]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [1, 2, 3, 4]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [1, 2, 3, 4, 5]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [1, 2, 3, 4, 5, 6]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == [1, 2, 3, 4, 5, 6, 7]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [1, 2, 3, 4, 5, 6, 7, 8]\n\tassert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"ID": 299, "source": "MBPP:900", "prompt": "\"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\t", "predict": "<s> \"\"\"\nWrite a function where a string will start with a specific number.\n\"\"\"\ndef match_num(string):\n\treturn string.startswith(\"123\")\n\nprint(match_num(\"123456\"))\nprint(match_num(\"1234567\"))\nprint(match_num(\"12345678\"))\nprint(match_num(\"123456789\"))\nprint(match_num(\"1234567890\"))\nprint(match_num(\"12345678901\"))\nprint(match_num(\"123456789012\"))\nprint(match_num(\"1234567890123\"))\nprint(match_num(\"12345678901234\"))\nprint(match_num(\"123456789012345\"))\nprint(match_num(\"1234567890123456\"))\nprint(match_num(\"12345678901234567\"))\nprint(match_num(\"123456789012345678\"))\nprint(match_num(\"1234567890123456789\"))\nprint(match_num(\"12345678901234567890\"))\nprint(match_num(\"123456789012345678901\"))\nprint(match_num(\"1234567890123456789012\"))\nprint(match_num(\"12345678901234567890123\"))\nprint(match_num(\"123456789012345678901234\"))\nprint(match_num(\"1234567890123456789012345\"))\nprint(match_num(\"123456789012345678901234", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(match_num(\"123456\"))\nprint(match_num(\"1234567\"))\nprint(match_num(\"12345678\"))\nprint(match_num(\"123456789\"))\nprint(match_num(\"1234567890\"))\nprint(match_num(\"12345678901\"))\nprint(match_num(\"123456789012\"))\nprint(match_num(\"1234567890123\"))\nprint(match_num(\"12345678901234\"))\nprint(match_num(\"123456789012345\"))\nprint(match_num(\"1234567890123456\"))\nprint(match_num(\"12345678901234567\"))\nprint(match_num(\"123456789012345678\"))\nprint(match_num(\"1234567890123456789\"))\nprint(match_num(\"12345678901234567890\"))\nprint(match_num(\"123456789012345678901\"))\nprint(match_num(\"1234567890123456789012\"))\nprint(match_num(\"12345678901234567890123\"))\nprint(match_num(\"123456789012345678901234\"))\nprint(match_num(\"1234567890123456789012345\"))\nprint(match_num(\"123456789012345678901234"}
{"ID": 307, "source": "MBPP:908", "prompt": "\"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n): \n\tfor i in range(n): \n\t\tif (arr[i] == i): \n\t\t\treturn i \n\treturn -1\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn i \n\treturn -1\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nn = len(arr) \nprint(find_fixed_point(arr, n)) \n\narr = [1, 2,"}
{"ID": 308, "source": "MBPP:909", "prompt": "\"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tif num < 0:\n\t\treturn -1\n\telif num == 0:\n\t\treturn 0\n\telse:\n\t\tnum_str = str(num)\n\t\tnum_len = len(num_str)\n\t\tfor i in range(num_len):\n\t\t\tif num_str[i] != num_str[num_len - 1 - i]:\n\t\t\t\tbreak\n\t\tif i == num_len - 1:\n\t\t\treturn num\n\t\telse:\n\t\t\tfor j in range(i + 1, num_len):\n\t\t\t\tif num_str[i] != num_str[num_len - 1 - j]:\n\t\t\t\t\tbreak\n\t\t\tif j == num_len - 1:\n\t\t\t\treturn num\n\t\t\telse:\n\t\t\t\tfor k in range(i + 1, j + 1):\n\t\t\t\t\tif num_str[k] != num_str[num_len - 1 - k]:\n\t\t\t\t\t\tbreak\n\t\t\t\tif k == j:\n\t\t\t\t\treturn num\n\t\t\t\telse:\n\t\t\t\t\tfor l in range(i + 1, k + 1):\n\t\t\t\t\t\tif num_str[l] != num_str[num_len - 1 - l]:\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\tif l == k:\n\t\t\t\t\t\treturn num\n\t\t\t\t\telse:\n\t\t\t\t\t\tfor m in range(i + 1, l + 1):\n\t\t\t\t\t\t\tif num_str[m] != num_str[num_len - 1 - m]:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tif m == l:\n\t\t\t\t\t\t\treturn num\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tfor n in range(i + 1, m + 1):\n\t\t\t\t\t\t\t\tif", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tfor i in range(num_len):\n\t\t\tif num_str[i] != num_str[num_len - 1 - i]:\n\t\t\t\tbreak\n\t\tif i == num_len - 1:\n\t\t\treturn num\n\t\telse:\n\t\t\tfor j in range(i + 1, num_len):\n\t\t\t\tif num_str[i] != num_str[num_len - 1 - j]:\n\t\t\t\t\tbreak\n\t\t\tif j == num_len - 1:\n\t\t\t\treturn num\n\t\t\telse:\n\t\t\t\tfor k in range(i + 1, j + 1):\n\t\t\t\t\tif num_str[k] != num_str[num_len - 1 - k]:\n\t\t\t\t\t\tbreak\n\t\t\t\tif k == j:\n\t\t\t\t\treturn num\n\t\t\t\telse:\n\t\t\t\t\tfor l in range(i + 1, k + 1):\n\t\t\t\t\t\tif num_str[l] != num_str[num_len - 1 - l]:\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\tif l == k:\n\t\t\t\t\t\treturn num\n\t\t\t\t\telse:\n\t\t\t\t\t\tfor m in range(i + 1, l + 1):\n\t\t\t\t\t\t\tif num_str[m] != num_str[num_len - 1 - m]:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tif m == l:\n\t\t\t\t\t\t\treturn num\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tfor n in range(i + 1, m + 1):\n\t\t\t\t\t\t\t\tif"}
{"ID": 309, "source": "MBPP:910", "prompt": "\"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\t", "predict": "<s> \"\"\"\nWrite a function to validate a gregorian date.\n\"\"\"\ndef check_date(m, d, y):\n\tif m < 1 or m > 12:\n\t\treturn False\n\tif d < 1 or d > 31:\n\t\treturn False\n\tif y < 1 or y > 9999:\n\t\treturn False\n\treturn True\n\ndef validate_date(date_string):\n\tdate_list = date_string.split('-')\n\tif len(date_list) != 3:\n\t\treturn False\n\tm = int(date_list[0])\n\td = int(date_list[1])\n\ty = int(date_list[2])\n\treturn check_date(m, d, y)\n\nprint(validate_date('12-31-2015'))\nprint(validate_date('02-29-2015'))\nprint(validate_date('02-29-2016'))\nprint(validate_date('02-29-2017'))\nprint(validate_date('02-29-2018'))\nprint(validate_date('02-29-2019'))\nprint(validate_date('02-29-2020'))\nprint(validate_date('02-29-2021'))\nprint(validate_date('02-29-2022'))\nprint(validate_date('02-29-2023'))\nprint(validate_date('02-29-2024'))\nprint(validate_date('02-29-2025'))\nprint(validate_date('02-29-2026'))\nprint(validate_date('02-29-2027'))\nprint(validate_date('02-29-2028'))\nprint(validate_date('02-29-2029'))\nprint(validate_date('02-29-2030'))\nprint(validate_date('02-29-2031'))\nprint(validate_date('02-29-2032'))\nprint(validate_date('02-29-203", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(validate_date('12-31-2015'))\nprint(validate_date('02-29-2015'))\nprint(validate_date('02-29-2016'))\nprint(validate_date('02-29-2017'))\nprint(validate_date('02-29-2018'))\nprint(validate_date('02-29-2019'))\nprint(validate_date('02-29-2020'))\nprint(validate_date('02-29-2021'))\nprint(validate_date('02-29-2022'))\nprint(validate_date('02-29-2023'))\nprint(validate_date('02-29-2024'))\nprint(validate_date('02-29-2025'))\nprint(validate_date('02-29-2026'))\nprint(validate_date('02-29-2027'))\nprint(validate_date('02-29-2028'))\nprint(validate_date('02-29-2029'))\nprint(validate_date('02-29-2030'))\nprint(validate_date('02-29-2031'))\nprint(validate_date('02-29-2032'))\nprint(validate_date('02-29-203"}
{"ID": 310, "source": "MBPP:911", "prompt": "\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(nums) < 3:\n\t\treturn 0\n\tnums.sort()\n\treturn nums[-1] * nums[-2] * nums[-3]\n\n\nif __name__ == '__main__':\n\tprint(maximum_product([1, 2, 3, 4]))\n\tprint(maximum_product([1, 2, 3, 4, 5]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(maximum_product([1, 2, 3, 4]))\n\tprint(maximum_product([1, 2, 3, 4, 5]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n\tprint(maximum_product([1, 2, 3, 4, 5, 6, 7, "}
{"ID": 313, "source": "MBPP:914", "prompt": "\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):  \n\tif len(s)%2 != 0:  \n\t\treturn False  \n\tfor i in range(0, len(s), 2):  \n\t\tif s[i] == s[i+1]:  \n\t\t\treturn False  \n\treturn True  \n  \ns = \"abcd\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abba\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"ababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"ababababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abababababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abababababab", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "s = \"abcd\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abba\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"ababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"ababababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  \ns = \"abababababab\"  \nif is_Two_Alter(s):  \n\tprint(\"The given string is made up of two alternating characters\")  \nelse:  \n\tprint(\"The given string is not made up of two alternating characters\")  \n  "}
{"ID": 314, "source": "MBPP:915", "prompt": "\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\n\"\"\"\ndef rearrange_numbs(array_nums):\n\t\"\"\"\n\t:param array_nums:\n\t:return:\n\t\"\"\"\n\treturn sorted(array_nums, key=lambda x: x if x >= 0 else 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\treturn sorted(array_nums, key=lambda x: x if x >= 0 else 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"ID": 318, "source": "MBPP:919", "prompt": "\"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\t", "predict": "<s> \"\"\"\nWrite a python function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n\tresult = 1\n\tfor item in items:\n\t\tresult *= item\n\treturn result\n\nprint(multiply_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the sum of all items in the list.\n\"\"\"\ndef sum_list(items):\n\tresult = 0\n\tfor item in items:\n\t\tresult += item\n\treturn result\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the product of all items in the list.\n\"\"\"\ndef product_list(items):\n\tresult = 1\n\tfor item in items:\n\t\tresult *= item\n\treturn result\n\nprint(product_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the maximum value in the list.\n\"\"\"\ndef max_list(items):\n\tresult = items[0]\n\tfor item in items:\n\t\tif item > result:\n\t\t\tresult = item\n\treturn result\n\nprint(max_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the minimum value in the list.\n\"\"\"\ndef min_list(items):\n\tresult = items[0]\n\tfor item in items:\n\t\tif item < result:\n\t\t\tresult = item\n\treturn result\n\nprint(min_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the average value in the list.\n\"\"\"\ndef average_list(items):\n\tresult = sum(items) / len(items)\n\treturn result\n\nprint(average_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the median value in the list.\n\"\"\"\ndef median_list(items):\n\titems.sort()\n\tif len(items) % 2 == 0:\n\t\tresult = (items[len(items) // 2 - 1] + items[len(items)", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tresult = 1\n\tfor item in items:\n\t\tresult *= item\n\treturn result\n\nprint(multiply_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the sum of all items in the list.\n\"\"\"\ndef sum_list(items):\n\tresult = 0\n\tfor item in items:\n\t\tresult += item\n\treturn result\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the product of all items in the list.\n\"\"\"\ndef product_list(items):\n\tresult = 1\n\tfor item in items:\n\t\tresult *= item\n\treturn result\n\nprint(product_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the maximum value in the list.\n\"\"\"\ndef max_list(items):\n\tresult = items[0]\n\tfor item in items:\n\t\tif item > result:\n\t\t\tresult = item\n\treturn result\n\nprint(max_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the minimum value in the list.\n\"\"\"\ndef min_list(items):\n\tresult = items[0]\n\tfor item in items:\n\t\tif item < result:\n\t\t\tresult = item\n\treturn result\n\nprint(min_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a python function to find the average value in the list."}
{"ID": 323, "source": "MBPP:924", "prompt": "\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\tif x > y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\treturn max_of_two( max_of_two( x, y ), z )\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, t ):\n\treturn max_of_two( max_of_three( x, y, z ), t )\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, t, u ):\n\treturn max_of_two( max_of_four( x, y, z, t ), u )\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, t, u, v ):\n\treturn max_of_two( max_of_five( x, y, z, t, u ), v )\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven( x, y, z, t, u, v, w ):\n\treturn max_of_two( max_of_six( x, y, z, t, u, v ), w )\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight( x, y, z, t, u, v, w, a ):\n\treturn max_of_two( max_of_seven( x, y, z, t, u, v, w ), a )\n\n\"\"\"\nWrite a function to find maximum of nine numbers.\n\"\"\"\ndef max_of_nine( x, y, z, t, u, v, w, a, b ):\n\treturn max_of_two( max_of_eight( x, y, z, t, u, v, w, a ), b )\n\n\"\"\"\nWrite a function to find maximum of ten numbers.\n\"\"\"\ndef max_of_ten(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, t ):\n\treturn max_of_two( max_of_three( x, y, z ), t )\n\n\"\"\"\nWrite a function to find maximum of five numbers.\n\"\"\"\ndef max_of_five( x, y, z, t, u ):\n\treturn max_of_two( max_of_four( x, y, z, t ), u )\n\n\"\"\"\nWrite a function to find maximum of six numbers.\n\"\"\"\ndef max_of_six( x, y, z, t, u, v ):\n\treturn max_of_two( max_of_five( x, y, z, t, u ), v )\n\n\"\"\"\nWrite a function to find maximum of seven numbers.\n\"\"\"\ndef max_of_seven( x, y, z, t, u, v, w ):\n\treturn max_of_two( max_of_six( x, y, z, t, u, v ), w )\n\n\"\"\"\nWrite a function to find maximum of eight numbers.\n\"\"\"\ndef max_of_eight( x, y, z, t, u, v, w, a ):\n\treturn max_of_two( max_of_seven( x, y, z, t, u, v, w ), a )\n\n\"\"\"\nWrite a function to find maximum of nine numbers.\n\"\"\"\ndef max_of_nine( x, y, z, t, u, v, w, a, b ):\n\treturn max_of_two( max_of_eight( x, y, z, t, u, v, w, a ), b )"}
{"ID": 324, "source": "MBPP:925", "prompt": "\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n\tresult = 1\n\tfor num in nums:\n\t\tresult *= num\n\treturn result\n\nprint(mutiple_tuple((1,2,3,4,5)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 325, "source": "MBPP:926", "prompt": "\"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\t", "predict": "<s> \"\"\"\nWrite a function to find n-th rencontres number.\n\"\"\"\ndef rencontres_number(n, m): \n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 3\n\tif n == 4:\n\t\treturn 4\n\tif n == 5:\n\t\treturn 5\n\tif n == 6:\n\t\treturn 7\n\tif n == 7:\n\t\treturn 9\n\tif n == 8:\n\t\treturn 12\n\tif n == 9:\n\t\treturn 16\n\tif n == 10:\n\t\treturn 21\n\tif n == 11:\n\t\treturn 27\n\tif n == 12:\n\t\treturn 34\n\tif n == 13:\n\t\treturn 42\n\tif n == 14:\n\t\treturn 50\n\tif n == 15:\n\t\treturn 59\n\tif n == 16:\n\t\treturn 68\n\tif n == 17:\n\t\treturn 78\n\tif n == 18:\n\t\treturn 89\n\tif n == 19:\n\t\treturn 101\n\tif n == 20:\n\t\treturn 115\n\tif n == 21:\n\t\treturn 129\n\tif n == 22:\n\t\treturn 144\n\tif n == 23:\n\t\treturn 160\n\tif n == 24:\n\t\treturn 177\n\tif n == 25:\n\t\treturn 195\n\tif n == 26:\n\t\treturn 214\n\tif n == 27:\n\t\treturn 234\n\tif n == 28:\n\t\treturn 255\n\tif n == 29:\n\t\treturn 277\n\tif n == 30:\n\t\treturn 300\n\tif n == 31:\n\t\treturn 324\n\tif n == 32:\n\t\treturn 349\n\tif n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 3\n\tif n == 4:\n\t\treturn 4\n\tif n == 5:\n\t\treturn 5\n\tif n == 6:\n\t\treturn 7\n\tif n == 7:\n\t\treturn 9\n\tif n == 8:\n\t\treturn 12\n\tif n == 9:\n\t\treturn 16\n\tif n == 10:\n\t\treturn 21\n\tif n == 11:\n\t\treturn 27\n\tif n == 12:\n\t\treturn 34\n\tif n == 13:\n\t\treturn 42\n\tif n == 14:\n\t\treturn 50\n\tif n == 15:\n\t\treturn 59\n\tif n == 16:\n\t\treturn 68\n\tif n == 17:\n\t\treturn 78\n\tif n == 18:\n\t\treturn 89\n\tif n == 19:\n\t\treturn 101\n\tif n == 20:\n\t\treturn 115\n\tif n == 21:\n\t\treturn 129\n\tif n == 22:\n\t\treturn 144\n\tif n == 23:\n\t\treturn 160\n\tif n == 24:\n\t\treturn 177\n\tif n == 25:\n\t\treturn 195\n\tif n == 26:\n\t\treturn 214\n\tif n == 27:\n\t\treturn 234\n\tif n == 28:\n\t\treturn 255\n\tif n == 29:\n\t\treturn 277\n\tif n == 30:\n\t\treturn 300\n\tif n == 31:\n\t\treturn 324\n\tif n == 32:\n\t\treturn 349"}
{"ID": 329, "source": "MBPP:930", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\ndef text_match(text):\n\timport re\n\tpattern = r\"a.*b\"\n\treturn re.search(pattern, text)\n\nprint(text_match(\"ab\"))\nprint(text_match(\"a\"))\nprint(text_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(text_match(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"ID": 330, "source": "MBPP:931", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of series 1³+2³+3³+….+n³.\n\"\"\"\ndef sum_series(number):\n\treturn sum([i**3 for i in range(1, number+1)])\n\ndef sum_series_2(number):\n\treturn (number*(number+1)*(2*number+1))//6\n\ndef sum_series_3(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_4(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_5(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_6(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_7(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_8(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_9(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_10(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_11(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_12(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_13(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_14(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_15(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_16(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_17(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_18(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum([i**3 for i in range(1, number+1)])\n\ndef sum_series_2(number):\n\treturn (number*(number+1)*(2*number+1))//6\n\ndef sum_series_3(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_4(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_5(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_6(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_7(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_8(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_9(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_10(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_11(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_12(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_13(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_14(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_15(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_16(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_17(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_18(number):\n\treturn (number**2*(number+1)**2)//4\n\ndef sum_series_"}
{"ID": 331, "source": "MBPP:932", "prompt": "\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n\treturn list(dict.fromkeys(l))\n\ndef remove_duplic_set(l):\n\treturn list(set(l))\n\ndef remove_duplic_list_comprehension(l):\n\treturn [x for i, x in enumerate(l) if x not in l[:i]]\n\ndef remove_duplic_set_comprehension(l):\n\treturn [x for x in set(l)]\n\ndef remove_duplic_list_comprehension_2(l):\n\treturn [x for i, x in enumerate(l) if x not in l[:i] and x not in l[i+1:]]\n\ndef remove_duplic_set_comprehension_2(l):\n\treturn [x for x in set(l) if x not in set(l[1:])]\n\ndef remove_duplic_list_comprehension_3(l):\n\treturn [x for i, x in enumerate(l) if x not in l[:i] and x not in l[i+1:] and x not in l[i+2:]]\n\ndef remove_duplic_set_comprehension_3(l):\n\treturn [x for x in set(l) if x not in set(l[1:]) and x not in set(l[2:])]\n\ndef remove_duplic_list_comprehension_4(l):\n\treturn [x for i, x in enumerate(l) if x not in l[:i] and x not in l[i+1:] and x not in l[i+2:] and x not in l[i+3:]]\n\ndef remove_duplic_set_comprehension_4(l):\n\treturn [x for x in set(l) if x not in set(l[1:]) and x not in set(l[2:]) and x not in set(l[3:])]\n\ndef remove_duplic_list_comprehension_5(l):\n\treturn [x for i, x in enumerate(l) if x not in l[:i] and x not in l[i+1:] and x not in l[i+2:] and x not in", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\treturn [x for i, x in enumerate(l) if x not in l[:i] and x not in l[i+1:] and x not in l[i+2:] and x not in"}
{"ID": 332, "source": "MBPP:933", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\n\"\"\"\ndef camel_to_snake(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_2(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_3(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_4(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_5(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_6(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_7(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_8(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_9(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_10(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_11(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_12(text):\n\treturn re.sub(r'(?<=[a-z])", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_2(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_3(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_4(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_5(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_6(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_7(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_8(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_9(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_10(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_11(text):\n\treturn re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n\ndef camel_to_snake_12(text):"}
{"ID": 334, "source": "MBPP:935", "prompt": "\"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of series 1²+2²+3²+….+n².\n\"\"\"\ndef series_sum(number):\n\treturn sum(i**2 for i in range(1, number+1))\n\ndef series_sum_2(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_3(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_4(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_5(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_6(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_7(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_8(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_9(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_10(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_11(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_12(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_13(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_14(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_15(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(i**2 for i in range(1, number+1))\n\ndef series_sum_2(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_3(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_4(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_5(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_6(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_7(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_8(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_9(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_10(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_11(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_12(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_13(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_14(number):\n\treturn (number * (number + 1) * (2 * number + 1)) // 6\n\ndef series_sum_15(number):"}
{"ID": 336, "source": "MBPP:937", "prompt": "\"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the most common character in a given string.\n\"\"\"\ndef max_char(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count.values())\n\n\ndef max_char_2(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_3(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_4(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_5(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_6(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def max_char_2(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_3(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_4(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n\n\ndef max_char_5(str1):\n\t\"\"\"\n\t:param str1:\n\t:return:\n\t\"\"\"\n\tcount = {}\n\tfor i in str1:\n\t\tif i in count:\n\t\t\tcount[i] += 1\n\t\telse:\n\t\t\tcount[i] = 1\n\treturn max(count, key=count.get)\n"}
{"ID": 341, "source": "MBPP:942", "prompt": "\"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n\tfor i in test_tup:\n\t\tif i in check_list:\n\t\t\treturn True\n\treturn False\n\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(check_element((1, 2", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(check_element((1, 2, 3, 4, 5), [1, 2, 3]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(check_element((1, 2"}
{"ID": 342, "source": "MBPP:943", "prompt": "\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\t", "predict": "<s> \"\"\"\nWrite a function to combine two given sorted lists using heapq module.\n\"\"\"\ndef combine_lists(num1,num2):\n\timport heapq\n\treturn heapq.merge(num1,num2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 344, "source": "MBPP:945", "prompt": "\"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n\treturn set(t)\n\n\nprint(tuple_to_set((1,2,3,4,5)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 345, "source": "MBPP:946", "prompt": "\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\n\"\"\"\ndef most_common_elem(s,a):\n\t\"\"\"\n\t:param s: string\n\t:param a: list of integers\n\t:return: list of tuples\n\t\"\"\"\n\td = {}\n\tfor i in a:\n\t\tif s[i] in d:\n\t\t\td[s[i]] += 1\n\t\telse:\n\t\t\td[s[i]] = 1\n\treturn sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n\ts = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\ts = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab"}
{"ID": 346, "source": "MBPP:947", "prompt": "\"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n\treturn min(len(i) for i in list1)\n\nprint(len_log([\"hello\", \"world\", \"python\", \"java\", \"c++\"]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 347, "source": "MBPP:948", "prompt": "\"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\t", "predict": "<s> \"\"\"\nWrite a function to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n\treturn tup1[index]\n\ntup1 = (1,2,3,4,5)\nprint(get_item(tup1,2))\n\n\"\"\"\nWrite a function to get an item of a list.\n\"\"\"\ndef get_item(list1,index):\n\treturn list1[index]\n\nlist1 = [1,2,3,4,5]\nprint(get_item(list1,2))\n\n\"\"\"\nWrite a function to get an item of a dictionary.\n\"\"\"\ndef get_item(dict1,key):\n\treturn dict1[key]\n\ndict1 = {'a':1,'b':2,'c':3}\nprint(get_item(dict1,'a'))\n\n\"\"\"\nWrite a function to get an item of a string.\n\"\"\"\ndef get_item(str1,index):\n\treturn str1[index]\n\nstr1 = 'hello'\nprint(get_item(str1,2))\n\n\"\"\"\nWrite a function to get an item of a set.\n\"\"\"\ndef get_item(set1,index):\n\treturn list(set1)[index]\n\nset1 = {1,2,3,4,5}\nprint(get_item(set1,2))\n\n\"\"\"\nWrite a function to get an item of a frozenset.\n\"\"\"\ndef get_item(frozenset1,index):\n\treturn list(frozenset1)[index]\n\nfrozenset1 = frozenset({1,2,3,4,5})\nprint(get_item(frozenset1,2))\n\n\"\"\"\nWrite a function to get an item of a bytearray.\n\"\"\"\ndef get_item(bytearray1,index):\n\treturn bytearray1[index]\n\nbytearray1 = bytearray(b'hello')\nprint(get_item(bytearray1,2))\n\n\"\"\"\nWrite a function to get an item of a memoryview.\n\"\"\"\ndef get_item(memoryview1,index):\n\treturn memoryview1[index]\n\nmemoryview1 = memoryview(b'hello')\nprint(get_item(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn dict1[key]\n\ndict1 = {'a':1,'b':2,'c':3}\nprint(get_item(dict1,'a'))\n\n\"\"\"\nWrite a function to get an item of a string.\n\"\"\"\ndef get_item(str1,index):\n\treturn str1[index]\n\nstr1 = 'hello'\nprint(get_item(str1,2))\n\n\"\"\"\nWrite a function to get an item of a set.\n\"\"\"\ndef get_item(set1,index):\n\treturn list(set1)[index]\n\nset1 = {1,2,3,4,5}\nprint(get_item(set1,2))\n\n\"\"\"\nWrite a function to get an item of a frozenset.\n\"\"\"\ndef get_item(frozenset1,index):\n\treturn list(frozenset1)[index]\n\nfrozenset1 = frozenset({1,2,3,4,5})\nprint(get_item(frozenset1,2))\n\n\"\"\"\nWrite a function to get an item of a bytearray.\n\"\"\"\ndef get_item(bytearray1,index):\n\treturn bytearray1[index]\n\nbytearray1 = bytearray(b'hello')\nprint(get_item(bytearray1,2))\n\n\"\"\"\nWrite a function to get an item of a memoryview.\n\"\"\"\ndef get_item(memoryview1,index):\n\treturn memoryview1[index]\n\nmemoryview1 = memoryview(b'hello')"}
{"ID": 352, "source": "MBPP:953", "prompt": "\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n): \n\tif n == 0: \n\t\treturn 1\n\tif n < 0: \n\t\treturn 0\n\treturn subset(ar, n-1) + subset(ar, n-2) \n\ndef min_subset(ar):\n\tn = len(ar)\n\treturn subset(ar, n)\n\nar = [1, 2, 3, 4, 5]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint(min_subset(ar))\n\nar = [1,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn subset(ar, n)\n\nar = [1, 2, 3, 4, 5]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(min_subset(ar))\n\nar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"}
{"ID": 355, "source": "MBPP:956", "prompt": "\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\n\"\"\"\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):\n\treturn re.split(r'(?=[A-Z])', text)\n\n\ndef split_list(text):"}
{"ID": 356, "source": "MBPP:957", "prompt": "\"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to get the position of rightmost set bit.\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos(n >> 1)\n\n\ndef get_First_Set_Bit_Pos_2(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_2(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_3(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_3(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_4(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_4(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_5(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_5(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_6(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_6(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_7(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_7(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_8(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_8(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_9(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_9(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos(n >> 1)\n\n\ndef get_First_Set_Bit_Pos_2(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_2(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_3(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_3(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_4(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_4(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_5(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_5(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_6(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_6(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_7(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_7(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_8(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_8(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_9(n):\n\tif n == 0:\n\t\treturn 0\n\treturn 1 + get_First_Set_Bit_Pos_9(n & (n - 1))\n\n\ndef get_First_Set_Bit_Pos_1"}
{"ID": 358, "source": "MBPP:959", "prompt": "\"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the average of a list.\n\"\"\"\ndef Average(lst): \n\treturn sum(lst) / len(lst)\n\nprint(Average([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of a list.\n\"\"\"\ndef Sum(lst): \n\treturn sum(lst)\n\nprint(Sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the product of a list.\n\"\"\"\ndef Product(lst): \n\treturn 1\n\nprint(Product([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum of a list.\n\"\"\"\ndef Maximum(lst): \n\treturn max(lst)\n\nprint(Maximum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the minimum of a list.\n\"\"\"\ndef Minimum(lst): \n\treturn min(lst)\n\nprint(Minimum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the length of a list.\n\"\"\"\ndef Length(lst): \n\treturn len(lst)\n\nprint(Length([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of a list.\n\"\"\"\ndef Sum(lst): \n\treturn sum(lst)\n\nprint(Sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the product of a list.\n\"\"\"\ndef Product(lst): \n\treturn 1\n\nprint(Product([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum of a list.\n\"\"\"\ndef Maximum(lst): \n\treturn max(lst)\n\nprint(Maximum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the minimum of a list.\n\"\"\"\ndef Minimum(lst): \n\treturn min(lst)\n\nprint(Minimum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the length of a list.\n\"\"\"\ndef Length(lst): \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn sum(lst) / len(lst)\n\nprint(Average([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of a list.\n\"\"\"\ndef Sum(lst): \n\treturn sum(lst)\n\nprint(Sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the product of a list.\n\"\"\"\ndef Product(lst): \n\treturn 1\n\nprint(Product([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum of a list.\n\"\"\"\ndef Maximum(lst): \n\treturn max(lst)\n\nprint(Maximum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the minimum of a list.\n\"\"\"\ndef Minimum(lst): \n\treturn min(lst)\n\nprint(Minimum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the length of a list.\n\"\"\"\ndef Length(lst): \n\treturn len(lst)\n\nprint(Length([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the sum of a list.\n\"\"\"\ndef Sum(lst): \n\treturn sum(lst)\n\nprint(Sum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the product of a list.\n\"\"\"\ndef Product(lst): \n\treturn 1\n\nprint(Product([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the maximum of a list.\n\"\"\"\ndef Maximum(lst): \n\treturn max(lst)\n\nprint(Maximum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the minimum of a list.\n\"\"\"\ndef Minimum(lst): \n\treturn min(lst)\n\nprint(Minimum([1,2,3,4,5]))\n\n\"\"\"\nWrite a python function to find the length of a list.\n\"\"\"\ndef Length(lst): "}
{"ID": 359, "source": "MBPP:960", "prompt": "\"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to solve tiling problem.\n\"\"\"\ndef get_noOfways(n):\n\tif n == 0:\n\t\treturn 1\n\tif n < 0:\n\t\treturn 0\n\treturn get_noOfways(n-1) + get_noOfways(n-2)\n\ndef solve_tiling_problem(n):\n\treturn get_noOfways(n)\n\nif __name__ == '__main__':\n\tprint(solve_tiling_problem(3))\n\tprint(solve_tiling_problem(4))\n\tprint(solve_tiling_problem(5))\n\tprint(solve_tiling_problem(6))\n\tprint(solve_tiling_problem(7))\n\tprint(solve_tiling_problem(8))\n\tprint(solve_tiling_problem(9))\n\tprint(solve_tiling_problem(10))\n\tprint(solve_tiling_problem(11))\n\tprint(solve_tiling_problem(12))\n\tprint(solve_tiling_problem(13))\n\tprint(solve_tiling_problem(14))\n\tprint(solve_tiling_problem(15))\n\tprint(solve_tiling_problem(16))\n\tprint(solve_tiling_problem(17))\n\tprint(solve_tiling_problem(18))\n\tprint(solve_tiling_problem(19))\n\tprint(solve_tiling_problem(20))\n\tprint(solve_tiling_problem(21))\n\tprint(solve_tiling_problem(22))\n\tprint(solve_tiling_problem(23))\n\tprint(solve_tiling_problem(24))\n\tprint(solve_tiling_problem(25))\n\tprint(solve_tiling_problem(26))\n\tprint(solve_tiling_problem(27))\n\tprint(solve_tiling_problem(28))\n\tprint(solve_tiling_problem(29))\n\tprint(solve_tiling_problem(30))\n\tprint(solve_tiling_problem(31", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(solve_tiling_problem(3))\n\tprint(solve_tiling_problem(4))\n\tprint(solve_tiling_problem(5))\n\tprint(solve_tiling_problem(6))\n\tprint(solve_tiling_problem(7))\n\tprint(solve_tiling_problem(8))\n\tprint(solve_tiling_problem(9))\n\tprint(solve_tiling_problem(10))\n\tprint(solve_tiling_problem(11))\n\tprint(solve_tiling_problem(12))\n\tprint(solve_tiling_problem(13))\n\tprint(solve_tiling_problem(14))\n\tprint(solve_tiling_problem(15))\n\tprint(solve_tiling_problem(16))\n\tprint(solve_tiling_problem(17))\n\tprint(solve_tiling_problem(18))\n\tprint(solve_tiling_problem(19))\n\tprint(solve_tiling_problem(20))\n\tprint(solve_tiling_problem(21))\n\tprint(solve_tiling_problem(22))\n\tprint(solve_tiling_problem(23))\n\tprint(solve_tiling_problem(24))\n\tprint(solve_tiling_problem(25))\n\tprint(solve_tiling_problem(26))\n\tprint(solve_tiling_problem(27))\n\tprint(solve_tiling_problem(28))\n\tprint(solve_tiling_problem(29))\n\tprint(solve_tiling_problem(30))\n\tprint(solve_tiling_problem(31"}
{"ID": 360, "source": "MBPP:961", "prompt": "\"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n\troman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n\ttotal = 0\n\tfor i in range(len(s)):\n\t\tif i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]]:\n\t\t\ttotal += roman_dict[s[i]] - 2 * roman_dict[s[i-1]]\n\t\telse:\n\t\t\ttotal += roman_dict[s[i]]\n\treturn total\n\n\nif __name__ == '__main__':\n\tprint(roman_to_int('XIV'))\n\tprint(roman_to_int('XIX'))\n\tprint(roman_to_int('MCMXCIX'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('M", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(roman_to_int('XIV'))\n\tprint(roman_to_int('XIX'))\n\tprint(roman_to_int('MCMXCIX'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('MCDLXXI'))\n\tprint(roman_to_int('M"}
{"ID": 364, "source": "MBPP:965", "prompt": "\"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n\treturn '_'.join(text.split())\n\n\ndef camel_to_snake_2(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_3(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_4(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_5(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_6(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_7(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_8(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_9(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_10(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_11(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_12(text):\n\treturn ''.join(['_'+c.lower() if", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef camel_to_snake_2(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_3(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_4(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_5(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_6(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_7(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_8(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_9(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_10(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_11(text):\n\treturn ''.join(['_'+c.lower() if c.isupper() else c for c in text]).lstrip('_')\n\n\ndef camel_to_snake_12(text):\n\treturn ''.join(['_'+c.lower() if"}
{"ID": 365, "source": "MBPP:966", "prompt": "\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\t", "predict": "<s> \"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty2(tuple1):\n\treturn [x for x in tuple1 if x]\n\ndef remove_empty3(tuple1):\n\treturn [x for x in tuple1 if x is not ()]\n\ndef remove_empty4(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty5(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty6(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty7(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty8(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty9(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty10(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty11(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty12(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty13(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty14(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty15(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty16(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty17(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty18(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty19(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty20(tuple1):\n\treturn [x for x in tuple1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty2(tuple1):\n\treturn [x for x in tuple1 if x]\n\ndef remove_empty3(tuple1):\n\treturn [x for x in tuple1 if x is not ()]\n\ndef remove_empty4(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty5(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty6(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty7(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty8(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty9(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty10(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty11(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty12(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty13(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty14(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty15(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty16(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty17(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty18(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty19(tuple1):\n\treturn [x for x in tuple1 if x != ()]\n\ndef remove_empty20(tuple1):"}
{"ID": 369, "source": "MBPP:970", "prompt": "\"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\t", "predict": "<s> \"\"\"\nWrite a function to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n\tif x < y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\tif x > y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three( x, y, z ):\n\tif x < y and x < z:\n\t\treturn x\n\telif y < x and y < z:\n\t\treturn y\n\telse:\n\t\treturn z\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\tif x > y and x > z:\n\t\treturn x\n\telif y > x and y > z:\n\t\treturn y\n\telse:\n\t\treturn z\n\n\"\"\"\nWrite a function to find minimum of four numbers.\n\"\"\"\ndef min_of_four( x, y, z, t ):\n\tif x < y and x < z and x < t:\n\t\treturn x\n\telif y < x and y < z and y < t:\n\t\treturn y\n\telif z < x and z < y and z < t:\n\t\treturn z\n\telse:\n\t\treturn t\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, t ):\n\tif x > y and x > z and x > t:\n\t\treturn x\n\telif y > x and y > z and y > t:\n\t\treturn y\n\telif z > x and z > y and z > t:\n\t\treturn z\n\telse:\n\t\treturn t\n\n\"\"\"\nWrite a function to find minimum of five numbers.\n\"\"\"\ndef min_of_five( x, y, z, t, u ):\n\tif x < y and x < z and x < t and x < u:\n\t\treturn x\n\telif y < x and y < z and y < t and y < u:\n\t\treturn y", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif x < y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n\"\"\"\nWrite a function to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n\tif x > y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three( x, y, z ):\n\tif x < y and x < z:\n\t\treturn x\n\telif y < x and y < z:\n\t\treturn y\n\telse:\n\t\treturn z\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three( x, y, z ):\n\tif x > y and x > z:\n\t\treturn x\n\telif y > x and y > z:\n\t\treturn y\n\telse:\n\t\treturn z\n\n\"\"\"\nWrite a function to find minimum of four numbers.\n\"\"\"\ndef min_of_four( x, y, z, t ):\n\tif x < y and x < z and x < t:\n\t\treturn x\n\telif y < x and y < z and y < t:\n\t\treturn y\n\telif z < x and z < y and z < t:\n\t\treturn z\n\telse:\n\t\treturn t\n\n\"\"\"\nWrite a function to find maximum of four numbers.\n\"\"\"\ndef max_of_four( x, y, z, t ):\n\tif x > y and x > z and x > t:\n\t\treturn x\n\telif y > x and y > z and y > t:\n\t\treturn y\n\telif z > x and z > y and z > t:\n\t\treturn z\n\telse:\n\t\treturn t\n\n\"\"\"\nWrite a function to find minimum of five numbers.\n\"\"\"\ndef min_of_five( x, y, z, t, u ):"}
{"ID": 370, "source": "MBPP:971", "prompt": "\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) : \n\tif n < a + b + c : \n\t\treturn 0\n\tif n == a + b + c : \n\t\treturn 1\n\tif n == a + b : \n\t\treturn 2\n\tif n == a + c : \n\t\treturn 2\n\tif n == b + c : \n\t\treturn 2\n\tif n == a : \n\t\treturn 1\n\tif n == b : \n\t\treturn 1\n\tif n == c : \n\t\treturn 1\n\treturn 3\n\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maxim", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maximum_segments(10, 3, 4, 5))\nprint(maxim"}
{"ID": 371, "source": "MBPP:972", "prompt": "\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n\treturn (test_tup1 + test_tup2,)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6)))\n# ((1, 2, 3, 4, 5, 6),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9))))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9)),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10)))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 10),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10, (11, 12, 13))))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 10, (11, 12, 13)),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10, (11, 12, 13), 14)))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 10, (11, 12, 13), 14),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10, (11, 12, 13), 14, (15, 16, 17))))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (test_tup1 + test_tup2,)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6)))\n# ((1, 2, 3, 4, 5, 6),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9))))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9)),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10)))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 10),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10, (11, 12, 13))))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 10, (11, 12, 13)),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10, (11, 12, 13), 14)))\n# ((1, 2, 3, 4, 5, 6, (7, 8, 9), 10, (11, 12, 13), 14),)\n\nprint(concatenate_nested((1, 2, 3), (4, 5, 6, (7, 8, 9), 10, (11, 12, 13), 14, (15, 16, 17))))"}
{"ID": 372, "source": "MBPP:973", "prompt": "\"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\t", "predict": "<s> \"\"\"\nWrite a python function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n\treturn s[d:] + s[:d]\n\nprint(left_rotate(\"hello\",2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 373, "source": "MBPP:974", "prompt": "\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A): \n\t\"\"\"\n\t:type A: List[List[int]]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tm, n = len(A), len(A[0])\n\tdp = [0] * n\n\tfor i in range(m):\n\t\tfor j in range(i+1):\n\t\t\tif i == 0:\n\t\t\t\tdp[j] = A[0][j]\n\t\t\telse:\n\t\t\t\tif j == 0:\n\t\t\t\t\tdp[j] = min(dp[j], dp[j+1]) + A[i][j]\n\t\t\t\telif j == n-1:\n\t\t\t\t\tdp[j] = min(dp[j-1], dp[j]) + A[i][j]\n\t\t\t\telse:\n\t\t\t\t\tdp[j] = min(dp[j-1], dp[j], dp[j+1]) + A[i][j]\n\treturn dp[0]\n\n\ndef min_sum_path_2(A):\n\t\"\"\"\n\t:type A: List[List[int]]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tm, n = len(A), len(A[0])\n\tdp = [0] * n\n\tfor i in range(m):\n\t\tfor j in range(i+1):\n\t\t\tif i == 0:\n\t\t\t\tdp[j] = A[0][j]\n\t\t\telse:\n\t\t\t\tif j == 0:\n\t\t\t\t\tdp[j] = min(dp[j], dp[j+1]) + A[i][j]\n\t\t\t\telif j == n-1:\n\t\t\t\t\tdp[j] = min(dp[j-1], dp[j]) + A[i][j]\n\t\t\t\telse:\n\t\t\t\t\tdp[j] = min(dp[j-1], dp[j], dp[j+1]) + A[i][", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif not A:\n\t\treturn 0\n\tm, n = len(A), len(A[0])\n\tdp = [0] * n\n\tfor i in range(m):\n\t\tfor j in range(i+1):\n\t\t\tif i == 0:\n\t\t\t\tdp[j] = A[0][j]\n\t\t\telse:\n\t\t\t\tif j == 0:\n\t\t\t\t\tdp[j] = min(dp[j], dp[j+1]) + A[i][j]\n\t\t\t\telif j == n-1:\n\t\t\t\t\tdp[j] = min(dp[j-1], dp[j]) + A[i][j]\n\t\t\t\telse:\n\t\t\t\t\tdp[j] = min(dp[j-1], dp[j], dp[j+1]) + A[i][j]\n\treturn dp[0]\n\n\ndef min_sum_path_2(A):\n\t\"\"\"\n\t:type A: List[List[int]]\n\t:rtype: int\n\t\"\"\"\n\tif not A:\n\t\treturn 0\n\tm, n = len(A), len(A[0])\n\tdp = [0] * n\n\tfor i in range(m):\n\t\tfor j in range(i+1):\n\t\t\tif i == 0:\n\t\t\t\tdp[j] = A[0][j]\n\t\t\telse:\n\t\t\t\tif j == 0:\n\t\t\t\t\tdp[j] = min(dp[j], dp[j+1]) + A[i][j]"}
{"ID": 374, "source": "MBPP:11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\t", "predict": "<s> \"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s,ch): \n\treturn s.replace(ch,'',1).replace(ch,'',1)\n\nprint(remove_Occ('abcdabcdabcd','a'))\n\n\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\"\"\"\ndef remove_Occ(s"}
{"ID": 375, "source": "MBPP:12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"\ndef sort_matrix(M):\n\treturn sorted(M, key=sum)\n\n\ndef test_sort_matrix():\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def test_sort_matrix():\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n\n\tM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\tassert sort_matrix(M) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]"}
{"ID": 376, "source": "MBPP:13", "prompt": "\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t", "predict": "<s> \"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\ndef count_common(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_2(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_3(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_4(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_5(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_6(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_7(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_8(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_2(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_3(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_4(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_5(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_6(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_7(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\tfor word in words:\n\t\tif word == \"the\":\n\t\t\tcount += 1\n\treturn count\n\n\ndef count_common_8(words):\n\t\"\"\"\n\t:type words: list[str]\n\t:"}
{"ID": 379, "source": "MBPP:16", "prompt": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\"\"\"\ndef text_lowercase_underscore(text):\n\t\"\"\"\n\t:type text: str\n\t:rtype: List[str]\n\t\"\"\"\n\timport re\n\treturn re.findall(r'[a-z]+_[a-z]+', text)\n\n\n\ndef main():\n\tassert text_lowercase_underscore('abc_def') == ['abc_def']\n\tassert text_lowercase_underscore('abc_def_ghi') == ['abc_def_ghi']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl') == ['abc_def_ghi_jkl']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno') == ['abc_def_ghi_jkl_mno']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr') == ['abc_def_ghi_jkl_mno_pqr']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu') == ['abc_def_ghi_jkl_mno_pqr_stu']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx') == ['abc_def_ghi_jkl_mno_pqr_stu_vwx']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx_yz') == ['abc_def_ghi_jkl_mno_pqr_stu_vwx_yz']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx_yz_123') == ['abc_def_ghi_jkl_mno_pqr_stu_vwx_yz_123']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert text_lowercase_underscore('abc_def') == ['abc_def']\n\tassert text_lowercase_underscore('abc_def_ghi') == ['abc_def_ghi']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl') == ['abc_def_ghi_jkl']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno') == ['abc_def_ghi_jkl_mno']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr') == ['abc_def_ghi_jkl_mno_pqr']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu') == ['abc_def_ghi_jkl_mno_pqr_stu']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx') == ['abc_def_ghi_jkl_mno_pqr_stu_vwx']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx_yz') == ['abc_def_ghi_jkl_mno_pqr_stu_vwx_yz']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx_yz_123') == ['abc_def_ghi_jkl_mno_pqr_stu_vwx_yz_123']\n\tassert text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_"}
{"ID": 380, "source": "MBPP:17", "prompt": "\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef square_perimeter(a):\n\treturn 4*a\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a):\n\treturn a*a\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\treturn 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef trapezoid_perimeter(a, b, c, d):\n\treturn a+b+c+d\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef trapezoid_area(a, b, h):\n\treturn (a+b)*h/2\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(a, b):\n\treturn 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef parallelogram_area(a, b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 4*a\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(a):\n\treturn a*a\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(a, b):\n\treturn 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(a, b):\n\treturn a*b\n\n\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef triangle_perimeter(a, b, c):\n\treturn a+b+c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(a, b, c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef circle_perimeter(r):\n\treturn 2*3.14*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\""}
{"ID": 381, "source": "MBPP:18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\t", "predict": "<s> \"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\"\"\"\ndef remove_dirty_chars(string, second_string): \n\treturn ''.join([char for char in string if char not in second_string])\n\ndef remove_dirty_chars_2(string, second_string): \n\treturn ''.join(filter(lambda x: x not in second_string, string))\n\ndef remove_dirty_chars_3(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_4(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_5(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_6(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_7(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_8(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_9(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_10(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_11(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_12(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_13(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_ch", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ''.join([char for char in string if char not in second_string])\n\ndef remove_dirty_chars_2(string, second_string): \n\treturn ''.join(filter(lambda x: x not in second_string, string))\n\ndef remove_dirty_chars_3(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_4(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_5(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_6(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_7(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_8(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_9(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_10(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_11(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_12(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_chars_13(string, second_string): \n\treturn ''.join(char for char in string if char not in second_string)\n\ndef remove_dirty_ch"}
{"ID": 382, "source": "MBPP:19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"\ndef test_duplicate(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\tfor i in range(len(arraynums)):\n\t\t\tfor j in range(i+1, len(arraynums)):\n\t\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\t\treturn True\n\t\treturn False\n\ndef test_duplicate2(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\tfor i in range(len(arraynums)):\n\t\t\tif arraynums[i] in arraynums[i+1:]:\n\t\t\t\treturn True\n\t\treturn False\n\ndef test_duplicate3(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(set(arraynums)) != len(arraynums)\n\ndef test_duplicate4(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate5(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate6(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate7(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate8(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate9(arraynums):\n\tif len(arraynums", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\ndef test_duplicate3(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(set(arraynums)) != len(arraynums)\n\ndef test_duplicate4(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate5(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate6(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate7(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate8(arraynums):\n\tif len(arraynums) == 0:\n\t\treturn False\n\telse:\n\t\treturn len(arraynums) != len(set(arraynums))\n\ndef test_duplicate9(arraynums):\n\tif len(arraynums"}
{"ID": 383, "source": "MBPP:20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if the given number is woodball or not.\n\"\"\"\ndef is_woodall(x): \n\treturn x == 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\treturn x}
{"ID": 384, "source": "MBPP:21", "prompt": "\"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find m number of multiples of n.\n\"\"\"\ndef multiples_of_num(m,n): \n\treturn [i for i in range(n,n+m*n,n)]\n\nprint(multiples_of_num(3,5))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [i for i in range(n,n+m*n,n)]\n\nprint(multiples_of_num(3,5))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum(i for i in range(n) if i%3==0 or i%5==0)\n\nprint(sum_of_multiples(1000))\n\n\"\"\"\nWrite a function to find the sum of all the multiples of 3 or 5 below 1000.\n\"\"\"\ndef sum_of_multiples(n):\n\treturn sum("}
{"ID": 388, "source": "MBPP:25", "prompt": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\n\"\"\"\ndef find_Product(arr,n): \n\tproduct = 1\n\tfor i in range(n): \n\t\tif arr[i] not in arr[i+1:]: \n\t\t\tproduct = product * arr[i] \n\treturn product \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_Product(arr, n)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 392, "source": "MBPP:29", "prompt": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the element occurring odd number of times.\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \n\tresult = arr[0]\n\tfor i in range(1,arr_size):\n\t\tresult = result ^ arr[i]\n\treturn result\n\narr = [1,2,3,2,1,4,5,6,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "arr = [1,2,3,2,1,4,5,6,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"}
{"ID": 397, "source": "MBPP:34", "prompt": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the missing number in a sorted array.\n\"\"\"\ndef find_missing(ar,N): \n\tfor i in range(N): \n\t\tif ar[i] != i+1: \n\t\t\treturn i+1\n\treturn N+1\n\nar = [1,2,4,5,6] \nN = len(ar) \nprint(find_missing(ar,N)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 398, "source": "MBPP:35", "prompt": "\"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the n-th rectangular number.\n\"\"\"\ndef find_rect_num(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile True:\n\t\tif i * (i + 1) / 2 >= n:\n\t\t\treturn i * (i + 1) / 2\n\t\ti += 1\n\n\nif __name__ == '__main__':\n\tprint(find_rect_num(1))\n\tprint(find_rect_num(2))\n\tprint(find_rect_num(3))\n\tprint(find_rect_num(4))\n\tprint(find_rect_num(5))\n\tprint(find_rect_num(6))\n\tprint(find_rect_num(7))\n\tprint(find_rect_num(8))\n\tprint(find_rect_num(9))\n\tprint(find_rect_num(10))\n\tprint(find_rect_num(11))\n\tprint(find_rect_num(12))\n\tprint(find_rect_num(13))\n\tprint(find_rect_num(14))\n\tprint(find_rect_num(15))\n\tprint(find_rect_num(16))\n\tprint(find_rect_num(17))\n\tprint(find_rect_num(18))\n\tprint(find_rect_num(19))\n\tprint(find_rect_num(20))\n\tprint(find_rect_num(21))\n\tprint(find_rect_num(22))\n\tprint(find_rect_num(23))\n\tprint(find_rect_num(24))\n\tprint(find_rect_num(25))\n\tprint(find_rect_num(26))\n\tprint(find_rect_num(27))\n\tprint(find_rect_num(28))\n\tprint(find_rect_num(29))\n\tprint(find_rect_num(30))\n\tprint(find_rect_num(31))\n\tprint(find_rect_num(32))\n\tprint(find_rect_num(33))\n\tprint(find_rect", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(find_rect_num(1))\n\tprint(find_rect_num(2))\n\tprint(find_rect_num(3))\n\tprint(find_rect_num(4))\n\tprint(find_rect_num(5))\n\tprint(find_rect_num(6))\n\tprint(find_rect_num(7))\n\tprint(find_rect_num(8))\n\tprint(find_rect_num(9))\n\tprint(find_rect_num(10))\n\tprint(find_rect_num(11))\n\tprint(find_rect_num(12))\n\tprint(find_rect_num(13))\n\tprint(find_rect_num(14))\n\tprint(find_rect_num(15))\n\tprint(find_rect_num(16))\n\tprint(find_rect_num(17))\n\tprint(find_rect_num(18))\n\tprint(find_rect_num(19))\n\tprint(find_rect_num(20))\n\tprint(find_rect_num(21))\n\tprint(find_rect_num(22))\n\tprint(find_rect_num(23))\n\tprint(find_rect_num(24))\n\tprint(find_rect_num(25))\n\tprint(find_rect_num(26))\n\tprint(find_rect_num(27))\n\tprint(find_rect_num(28))\n\tprint(find_rect_num(29))\n\tprint(find_rect_num(30))\n\tprint(find_rect_num(31))\n\tprint(find_rect_num(32))\n\tprint(find_rect_num(33))\n\tprint(find_rect"}
{"ID": 399, "source": "MBPP:36", "prompt": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \n\tcount = 1\n\twhile(count < N) :  \n\t\tp = p*10\n\t\tcount = count + q\n\treturn p//(q*10**(N-1))\n\nprint(find_Nth_Digit(1,2,1))\nprint(find_Nth_Digit(1,2,2))\nprint(find_Nth_Digit(1,2,3))\nprint(find_Nth_Digit(1,2,4))\nprint(find_Nth_Digit(1,2,5))\nprint(find_Nth_Digit(1,2,6))\nprint(find_Nth_Digit(1,2,7))\nprint(find_Nth_Digit(1,2,8))\nprint(find_Nth_Digit(1,2,9))\nprint(find_Nth_Digit(1,2,10))\nprint(find_Nth_Digit(1,2,11))\nprint(find_Nth_Digit(1,2,12))\nprint(find_Nth_Digit(1,2,13))\nprint(find_Nth_Digit(1,2,14))\nprint(find_Nth_Digit(1,2,15))\nprint(find_Nth_Digit(1,2,16))\nprint(find_Nth_Digit(1,2,17))\nprint(find_Nth_Digit(1,2,18))\nprint(find_Nth_Digit(1,2,19))\nprint(find_Nth_Digit(1,2,20))\nprint(find_Nth_Digit(1,2,21))\nprint(find_Nth_Digit(1,2,22))\nprint(find_Nth_Digit(1,2,23))\nprint(find_Nth_Digit(1,2,24))\nprint(find_Nth_Digit(1,2,25))\nprint(find_Nth_Digit(1,2,26))\nprint(find_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(find_Nth_Digit(1,2,1))\nprint(find_Nth_Digit(1,2,2))\nprint(find_Nth_Digit(1,2,3))\nprint(find_Nth_Digit(1,2,4))\nprint(find_Nth_Digit(1,2,5))\nprint(find_Nth_Digit(1,2,6))\nprint(find_Nth_Digit(1,2,7))\nprint(find_Nth_Digit(1,2,8))\nprint(find_Nth_Digit(1,2,9))\nprint(find_Nth_Digit(1,2,10))\nprint(find_Nth_Digit(1,2,11))\nprint(find_Nth_Digit(1,2,12))\nprint(find_Nth_Digit(1,2,13))\nprint(find_Nth_Digit(1,2,14))\nprint(find_Nth_Digit(1,2,15))\nprint(find_Nth_Digit(1,2,16))\nprint(find_Nth_Digit(1,2,17))\nprint(find_Nth_Digit(1,2,18))\nprint(find_Nth_Digit(1,2,19))\nprint(find_Nth_Digit(1,2,20))\nprint(find_Nth_Digit(1,2,21))\nprint(find_Nth_Digit(1,2,22))\nprint(find_Nth_Digit(1,2,23))\nprint(find_Nth_Digit(1,2,24))\nprint(find_Nth_Digit(1,2,25))\nprint(find_Nth_Digit(1,2,26))\nprint(find_"}
{"ID": 402, "source": "MBPP:39", "prompt": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\"\"\"\ndef rearange_string(S):\n\t\"\"\"\n\t:type S: str\n\t:rtype: bool\n\t\"\"\"\n\tif len(S) == 0:\n\t\treturn True\n\telif len(S) == 1:\n\t\treturn False\n\telse:\n\t\tS = sorted(S)\n\t\tfor i in range(len(S)-1):\n\t\t\tif S[i] == S[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 403, "source": "MBPP:40", "prompt": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\"\"\"\ndef freq_element(nums):\n\tfrom collections import Counter\n\treturn Counter(nums)\n\n\ndef freq_element_2(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_3(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_4(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_5(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_6(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_7(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_8(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_9(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_10(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_11(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_12(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_13(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_14(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_15(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef freq_element_2(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_3(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_4(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_5(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_6(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_7(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_8(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_9(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_10(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_11(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_12(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_13(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_14(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n\ndef freq_element_15(nums):\n\treturn {i: nums.count(i) for i in set(nums)}\n\n"}
{"ID": 407, "source": "MBPP:44", "prompt": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word at the beginning of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn text.startswith('text')\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn text.endswith('text')\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn 'text' in text\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[4:]\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[:-4]\n\n\"\"\"\nWrite a function that matches a word in the middle of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text.split('text', 1)[1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[text.find('text') + 4:]\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[:text.rfind('text')]\n\n\"\"\"\nWrite a function that matches a word in the middle of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[:text.find('text')] + text[text.find('text') + 4:]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[text.find('text') + 4:]\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn text.endswith('text')\n\n\"\"\"\nWrite a function that matches a word in the middle of a string.\n\"\"\"\ndef text_match_string(text):\n\treturn 'text' in text\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[4:]\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[:-4]\n\n\"\"\"\nWrite a function that matches a word in the middle of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text.split('text', 1)[1]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[text.find('text') + 4:]\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[:text.rfind('text')]\n\n\"\"\"\nWrite a function that matches a word in the middle of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[:text.find('text')] + text[text.find('text') + 4:]\n\n\"\"\"\nWrite a function that matches a word at the beginning of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string(text):\n\treturn text[text.find('text') + 4:]\n\n\"\"\"\nWrite a function that matches a word at the end of a string,\nand returns the rest of the string.\n\"\"\"\ndef text_match_string"}
{"ID": 408, "source": "MBPP:45", "prompt": "\"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the gcd of the given array elements.\n\"\"\"\ndef get_gcd(l):\n\tif len(l) == 1:\n\t\treturn l[0]\n\telse:\n\t\treturn get_gcd(l[1:])\n\ndef get_gcd_of_array(arr):\n\treturn get_gcd(arr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 409, "source": "MBPP:46", "prompt": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\t", "predict": "<s> \"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\n\"\"\"\ndef test_distinct(data):\n\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_2(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_3(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_4(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_5(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_6(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_7(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_8(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_9(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_10(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_11(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_12(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_13(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_14(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_15(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_16(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_17(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_18(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_19(data):\n\treturn len(data) == len(set(data))\n\n\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn len(set(data)) == len(data)\n\n\ndef test_distinct_2(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_3(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_4(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_5(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_6(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_7(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_8(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_9(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_10(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_11(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_12(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_13(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_14(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_15(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_16(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_17(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_18(data):\n\treturn len(data) == len(set(data))\n\n\ndef test_distinct_19(data):\n\treturn len(data) == len(set(data))\n\n\ndef"}
{"ID": 415, "source": "MBPP:52", "prompt": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to caluclate area of a parallelogram.\n\"\"\"\ndef parallelogram_area(b,h):\n\treturn b*h\n\nprint(parallelogram_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to calculate area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn (a+b)*h/2\n\nprint(trapezium_area(5,4,3))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn d1*d2\n\nprint(rhombus_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn (b*h)/2\n\nprint(kite_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a hexagon.\n\"\"\"\ndef hexagon_area(s):\n\treturn (3*s**2)/(2*math.sqrt(3))\n\nprint(hexagon_area(5))\n\n\"\"\"\nWrite a function to calculate area of a octagon.\n\"\"\"\ndef octagon_area(s):\n\treturn (2*s**2)\n\nprint(octagon_area(5))\n\n\"\"\"\nWrite a function to calculate area of a decagon.\n\"\"\"\ndef decagon_area(s):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn b*h\n\nprint(parallelogram_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\nprint(triangle_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\nimport math\ndef circle_area(r):\n\treturn math.pi*r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\nprint(rectangle_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s**2\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to calculate area of a trapezium.\n\"\"\"\ndef trapezium_area(a,b,h):\n\treturn (a+b)*h/2\n\nprint(trapezium_area(5,4,3))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef rhombus_area(d1,d2):\n\treturn d1*d2\n\nprint(rhombus_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a kite.\n\"\"\"\ndef kite_area(b,h):\n\treturn (b*h)/2\n\nprint(kite_area(5,4))\n\n\"\"\"\nWrite a function to calculate area of a hexagon.\n\"\"\"\ndef hexagon_area(s):\n\treturn (3*s**2)/(2*math.sqrt(3))\n\nprint(hexagon_area(5))\n\n\"\"\"\nWrite a function to calculate area of a octagon.\n\"\"\"\ndef octagon_area(s):\n\treturn (2*s**2)\n\nprint(octagon_area(5))\n\n\"\"\"\nWrite a function to calculate area of a decagon.\n\"\"\""}
{"ID": 422, "source": "MBPP:59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"\ndef is_octagonal(n): \n\t\"\"\"\n\t:type n: int\n\t:rtype: bool\n\t\"\"\"\n\tk = (1 + (1 + 8 * n) ** 0.5) / 2\n\treturn k == int(k)\n\ndef find_n_th_octagonal_number(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\ti = 1\n\twhile not is_octagonal(i):\n\t\ti += 1\n\treturn i\n\nif __name__ == '__main__':\n\tprint(find_n_th_octagonal_number(1))\n\tprint(find_n_th_octagonal_number(2))\n\tprint(find_n_th_octagonal_number(3))\n\tprint(find_n_th_octagonal_number(4))\n\tprint(find_n_th_octagonal_number(5))\n\tprint(find_n_th_octagonal_number(6))\n\tprint(find_n_th_octagonal_number(7))\n\tprint(find_n_th_octagonal_number(8))\n\tprint(find_n_th_octagonal_number(9))\n\tprint(find_n_th_octagonal_number(10))\n\tprint(find_n_th_octagonal_number(11))\n\tprint(find_n_th_octagonal_number(12))\n\tprint(find_n_th_octagonal_number(13))\n\tprint(find_n_th_octagonal_number(14))\n\tprint(find_n_th_octagonal_number(15))\n\tprint(find_n_th_octagonal_number(16))\n\tprint(find_n_th_octagonal_number(17))\n\tprint(find_n_th_octagonal_number(18))\n\tprint(find_n_th_octagonal_number(19))\n\tprint(find_n_th_octagonal_number(20))\n\tprint(find_n_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(find_n_th_octagonal_number(1))\n\tprint(find_n_th_octagonal_number(2))\n\tprint(find_n_th_octagonal_number(3))\n\tprint(find_n_th_octagonal_number(4))\n\tprint(find_n_th_octagonal_number(5))\n\tprint(find_n_th_octagonal_number(6))\n\tprint(find_n_th_octagonal_number(7))\n\tprint(find_n_th_octagonal_number(8))\n\tprint(find_n_th_octagonal_number(9))\n\tprint(find_n_th_octagonal_number(10))\n\tprint(find_n_th_octagonal_number(11))\n\tprint(find_n_th_octagonal_number(12))\n\tprint(find_n_th_octagonal_number(13))\n\tprint(find_n_th_octagonal_number(14))\n\tprint(find_n_th_octagonal_number(15))\n\tprint(find_n_th_octagonal_number(16))\n\tprint(find_n_th_octagonal_number(17))\n\tprint(find_n_th_octagonal_number(18))\n\tprint(find_n_th_octagonal_number(19))\n\tprint(find_n_th_octagonal_number(20))\n\tprint(find_n_"}
{"ID": 425, "source": "MBPP:62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t", "predict": "<s> \"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"\ndef smallest_num(xs):\n  return min(xs)\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 427, "source": "MBPP:64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\ndef subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 431, "source": "MBPP:68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): \n\tif len(A) <= 1: \n\t\treturn True\n\treturn all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n\n\ndef is_Monotonic(A): "}
{"ID": 432, "source": "MBPP:69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"\ndef is_sublist(l, s):\n\treturn s in l\n\ndef is_sublist_2(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_3(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_4(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_5(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_6(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_7(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_8(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_9(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_10(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_11(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_12(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_13(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_14(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_15(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_16(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_17(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_18(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_19(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_20(l, s):\n\treturn s == l[0:len(s)]\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn s in l\n\ndef is_sublist_2(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_3(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_4(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_5(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_6(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_7(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_8(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_9(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_10(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_11(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_12(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_13(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_14(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_15(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_16(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_17(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_18(l, s):\n\treturn s == l[0:len(s)]\n\ndef is_sublist_19(l, s):\n\treturn s == l[:len(s)]\n\ndef is_sublist_20(l, s):\n\treturn s == l[0:len(s)]\n\n"}
{"ID": 435, "source": "MBPP:72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\"\"\"\ndef dif_Square(n): \n\tif n%2 == 0: \n\t\treturn False\n\telse: \n\t\tfor i in range(1, int(n**0.5)): \n\t\t\tif n % i == 0: \n\t\t\t\treturn True\n\t\treturn False\n\n# Driver Code \nn = 10\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 11\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 12\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 13\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 14\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 15\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 16\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 17\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 18\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 19\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 20\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 21\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\n# Driver Code \nn = 10\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 11\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 12\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 13\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 14\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 15\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 16\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 17\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 18\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 19\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 20\nif (dif_Square(n)): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 21\nif (dif_Square(n)): \n\tprint(\"Yes\") "}
{"ID": 436, "source": "MBPP:73", "prompt": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\n\"\"\"\ndef multiple_split(text):\n\treturn re.split(r'[;, ]', text)\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the string reversed.\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\"\"\"\ndef reverse_string(s):\n\treturn s[::-1]\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the first non-repeating character in it. If it doesn't exist, return '_'.\n\nExample:\nGiven s = \"google\", return \"g\".\n\"\"\"\ndef first_non_repeating_char(s):\n\tchar_count = {}\n\tfor char in s:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\n\tfor char in char_count:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\n\treturn '_'\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the first non-repeating character in it. If it doesn't exist, return '_'.\n\nExample:\nGiven s = \"google\", return \"g\".\n\"\"\"\ndef first_non_repeating_char(s):\n\tchar_count = {}\n\tfor char in s:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\n\tfor char in char_count:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\n\treturn '_'\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the first non-repeating character in it. If it doesn't exist, return '_'.\n\nExample:\nGiven s = \"google\", return \"g\".\n\"\"\"\ndef first_non_repeating_char(s):\n\tchar_count = {}\n\tfor char in s:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "def reverse_string(s):\n\treturn s[::-1]\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the first non-repeating character in it. If it doesn't exist, return '_'.\n\nExample:\nGiven s = \"google\", return \"g\".\n\"\"\"\ndef first_non_repeating_char(s):\n\tchar_count = {}\n\tfor char in s:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\n\tfor char in char_count:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\n\treturn '_'\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the first non-repeating character in it. If it doesn't exist, return '_'.\n\nExample:\nGiven s = \"google\", return \"g\".\n\"\"\"\ndef first_non_repeating_char(s):\n\tchar_count = {}\n\tfor char in s:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\n\tfor char in char_count:\n\t\tif char_count[char] == 1:\n\t\t\treturn char\n\n\treturn '_'\n\n\n\"\"\"\nWrite a function that takes a string as input and returns the first non-repeating character in it. If it doesn't exist, return '_'."}
{"ID": 437, "source": "MBPP:74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"\ndef is_samepatterns(colors, patterns):    \n\tif len(colors) != len(patterns):\n\t\treturn False\n\tfor i in range(len(colors)):\n\t\tif colors[i] != patterns[i]:\n\t\t\treturn False\n\treturn True\n\ndef is_samepatterns_2(colors, patterns):\n\treturn colors == patterns\n\ndef is_samepatterns_3(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_4(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_5(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_6(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_7(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_8(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_9(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_10(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_11(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_12(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_13(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_14(colors, patterns):\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True\n\ndef is_samepatterns_2(colors, patterns):\n\treturn colors == patterns\n\ndef is_samepatterns_3(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_4(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_5(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_6(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_7(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_8(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_9(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_10(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_11(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_12(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_13(colors, patterns):\n\treturn all(colors[i] == patterns[i] for i in range(len(colors)))\n\ndef is_samepatterns_14(colors, patterns):"}
{"ID": 439, "source": "MBPP:76", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n):\n\treturn m*n\n\nprint(count_Squares(2,3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a square.\n\"\"\"\ndef count_Rectangles(m):\n\treturn m*m\n\nprint(count_Rectangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a square.\n\"\"\"\ndef count_Triangles(m):\n\treturn m*m\n\nprint(count_Triangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a square.\n\"\"\"\ndef count_Circles(m):\n\treturn m*m\n\nprint(count_Circles(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m):\n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m):\n\treturn m*m\n\nprint(count_Rectangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a circle.\n\"\"\"\ndef count_Triangles_in_circle(m):\n\treturn m*m\n\nprint(count_Triangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a circle.\n\"\"\"\ndef count_Circles_in_circle(m):\n\treturn m*m\n\nprint(count_Circles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m):\n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m):\n\treturn m*m\n\nprint(count_Rect", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn m*n\n\nprint(count_Squares(2,3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a square.\n\"\"\"\ndef count_Rectangles(m):\n\treturn m*m\n\nprint(count_Rectangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a square.\n\"\"\"\ndef count_Triangles(m):\n\treturn m*m\n\nprint(count_Triangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a square.\n\"\"\"\ndef count_Circles(m):\n\treturn m*m\n\nprint(count_Circles(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m):\n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m):\n\treturn m*m\n\nprint(count_Rectangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a circle.\n\"\"\"\ndef count_Triangles_in_circle(m):\n\treturn m*m\n\nprint(count_Triangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a circle.\n\"\"\"\ndef count_Circles_in_circle(m):\n\treturn m*m\n\nprint(count_Circles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m):\n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m):"}
{"ID": 445, "source": "MBPP:82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * 3.14 * (r**3)\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * (r**2) * h\n\nprint(volume_cylinder(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3) * 3.14 * (r**2) * h\n\nprint(volume_cone(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l, w, h):\n\treturn l * w * h\n\nprint(volume_cuboid(5, 10, 15))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l, w, h):\n\treturn l * w * h\n\nprint(volume_rectangular_prism(5, 10, 15))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn (1/2) * b * h\n\nprint(volume_triangular_prism(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn (1/3) * b * h\n\nprint(volume_pyramid(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * 3.14 * (r**3)\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (4/3) * 3.14 * (r**3)\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * (r**2) * h\n\nprint(volume_cylinder(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1/3) * 3.14 * (r**2) * h\n\nprint(volume_cone(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l, w, h):\n\treturn l * w * h\n\nprint(volume_cuboid(5, 10, 15))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l, w, h):\n\treturn l * w * h\n\nprint(volume_rectangular_prism(5, 10, 15))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn (1/2) * b * h\n\nprint(volume_triangular_prism(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn (1/3) * b * h\n\nprint(volume_pyramid(5, 10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * 3.14 * (r**3)\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):"}
{"ID": 447, "source": "MBPP:84", "prompt": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the n-th number in newman conway sequence.\n\"\"\"\ndef sequence(n): \n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn sequence(n-1) + sequence(n-2)\n\ndef newman_conway(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway(n-1) + newman_conway(n-2)\n\ndef newman_conway_sequence(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence(n-1) + newman_conway_sequence(n-2)\n\ndef newman_conway_sequence_2(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_2(n-1) + newman_conway_sequence_2(n-2)\n\ndef newman_conway_sequence_3(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_3(n-1) + newman_conway_sequence_3(n-2)\n\ndef newman_conway_sequence_4(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_4(n-1) + newman_conway_sequence_4(n-2)\n\ndef newman_conway_sequence_5(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_5(n-1) + newman_conway_sequence_5(n-2)\n\ndef newman_conway_sequence_6(n):\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 1\n\telse:\n\t\treturn sequence(n-1) + sequence(n-2)\n\ndef newman_conway(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway(n-1) + newman_conway(n-2)\n\ndef newman_conway_sequence(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence(n-1) + newman_conway_sequence(n-2)\n\ndef newman_conway_sequence_2(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_2(n-1) + newman_conway_sequence_2(n-2)\n\ndef newman_conway_sequence_3(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_3(n-1) + newman_conway_sequence_3(n-2)\n\ndef newman_conway_sequence_4(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_4(n-1) + newman_conway_sequence_4(n-2)\n\ndef newman_conway_sequence_5(n):\n\tif n == 1:\n\t\treturn 1\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn newman_conway_sequence_5(n-1) + newman_conway_sequence_5(n-2)\n\ndef newman_conway_sequence_6(n):\n\t"}
{"ID": 448, "source": "MBPP:85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 3.14 * r ** 2 * h / 3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6 * s ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s ** 3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_rectangularprism(l, w, h):\n\treturn 2 * l * w + 2 * l * h + 2 * w * h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a triangular prism.\n\"\"\"\ndef surfacearea_triangularprism(b, h):\n\treturn 2 * b * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 3.14 * r ** 2 * h / 3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6 * s ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):"}
{"ID": 449, "source": "MBPP:86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"\ndef centered_hexagonal_number(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn int((n * (n + 1)) / 2)\n\n\nif __name__ == \"__main__\":\n\tprint(centered_hexagonal_number(1))\n\tprint(centered_hexagonal_number(2))\n\tprint(centered_hexagonal_number(3))\n\tprint(centered_hexagonal_number(4))\n\tprint(centered_hexagonal_number(5))\n\tprint(centered_hexagonal_number(6))\n\tprint(centered_hexagonal_number(7))\n\tprint(centered_hexagonal_number(8))\n\tprint(centered_hexagonal_number(9))\n\tprint(centered_hexagonal_number(10))\n\tprint(centered_hexagonal_number(11))\n\tprint(centered_hexagonal_number(12))\n\tprint(centered_hexagonal_number(13))\n\tprint(centered_hexagonal_number(14))\n\tprint(centered_hexagonal_number(15))\n\tprint(centered_hexagonal_number(16))\n\tprint(centered_hexagonal_number(17))\n\tprint(centered_hexagonal_number(18))\n\tprint(centered_hexagonal_number(19))\n\tprint(centered_hexagonal_number(20))\n\tprint(centered_hexagonal_number(21))\n\tprint(centered_hexagonal_number(22))\n\tprint(centered_hexagonal_number(23))\n\tprint(centered_hexagonal_number(24))\n\tprint(centered_hexagonal_number(25))\n\tprint(centered_hexagonal_number(26))\n\tprint(centered_hexagonal_number(27))\n\tprint(centered_hexagonal_number(28))\n\tprint(centered_hexagonal_number(29))\n\tprint(centered_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(centered_hexagonal_number(1))\n\tprint(centered_hexagonal_number(2))\n\tprint(centered_hexagonal_number(3))\n\tprint(centered_hexagonal_number(4))\n\tprint(centered_hexagonal_number(5))\n\tprint(centered_hexagonal_number(6))\n\tprint(centered_hexagonal_number(7))\n\tprint(centered_hexagonal_number(8))\n\tprint(centered_hexagonal_number(9))\n\tprint(centered_hexagonal_number(10))\n\tprint(centered_hexagonal_number(11))\n\tprint(centered_hexagonal_number(12))\n\tprint(centered_hexagonal_number(13))\n\tprint(centered_hexagonal_number(14))\n\tprint(centered_hexagonal_number(15))\n\tprint(centered_hexagonal_number(16))\n\tprint(centered_hexagonal_number(17))\n\tprint(centered_hexagonal_number(18))\n\tprint(centered_hexagonal_number(19))\n\tprint(centered_hexagonal_number(20))\n\tprint(centered_hexagonal_number(21))\n\tprint(centered_hexagonal_number(22))\n\tprint(centered_hexagonal_number(23))\n\tprint(centered_hexagonal_number(24))\n\tprint(centered_hexagonal_number(25))\n\tprint(centered_hexagonal_number(26))\n\tprint(centered_hexagonal_number(27))\n\tprint(centered_hexagonal_number(28))\n\tprint(centered_hexagonal_number(29))\n\tprint(centered_"}
{"ID": 450, "source": "MBPP:87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\treturn {**dict1, **dict2, **dict3}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 452, "source": "MBPP:89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"\ndef closest_num(N):\n\t\"\"\"\n\t:type N: int\n\t:rtype: int\n\t\"\"\"\n\tif N == 1:\n\t\treturn 0\n\telse:\n\t\treturn N - 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 453, "source": "MBPP:90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"\ndef len_log(list1):\n\treturn max(len(x) for x in list1)\n\nprint(len_log([\"hello\", \"world\", \"python\", \"java\", \"c++\"]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 456, "source": "MBPP:93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"\ndef power(a,b):\n\tif b == 0:\n\t\treturn 1\n\telse:\n\t\treturn a * power(a,b-1)\n\nprint(power(2,3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 459, "source": "MBPP:96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"\ndef divisor(n):\n\tcount = 0\n\tfor i in range(1, n+1):\n\t\tif n % i == 0:\n\t\t\tcount += 1\n\treturn count\n\nprint(divisor(10))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer.\n\"\"\"\ndef sum_digits(n):\n\tsum = 0\n\twhile n > 0:\n\t\tsum += n % 10\n\t\tn //= 10\n\treturn sum\n\nprint(sum_digits(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the first and last digit.\n\"\"\"\ndef sum_digits_except_first_last(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(1, len(n)-1):\n\t\tsum += int(n[i])\n\treturn sum\n\nprint(sum_digits_except_first_last(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the first digit.\n\"\"\"\ndef sum_digits_except_first(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(1, len(n)):\n\t\tsum += int(n[i])\n\treturn sum\n\nprint(sum_digits_except_first(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the last digit.\n\"\"\"\ndef sum_digits_except_last(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(len(n)-1):\n\t\tsum += int(n[i])\n\treturn sum\n\nprint(sum_digits_except_last(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the first and last digit.\n\"\"\"\ndef sum_digits_except_first_last(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tn //= 10\n\treturn sum\n\nprint(sum_digits(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the first and last digit.\n\"\"\"\ndef sum_digits_except_first_last(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(1, len(n)-1):\n\t\tsum += int(n[i])\n\treturn sum\n\nprint(sum_digits_except_first_last(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the first digit.\n\"\"\"\ndef sum_digits_except_first(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(1, len(n)):\n\t\tsum += int(n[i])\n\treturn sum\n\nprint(sum_digits_except_first(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the last digit.\n\"\"\"\ndef sum_digits_except_last(n):\n\tsum = 0\n\tn = str(n)\n\tfor i in range(len(n)-1):\n\t\tsum += int(n[i])\n\treturn sum\n\nprint(sum_digits_except_last(1234))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given integer except the first and last digit.\n\"\"\""}
{"ID": 460, "source": "MBPP:97", "prompt": "\"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find frequency count of list of lists.\n\"\"\"\ndef frequency_lists(list1):\n\t\"\"\"\n\t:param list1: list of lists\n\t:return: frequency count of list of lists\n\t\"\"\"\n\tfrequency = {}\n\tfor i in list1:\n\t\tif i in frequency:\n\t\t\tfrequency[i] += 1\n\t\telse:\n\t\t\tfrequency[i] = 1\n\treturn frequency\n\n\nif __name__ == '__main__':\n\tlist1 = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, ", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tlist1 = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, "}
{"ID": 463, "source": "MBPP:100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\n\"\"\"\ndef next_smallest_palindrome(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tnum_str = str(num)\n\tif num_str == num_str[::-1]:\n\t\treturn num + 1\n\telse:\n\t\treturn int(num_str[::-1])\n\n\nif __name__ == '__main__':\n\tprint(next_smallest_palindrome(123456789))\n\tprint(next_smallest_palindrome(1234567899))\n\tprint(next_smallest_palindrome(12345678999))\n\tprint(next_smallest_palindrome(123456789999))\n\tprint(next_smallest_palindrome(1234567899999))\n\tprint(next_smallest_palindrome(12345678999999))\n\tprint(next_smallest_palindrome(123456789999999))\n\tprint(next_smallest_palindrome(1234567899999999))\n\tprint(next_smallest_palindrome(12345678999999999))\n\tprint(next_smallest_palindrome(123456789999999999))\n\tprint(next_smallest_palindrome(1234567899999999999))\n\tprint(next_smallest_palindrome(12345678999999999999))\n\tprint(next_smallest_palindrome(123456789999999999999))\n\tprint(next_smallest_palindrome(1234567899999999999999))\n\tprint(next_smallest_palindrome(12", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(next_smallest_palindrome(123456789))\n\tprint(next_smallest_palindrome(1234567899))\n\tprint(next_smallest_palindrome(12345678999))\n\tprint(next_smallest_palindrome(123456789999))\n\tprint(next_smallest_palindrome(1234567899999))\n\tprint(next_smallest_palindrome(12345678999999))\n\tprint(next_smallest_palindrome(123456789999999))\n\tprint(next_smallest_palindrome(1234567899999999))\n\tprint(next_smallest_palindrome(12345678999999999))\n\tprint(next_smallest_palindrome(123456789999999999))\n\tprint(next_smallest_palindrome(1234567899999999999))\n\tprint(next_smallest_palindrome(12345678999999999999))\n\tprint(next_smallest_palindrome(123456789999999999999))\n\tprint(next_smallest_palindrome(1234567899999999999999))\n\tprint(next_smallest_palindrome(12"}
{"ID": 470, "source": "MBPP:107", "prompt": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\n\"\"\"\ndef count_Hexadecimal(L,R) :  \n\tcount = 0\n\tfor i in range(L,R+1) :\n\t\tif i >= 0 and i <= 9 :\n\t\t\tcount += 1\n\t\telif i >= 10 and i <= 15 :\n\t\t\tcount += 1\n\t\telif i >= 16 and i <= 21 :\n\t\t\tcount += 1\n\t\telif i >= 22 and i <= 27 :\n\t\t\tcount += 1\n\t\telif i >= 28 and i <= 33 :\n\t\t\tcount += 1\n\t\telif i >= 34 and i <= 39 :\n\t\t\tcount += 1\n\t\telif i >= 40 and i <= 45 :\n\t\t\tcount += 1\n\t\telif i >= 46 and i <= 51 :\n\t\t\tcount += 1\n\t\telif i >= 52 and i <= 57 :\n\t\t\tcount += 1\n\t\telif i >= 58 and i <= 63 :\n\t\t\tcount += 1\n\t\telif i >= 64 and i <= 71 :\n\t\t\tcount += 1\n\t\telif i >= 72 and i <= 79 :\n\t\t\tcount += 1\n\t\telif i >= 80 and i <= 87 :\n\t\t\tcount += 1\n\t\telif i >= 88 and i <= 95 :\n\t\t\tcount += 1\n\t\telif i >= 96 and i <= 103 :\n\t\t\tcount += 1\n\t\telif i >= 104 and i <= 111 :\n\t\t\tcount += 1\n\t\telif i >= 112 and i <= 119 :\n\t\t\tcount += 1\n\t\telif i >= 120 and i <= 127 :\n\t\t\tcount += 1\n\t\telif i >= 128 and i <= 135 :\n\t\t\tcount += 1\n\t\telif i >= 136 and i <= 143 :\n\t\t\tcount += 1\n\t\telif i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i >= 0 and i <= 9 :\n\t\t\tcount += 1\n\t\telif i >= 10 and i <= 15 :\n\t\t\tcount += 1\n\t\telif i >= 16 and i <= 21 :\n\t\t\tcount += 1\n\t\telif i >= 22 and i <= 27 :\n\t\t\tcount += 1\n\t\telif i >= 28 and i <= 33 :\n\t\t\tcount += 1\n\t\telif i >= 34 and i <= 39 :\n\t\t\tcount += 1\n\t\telif i >= 40 and i <= 45 :\n\t\t\tcount += 1\n\t\telif i >= 46 and i <= 51 :\n\t\t\tcount += 1\n\t\telif i >= 52 and i <= 57 :\n\t\t\tcount += 1\n\t\telif i >= 58 and i <= 63 :\n\t\t\tcount += 1\n\t\telif i >= 64 and i <= 71 :\n\t\t\tcount += 1\n\t\telif i >= 72 and i <= 79 :\n\t\t\tcount += 1\n\t\telif i >= 80 and i <= 87 :\n\t\t\tcount += 1\n\t\telif i >= 88 and i <= 95 :\n\t\t\tcount += 1\n\t\telif i >= 96 and i <= 103 :\n\t\t\tcount += 1\n\t\telif i >= 104 and i <= 111 :\n\t\t\tcount += 1\n\t\telif i >= 112 and i <= 119 :\n\t\t\tcount += 1\n\t\telif i >= 120 and i <= 127 :\n\t\t\tcount += 1\n\t\telif i >= 128 and i <= 135 :\n\t\t\tcount += 1\n\t\telif i >= 136 and i <= 143 :\n\t\t\tcount += 1"}
{"ID": 471, "source": "MBPP:108", "prompt": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\t", "predict": "<s> \"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\n\theap = []\n\tfor i in num1:\n\t\theapq.heappush(heap,i)\n\tfor i in num2:\n\t\theapq.heappush(heap,i)\n\tfor i in num3:\n\t\theapq.heappush(heap,i)\n\treturn heapq.heappop(heap)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 472, "source": "MBPP:109", "prompt": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\n\"\"\"\ndef odd_Equivalent(s,n): \n\tcount = 0\n\tfor i in range(n): \n\t\tif s[i] != s[i+1]: \n\t\t\tcount += 1\n\treturn count%2\n\ndef odd_rotations(s): \n\tn = len(s) \n\tif n == 1: \n\t\treturn 0\n\tif odd_Equivalent(s,n) == 1: \n\t\treturn 1\n\telse: \n\t\treturn 0\n\ns = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"}
{"ID": 475, "source": "MBPP:112", "prompt": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the perimeter of a cylinder.\n\"\"\"\ndef perimeter(diameter,height) : \n\treturn 2 * 3.14 * diameter + 2 * 3.14 * diameter * height\n\nprint(perimeter(10,20))\n\n\"\"\"\nWrite a python function to find the area of a circle.\n\"\"\"\ndef area(radius) : \n\treturn 3.14 * radius * radius\n\nprint(area(10))\n\n\"\"\"\nWrite a python function to find the volume of a cylinder.\n\"\"\"\ndef volume(radius,height) : \n\treturn 3.14 * radius * radius * height\n\nprint(volume(10,20))\n\n\"\"\"\nWrite a python function to find the area of a triangle.\n\"\"\"\ndef area(base,height) : \n\treturn 0.5 * base * height\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a rectangle.\n\"\"\"\ndef area(length,breadth) : \n\treturn length * breadth\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a square.\n\"\"\"\ndef area(side) : \n\treturn side * side\n\nprint(area(10))\n\n\"\"\"\nWrite a python function to find the area of a rhombus.\n\"\"\"\ndef area(diagonal_1,diagonal_2) : \n\treturn 0.5 * diagonal_1 * diagonal_2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a trapezium.\n\"\"\"\ndef area(base_1,base_2,height) : \n\treturn 0.5 * (base_1 + base_2) * height\n\nprint(area(10,20,30))\n\n\"\"\"\nWrite a python function to find the area of a parallelogram.\n\"\"\"\ndef area(base,height) : \n\treturn base * height\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a pentagon.\n\"\"\"\ndef area(side,apothem) :", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2 * 3.14 * diameter + 2 * 3.14 * diameter * height\n\nprint(perimeter(10,20))\n\n\"\"\"\nWrite a python function to find the area of a circle.\n\"\"\"\ndef area(radius) : \n\treturn 3.14 * radius * radius\n\nprint(area(10))\n\n\"\"\"\nWrite a python function to find the volume of a cylinder.\n\"\"\"\ndef volume(radius,height) : \n\treturn 3.14 * radius * radius * height\n\nprint(volume(10,20))\n\n\"\"\"\nWrite a python function to find the area of a triangle.\n\"\"\"\ndef area(base,height) : \n\treturn 0.5 * base * height\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a rectangle.\n\"\"\"\ndef area(length,breadth) : \n\treturn length * breadth\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a square.\n\"\"\"\ndef area(side) : \n\treturn side * side\n\nprint(area(10))\n\n\"\"\"\nWrite a python function to find the area of a rhombus.\n\"\"\"\ndef area(diagonal_1,diagonal_2) : \n\treturn 0.5 * diagonal_1 * diagonal_2\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a trapezium.\n\"\"\"\ndef area(base_1,base_2,height) : \n\treturn 0.5 * (base_1 + base_2) * height\n\nprint(area(10,20,30))\n\n\"\"\"\nWrite a python function to find the area of a parallelogram.\n\"\"\"\ndef area(base,height) : \n\treturn base * height\n\nprint(area(10,20))\n\n\"\"\"\nWrite a python function to find the area of a pentagon.\n\"\"\"\ndef area(side,apothem) :"}
{"ID": 476, "source": "MBPP:113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"\ndef check_integer(text):\n\ttry:\n\t\tint(text)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n\ndef check_integer_2(text):\n\treturn text.isdigit()\n\n\ndef check_integer_3(text):\n\treturn text.isdigit() and not '.' in text\n\n\ndef check_integer_4(text):\n\treturn text.isdigit() and text[0] != '0'\n\n\ndef check_integer_5(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text\n\n\ndef check_integer_6(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text\n\n\ndef check_integer_7(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text\n\n\ndef check_integer_8(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text\n\n\ndef check_integer_9(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text and not 'E' in text\n\n\ndef check_integer_10(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text and not 'E' in text and not ' ' in text\n\n\ndef check_integer_11(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text and not 'E' in text and not ' ' in text and not ',' in text\n\n\ndef check_integer_12(text):\n\treturn text.isdigit() and text[0] != '0' and not", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\n\ndef check_integer_2(text):\n\treturn text.isdigit()\n\n\ndef check_integer_3(text):\n\treturn text.isdigit() and not '.' in text\n\n\ndef check_integer_4(text):\n\treturn text.isdigit() and text[0] != '0'\n\n\ndef check_integer_5(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text\n\n\ndef check_integer_6(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text\n\n\ndef check_integer_7(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text\n\n\ndef check_integer_8(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text\n\n\ndef check_integer_9(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text and not 'E' in text\n\n\ndef check_integer_10(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text and not 'E' in text and not ' ' in text\n\n\ndef check_integer_11(text):\n\treturn text.isdigit() and text[0] != '0' and not '.' in text and not '-' in text and not '+' in text and not 'e' in text and not 'E' in text and not ' ' in text and not ',' in text\n\n\ndef check_integer_12(text):"}
{"ID": 478, "source": "MBPP:115", "prompt": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\n\"\"\"\ndef empty_dit(list1):\n\tfor i in list1:\n\t\tif i:\n\t\t\treturn False\n\treturn True\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {'g':7}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {'g':7}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {'g':7}, {'", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {'g':7}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {'g':7}, {}]\nprint(empty_dit(list1))\n\nlist1 = [{'a':1}, {'b':2}, {'c':3}, {'d':4}, {'e':5}, {'f':6}, {'g':7}, {'"}
{"ID": 483, "source": "MBPP:120", "prompt": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\"\"\"\ndef max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\treturn max_product\n\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]\nprint(max_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14"}
{"ID": 485, "source": "MBPP:122", "prompt": "\"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find n’th smart number.\n\"\"\"\ndef smartNumber(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn smartNumber(n-1) + smartNumber(n-2) \n\n# Driver program to test above function \nn = 5\nprint(smartNumber(n)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 488, "source": "MBPP:125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"\ndef find_length(string, n): \n\tcount = 0\n\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tcount += 1\n\treturn count \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n ==", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tcount += 1\n\treturn count \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n == 0: \n\t\treturn 0\n\tcount = 0\n\tmaxCount = 0\n\tfor i in range(n): \n\t\tif s[i] == '0': \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\tmaxCount = max(maxCount, count) \n\treturn maxCount \n\ndef findMaxDiff(s): \n\tn = len(s) \n\tif n =="}
{"ID": 491, "source": "MBPP:128", "prompt": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\t", "predict": "<s> \"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\n\"\"\"\ndef long_words(n, str):\n\treturn [word for word in str if len(word) > n]\n\nprint(long_words(3, ['hello', 'world', 'python', 'java', 'c++']))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a, b, c):\n\treturn max(a, b, c)\n\nprint(max_of_three(1, 2, 3))\n\n\"\"\"\nWrite a function to find the maximum of three given numbers.\n\"\"\"\ndef max_of_three(a,"}
{"ID": 494, "source": "MBPP:131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to reverse only the vowels of a given string.\n\"\"\"\ndef reverse_vowels(str1):\n\tvowels = ['a','e','i','o','u']\n\tstr2 = list(str1)\n\tfor i in range(len(str2)):\n\t\tif str2[i].lower() in vowels:\n\t\t\tfor j in range(len(str2)-1,i,-1):\n\t\t\t\tif str2[j].lower() in vowels:\n\t\t\t\t\tstr2[i],str2[j] = str2[j],str2[i]\n\t\t\t\t\tbreak\n\treturn ''.join(str2)\n\nprint(reverse_vowels('hello'))\nprint(reverse_vowels('hello world'))\nprint(reverse_vowels('hello world how are you'))\nprint(reverse_vowels('hello world how are you doing'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(reverse_vowels('hello'))\nprint(reverse_vowels('hello world'))\nprint(reverse_vowels('hello world how are you'))\nprint(reverse_vowels('hello world how are you doing'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today'))\nprint(reverse_vowels('hello world how are you doing today"}
{"ID": 495, "source": "MBPP:132", "prompt": "\"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert tuple to a string.\n\"\"\"\ndef tup_string(tup1):\n\treturn str(tup1)\n\nprint(tup_string((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert string to a tuple.\n\"\"\"\ndef str_tup(str1):\n\treturn tuple(str1)\n\nprint(str_tup(\"hello\"))\n\n\"\"\"\nWrite a function to convert list to a tuple.\n\"\"\"\ndef list_tup(list1):\n\treturn tuple(list1)\n\nprint(list_tup([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to convert tuple to a list.\n\"\"\"\ndef tup_list(tup1):\n\treturn list(tup1)\n\nprint(tup_list((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert set to a tuple.\n\"\"\"\ndef set_tup(set1):\n\treturn tuple(set1)\n\nprint(set_tup({1,2,3,4,5}))\n\n\"\"\"\nWrite a function to convert tuple to a set.\n\"\"\"\ndef tup_set(tup1):\n\treturn set(tup1)\n\nprint(tup_set((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert dictionary to a tuple.\n\"\"\"\ndef dict_tup(dict1):\n\treturn tuple(dict1.items())\n\nprint(dict_tup({1:\"hello\",2:\"world\",3:\"python\"}))\n\n\"\"\"\nWrite a function to convert tuple to a dictionary.\n\"\"\"\ndef tup_dict(tup1):\n\treturn dict(tup1)\n\nprint(tup_dict(((1,\"hello\"),(2,\"world\"),(3,\"python\"))))\n\n\"\"\"\nWrite a function to convert list to a dictionary.\n\"\"\"\ndef list_dict(list1):\n\treturn dict(list1)\n\nprint(list_dict([(1,\"hello\"),(2,\"world\"),(3,\"python\")]))\n\n\"\"\"\nWrite a function to convert dictionary to a list.\n\"\"\"\ndef dict_list(dict1):\n\treturn list(dict", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn str(tup1)\n\nprint(tup_string((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert string to a tuple.\n\"\"\"\ndef str_tup(str1):\n\treturn tuple(str1)\n\nprint(str_tup(\"hello\"))\n\n\"\"\"\nWrite a function to convert list to a tuple.\n\"\"\"\ndef list_tup(list1):\n\treturn tuple(list1)\n\nprint(list_tup([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to convert tuple to a list.\n\"\"\"\ndef tup_list(tup1):\n\treturn list(tup1)\n\nprint(tup_list((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert set to a tuple.\n\"\"\"\ndef set_tup(set1):\n\treturn tuple(set1)\n\nprint(set_tup({1,2,3,4,5}))\n\n\"\"\"\nWrite a function to convert tuple to a set.\n\"\"\"\ndef tup_set(tup1):\n\treturn set(tup1)\n\nprint(tup_set((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert dictionary to a tuple.\n\"\"\"\ndef dict_tup(dict1):\n\treturn tuple(dict1.items())\n\nprint(dict_tup({1:\"hello\",2:\"world\",3:\"python\"}))\n\n\"\"\"\nWrite a function to convert tuple to a dictionary.\n\"\"\"\ndef tup_dict(tup1):\n\treturn dict(tup1)\n\nprint(tup_dict(((1,\"hello\"),(2,\"world\"),(3,\"python\"))))\n\n\"\"\"\nWrite a function to convert list to a dictionary.\n\"\"\"\ndef list_dict(list1):\n\treturn dict(list1)\n\nprint(list_dict([(1,\"hello\"),(2,\"world\"),(3,\"python\")]))\n\n\"\"\"\nWrite a function to convert dictionary to a list.\n\"\"\"\ndef dict_list(dict1):"}
{"ID": 498, "source": "MBPP:135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"\ndef hexagonal_num(n): \n\treturn n * (2 * n - 1)\n\ndef find_hexagonal_num(n):\n\treturn hexagonal_num(n)\n\nif __name__ == \"__main__\":\n\tprint(find_hexagonal_num(1))\n\tprint(find_hexagonal_num(2))\n\tprint(find_hexagonal_num(3))\n\tprint(find_hexagonal_num(4))\n\tprint(find_hexagonal_num(5))\n\tprint(find_hexagonal_num(6))\n\tprint(find_hexagonal_num(7))\n\tprint(find_hexagonal_num(8))\n\tprint(find_hexagonal_num(9))\n\tprint(find_hexagonal_num(10))\n\tprint(find_hexagonal_num(11))\n\tprint(find_hexagonal_num(12))\n\tprint(find_hexagonal_num(13))\n\tprint(find_hexagonal_num(14))\n\tprint(find_hexagonal_num(15))\n\tprint(find_hexagonal_num(16))\n\tprint(find_hexagonal_num(17))\n\tprint(find_hexagonal_num(18))\n\tprint(find_hexagonal_num(19))\n\tprint(find_hexagonal_num(20))\n\tprint(find_hexagonal_num(21))\n\tprint(find_hexagonal_num(22))\n\tprint(find_hexagonal_num(23))\n\tprint(find_hexagonal_num(24))\n\tprint(find_hexagonal_num(25))\n\tprint(find_hexagonal_num(26))\n\tprint(find_hexagonal_num(27))\n\tprint(find_hexagonal_num(28))\n\tprint(find_hexagonal_num(29))\n\tprint(find_hexagonal_num(30))\n\tprint(find_hexagonal_num(31))\n\tprint(find_hexagonal", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(find_hexagonal_num(1))\n\tprint(find_hexagonal_num(2))\n\tprint(find_hexagonal_num(3))\n\tprint(find_hexagonal_num(4))\n\tprint(find_hexagonal_num(5))\n\tprint(find_hexagonal_num(6))\n\tprint(find_hexagonal_num(7))\n\tprint(find_hexagonal_num(8))\n\tprint(find_hexagonal_num(9))\n\tprint(find_hexagonal_num(10))\n\tprint(find_hexagonal_num(11))\n\tprint(find_hexagonal_num(12))\n\tprint(find_hexagonal_num(13))\n\tprint(find_hexagonal_num(14))\n\tprint(find_hexagonal_num(15))\n\tprint(find_hexagonal_num(16))\n\tprint(find_hexagonal_num(17))\n\tprint(find_hexagonal_num(18))\n\tprint(find_hexagonal_num(19))\n\tprint(find_hexagonal_num(20))\n\tprint(find_hexagonal_num(21))\n\tprint(find_hexagonal_num(22))\n\tprint(find_hexagonal_num(23))\n\tprint(find_hexagonal_num(24))\n\tprint(find_hexagonal_num(25))\n\tprint(find_hexagonal_num(26))\n\tprint(find_hexagonal_num(27))\n\tprint(find_hexagonal_num(28))\n\tprint(find_hexagonal_num(29))\n\tprint(find_hexagonal_num(30))\n\tprint(find_hexagonal_num(31))\n\tprint(find_hexagonal"}
{"ID": 501, "source": "MBPP:138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn False\n\twhile n > 0: \n\t\tif n % 2 != 0: \n\t\t\treturn False\n\t\tn = n // 2\n\treturn True\n\n# Driver Code \nn = 10\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 11\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 12\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 13\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 14\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 15\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 16\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 17\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 18\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 19\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 20\nif is_Sum_Of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n# Driver Code \nn = 10\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 11\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 12\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 13\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 14\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 15\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 16\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 17\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 18\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 19\nif is_Sum_Of_Powers_Of_Two(n): \n\tprint(\"Yes\") \nelse: \n\tprint(\"No\") \n\nn = 20\nif is_Sum_Of"}
{"ID": 502, "source": "MBPP:139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\ndef circle_circumference(r):\n\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef cylinder_surface_area(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n\treturn (1/3) * 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef cone_surface_area(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef cuboid_volume(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef cuboid_surface_area(l, w, h):\n\treturn 2 * (l * w + w * h + l * h)\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef pyramid_volume(l, w, h):\n\treturn (1/3) * l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef sphere_surface_area(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef cylinder_surface_area(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef cone_volume(r, h):\n\treturn (1/3) * 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef cone_surface_area(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef cuboid_volume(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef cuboid_surface_area(l, w, h):\n\treturn 2 * (l * w + w * h + l * h)\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef pyramid_volume(l, w, h):\n\treturn (1/3) * l * w * h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\n"}
{"ID": 506, "source": "MBPP:143", "prompt": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\t", "predict": "<s> \"\"\"\nWrite a function to find number of lists present in the given tuple.\n\"\"\"\ndef find_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists(Input))\n\n\n\"\"\"\nWrite a function to find the maximum number of lists present in the given tuple.\n\"\"\"\ndef find_max_lists(Input): \n\tcount = 0\n\tfor i in Input:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\nInput = (1, [2, 3], [4, 5], [6, 7], 8)\nprint(find_max_lists"}
{"ID": 510, "source": "MBPP:147", "prompt": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\n\"\"\"\ndef max_path_sum(tri, m, n): \n\t# Initialize the maximum sum as a very small value \n\tmax_sum = -99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmax_sum = -99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}
{"ID": 512, "source": "MBPP:149", "prompt": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \n\tif n == 0 or n == 1: \n\t\treturn n \n\tmax_len = 0\n\tfor i in range(n-1): \n\t\tcurr_len = 1\n\t\tfor j in range(i+1, n): \n\t\t\tif arr[j] - arr[i] == arr[j-1] - arr[i-1]: \n\t\t\t\tcurr_len += 1\n\t\t\telse: \n\t\t\t\tbreak\n\t\tmax_len = max(max_len, curr_len) \n\treturn max_len \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nn = len(arr) \nprint(\"Length of the longest subsequence is \", longest_subseq_with_diff_one(arr,"}
{"ID": 513, "source": "MBPP:150", "prompt": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\"\"\"\ndef does_Contain_B(a,b,c): \n\tif a==b: \n\t\treturn True\n\telif a==c: \n\t\treturn True\n\telif b==c: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain_A(a,b,c): \n\tif a==b: \n\t\treturn True\n\telif a==c: \n\t\treturn True\n\telif b==c: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain_C(a,b,c): \n\tif a==b: \n\t\treturn True\n\telif a==c: \n\t\treturn True\n\telif b==c: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain(a,b,c,n): \n\tif n==1: \n\t\treturn does_Contain_A(a,b,c)\n\telif n==2: \n\t\treturn does_Contain_B(a,b,c)\n\telif n==3: \n\t\treturn does_Contain_C(a,b,c)\n\telse: \n\t\treturn False\n\ndef does_Contain_Infinite(a,b,c,n): \n\tif n==1: \n\t\treturn does_Contain_A(a,b,c)\n\telif n==2: \n\t\treturn does_Contain_B(a,b,c)\n\telif n==3: \n\t\treturn does_Contain_C(a,b,c)\n\telse: \n\t\treturn does_Contain_Infinite(a,b,c,n-3)\n\ndef does_Contain_Infinite_2(a,b,c,n): \n\tif n==1: \n\t\treturn does_Contain_A(a,b,c)\n\telif n==2: \n\t\treturn does_Contain_B(a,b,c)\n\telif n==3: \n\t\treturn does_Contain_C(a,b,c)\n\telse: \n\t\treturn does_Cont", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\telif a==c: \n\t\treturn True\n\telif b==c: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain_A(a,b,c): \n\tif a==b: \n\t\treturn True\n\telif a==c: \n\t\treturn True\n\telif b==c: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain_C(a,b,c): \n\tif a==b: \n\t\treturn True\n\telif a==c: \n\t\treturn True\n\telif b==c: \n\t\treturn True\n\telse: \n\t\treturn False\n\ndef does_Contain(a,b,c,n): \n\tif n==1: \n\t\treturn does_Contain_A(a,b,c)\n\telif n==2: \n\t\treturn does_Contain_B(a,b,c)\n\telif n==3: \n\t\treturn does_Contain_C(a,b,c)\n\telse: \n\t\treturn False\n\ndef does_Contain_Infinite(a,b,c,n): \n\tif n==1: \n\t\treturn does_Contain_A(a,b,c)\n\telif n==2: \n\t\treturn does_Contain_B(a,b,c)\n\telif n==3: \n\t\treturn does_Contain_C(a,b,c)\n\telse: \n\t\treturn does_Contain_Infinite(a,b,c,n-3)\n\ndef does_Contain_Infinite_2(a,b,c,n): \n\tif n==1: \n\t\treturn does_Contain_A(a,b,c)\n\telif n==2: \n\t\treturn does_Contain_B(a,b,c)\n\telif n==3: \n\t\treturn does_Contain_C(a,b,c)\n\telse: \n\t\treturn does_Cont"}
{"ID": 514, "source": "MBPP:151", "prompt": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number is co-prime or not.\n\"\"\"\ndef is_coprime(x,y):\n\tif x == 0 or y == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef is_coprime_2(x,y):\n\tif x == 0 or y == 0:\n\t\treturn False\n\telse:\n\t\treturn gcd(x,y) == 1\n\ndef gcd(a,b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b,a%b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 515, "source": "MBPP:152", "prompt": "\"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort the given array by using merge sort.\n\"\"\"\ndef merge_sort(x):\n\tif len(x) <= 1:\n\t\treturn x\n\telse:\n\t\tmid = len(x) // 2\n\t\tleft = x[:mid]\n\t\tright = x[mid:]\n\t\tleft = merge_sort(left)\n\t\tright = merge_sort(right)\n\t\treturn merge(left, right)\n\ndef merge(left, right):\n\tresult = []\n\twhile len(left) > 0 and len(right) > 0:\n\t\tif left[0] <= right[0]:\n\t\t\tresult.append(left.pop(0))\n\t\telse:\n\t\t\tresult.append(right.pop(0))\n\tif len(left) > 0:\n\t\tresult += left\n\tif len(right) > 0:\n\t\tresult += right\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 519, "source": "MBPP:156", "prompt": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\"\"\"\ndef tuple_int_str(tuple_str):\n\treturn tuple(int(i) for i in tuple_str)\n\nprint(tuple_int_str(('1', '2', '3')))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \neven numbers in the list.\n\"\"\"\ndef sum_even(list_int):\n\treturn sum(i for i in list_int if i % 2 == 0)\n\nprint(sum_even([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the odd numbers in the list.\n\"\"\"\ndef sum_squares(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 != 0)\n\nprint(sum_squares([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the even numbers in the list.\n\"\"\"\ndef sum_squares_even(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 == 0)\n\nprint(sum_squares_even([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the odd numbers in the list.\n\"\"\"\ndef sum_squares_odd(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 != 0)\n\nprint(sum_squares_odd([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the even numbers in the list.\n\"\"\"\ndef sum_squares_even(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 == 0)\n\nprint(sum_squares_even([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(tuple_int_str(('1', '2', '3')))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \neven numbers in the list.\n\"\"\"\ndef sum_even(list_int):\n\treturn sum(i for i in list_int if i % 2 == 0)\n\nprint(sum_even([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the odd numbers in the list.\n\"\"\"\ndef sum_squares(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 != 0)\n\nprint(sum_squares([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the even numbers in the list.\n\"\"\"\ndef sum_squares_even(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 == 0)\n\nprint(sum_squares_even([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the odd numbers in the list.\n\"\"\"\ndef sum_squares_odd(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 != 0)\n\nprint(sum_squares_odd([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns the sum of the \nsquares of the even numbers in the list.\n\"\"\"\ndef sum_squares_even(list_int):\n\treturn sum(i**2 for i in list_int if i % 2 == 0)\n\nprint(sum_squares_even([1, 2, 3, 4, 5]))\n\n\"\"\""}
{"ID": 520, "source": "MBPP:157", "prompt": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to reflect the run-length encoding from a list.\n\"\"\"\ndef encode_list(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: list\n\t\"\"\"\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tif i == 0:\n\t\t\tlist2.append(list1[i])\n\t\telse:\n\t\t\tif list1[i] == list1[i-1]:\n\t\t\t\tlist2[-1] += 1\n\t\t\telse:\n\t\t\t\tlist2.append(list1[i])\n\treturn list2\n\ndef decode_list(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: list\n\t\"\"\"\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tif i % 2 == 0:\n\t\t\tlist2.append(list1[i])\n\t\telse:\n\t\t\tfor j in range(list1[i]):\n\t\t\t\tlist2.append(list1[i-1])\n\treturn list2\n\ndef reflect_list(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: list\n\t\"\"\"\n\tlist2 = decode_list(list1)\n\tlist3 = encode_list(list2)\n\treturn list3\n\nif __name__ == '__main__':\n\tprint(reflect_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(reflect_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))\n\tprint(reflect_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]))\n\tprint(reflect_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]))\n\tprint(reflect_list([1, 2, 3, 4,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type list1: list\n\t:rtype: list\n\t\"\"\"\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tif i == 0:\n\t\t\tlist2.append(list1[i])\n\t\telse:\n\t\t\tif list1[i] == list1[i-1]:\n\t\t\t\tlist2[-1] += 1\n\t\t\telse:\n\t\t\t\tlist2.append(list1[i])\n\treturn list2\n\ndef decode_list(list1):\n\t\"\"\"\n\t:type list1: list\n\t:rtype: list\n\t\"\"\"\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tif i % 2 == 0:\n\t\t\tlist2.append(list1[i])\n\t\telse:\n\t\t\tfor j in range(list1[i]):\n\t\t\t\tlist2.append(list1[i-1])\n\treturn list2"}
{"ID": 522, "source": "MBPP:159", "prompt": "\"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\t", "predict": "<s> \"\"\"\nWrite a function to print the season for the given month and day.\n\"\"\"\ndef month_season(month,days):\n\tif month == 12 and days >= 22:\n\t\treturn \"Winter\"\n\telif month == 1 and days <= 20:\n\t\treturn \"Winter\"\n\telif month == 3 and days >= 20:\n\t\treturn \"Spring\"\n\telif month == 2 and days <= 19:\n\t\treturn \"Winter\"\n\telif month == 4 and days >= 21:\n\t\treturn \"Spring\"\n\telif month == 3 and days <= 20:\n\t\treturn \"Winter\"\n\telif month == 5 and days >= 21:\n\t\treturn \"Summer\"\n\telif month == 4 and days <= 20:\n\t\treturn \"Spring\"\n\telif month == 6 and days >= 21:\n\t\treturn \"Summer\"\n\telif month == 5 and days <= 20:\n\t\treturn \"Spring\"\n\telif month == 7 and days >= 22:\n\t\treturn \"Summer\"\n\telif month == 6 and days <= 21:\n\t\treturn \"Summer\"\n\telif month == 8 and days >= 23:\n\t\treturn \"Summer\"\n\telif month == 7 and days <= 22:\n\t\treturn \"Summer\"\n\telif month == 9 and days >= 23:\n\t\treturn \"Autumn\"\n\telif month == 8 and days <= 22:\n\t\treturn \"Summer\"\n\telif month == 10 and days >= 23:\n\t\treturn \"Autumn\"\n\telif month == 9 and days <= 22:\n\t\treturn \"Summer\"\n\telif month == 11 and days >= 22:\n\t\treturn \"Autumn\"\n\telif month == 10 and days <= 21:\n\t\treturn \"Autumn\"\n\telif month == 12 and days >= 22:\n\t\treturn \"Winter\"\n\telif month == 11 and days <= 21:\n\t\treturn \"Autumn\"\n\telse:\n\t\treturn \"Winter\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif month == 12 and days >= 22:\n\t\treturn \"Winter\"\n\telif month == 1 and days <= 20:\n\t\treturn \"Winter\"\n\telif month == 3 and days >= 20:\n\t\treturn \"Spring\"\n\telif month == 2 and days <= 19:\n\t\treturn \"Winter\"\n\telif month == 4 and days >= 21:\n\t\treturn \"Spring\"\n\telif month == 3 and days <= 20:\n\t\treturn \"Winter\"\n\telif month == 5 and days >= 21:\n\t\treturn \"Summer\"\n\telif month == 4 and days <= 20:\n\t\treturn \"Spring\"\n\telif month == 6 and days >= 21:\n\t\treturn \"Summer\"\n\telif month == 5 and days <= 20:\n\t\treturn \"Spring\"\n\telif month == 7 and days >= 22:\n\t\treturn \"Summer\"\n\telif month == 6 and days <= 21:\n\t\treturn \"Summer\"\n\telif month == 8 and days >= 23:\n\t\treturn \"Summer\"\n\telif month == 7 and days <= 22:\n\t\treturn \"Summer\"\n\telif month == 9 and days >= 23:\n\t\treturn \"Autumn\"\n\telif month == 8 and days <= 22:\n\t\treturn \"Summer\"\n\telif month == 10 and days >= 23:\n\t\treturn \"Autumn\"\n\telif month == 9 and days <= 22:\n\t\treturn \"Summer\"\n\telif month == 11 and days >= 22:\n\t\treturn \"Autumn\"\n\telif month == 10 and days <= 21:\n\t\treturn \"Autumn\"\n\telif month == 12 and days >= 22:\n\t\treturn \"Winter\"\n\telif month == 11 and days <= 21:\n\t\treturn \"Autumn\""}
{"ID": 523, "source": "MBPP:160", "prompt": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\n\"\"\"\ndef solution (a, b, n): \n\tif a == 0 and b == 0:\n\t\treturn \"No solution\"\n\tif a == 0:\n\t\treturn \"x = 0, y = \" + str(n/b)\n\tif b == 0:\n\t\treturn \"y = 0, x = \" + str(n/a)\n\tif a == b:\n\t\treturn \"x = y = \" + str(n/a)\n\tif a > b:\n\t\treturn \"x = \" + str(n/b) + \", y = \" + str(n/a)\n\telse:\n\t\treturn \"x = \" + str(n/a) + \", y = \" + str(n/b)\n\nprint(solution(1, 2, 3))\nprint(solution(1, 2, 4))\nprint(solution(1, 2, 5))\nprint(solution(1, 2, 6))\nprint(solution(1, 2, 7))\nprint(solution(1, 2, 8))\nprint(solution(1, 2, 9))\nprint(solution(1, 2, 10))\nprint(solution(1, 2, 11))\nprint(solution(1, 2, 12))\nprint(solution(1, 2, 13))\nprint(solution(1, 2, 14))\nprint(solution(1, 2, 15))\nprint(solution(1, 2, 16))\nprint(solution(1, 2, 17))\nprint(solution(1, 2, 18))\nprint(solution(1, 2, 19))\nprint(solution(1, 2, 20))\nprint(solution(1, 2, 21))\nprint(solution(1, 2, 22))\nprint(solution(1, 2, 23))\nprint(solution(1, 2, 24))\nprint(solution(1, 2, 25))\nprint(solution(1, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(solution(1, 2, 3))\nprint(solution(1, 2, 4))\nprint(solution(1, 2, 5))\nprint(solution(1, 2, 6))\nprint(solution(1, 2, 7))\nprint(solution(1, 2, 8))\nprint(solution(1, 2, 9))\nprint(solution(1, 2, 10))\nprint(solution(1, 2, 11))\nprint(solution(1, 2, 12))\nprint(solution(1, 2, 13))\nprint(solution(1, 2, 14))\nprint(solution(1, 2, 15))\nprint(solution(1, 2, 16))\nprint(solution(1, 2, 17))\nprint(solution(1, 2, 18))\nprint(solution(1, 2, 19))\nprint(solution(1, 2, 20))\nprint(solution(1, 2, 21))\nprint(solution(1, 2, 22))\nprint(solution(1, 2, 23))\nprint(solution(1, 2, 24))\nprint(solution(1, 2, 25))\nprint(solution(1, "}
{"ID": 526, "source": "MBPP:163", "prompt": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the area of a regular polygon.\n\"\"\"\ndef area_polygon(s,l):\n\treturn 0.5*s*l\n\nprint(area_polygon(3,4))\n\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(3,4))\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\nimport math\n\ndef area_circle(r):\n\treturn math.pi*r**2\n\nprint(area_circle(3))\n\n\"\"\"\nWrite a function to calculate the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\treturn 2*math.pi*r\n\nprint(perimeter_circle(3))\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\nprint(area_triangle(3,4))\n\n\"\"\"\nWrite a function to calculate the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c\n\nprint(perimeter_triangle(3,4,5))\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to calculate the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,w):\n\treturn 2*(l+w)\n\nprint(perimeter_rectangle(3,4))\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(s):\n\treturn s*s\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to calculate the perimeter of a square.\n\"\"\"\ndef perimeter_square(s):\n\treturn 4*s\n\nprint(perimeter_square(3))\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 0.5*s*l\n\nprint(area_polygon(3,4))\n\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\n\"\"\"\ndef perimeter_polygon(s,l):\n\treturn s*l\n\nprint(perimeter_polygon(3,4))\n\n\"\"\"\nWrite a function to calculate the area of a circle.\n\"\"\"\nimport math\n\ndef area_circle(r):\n\treturn math.pi*r**2\n\nprint(area_circle(3))\n\n\"\"\"\nWrite a function to calculate the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\treturn 2*math.pi*r\n\nprint(perimeter_circle(3))\n\n\"\"\"\nWrite a function to calculate the area of a triangle.\n\"\"\"\ndef area_triangle(b,h):\n\treturn 0.5*b*h\n\nprint(area_triangle(3,4))\n\n\"\"\"\nWrite a function to calculate the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c\n\nprint(perimeter_triangle(3,4,5))\n\n\"\"\"\nWrite a function to calculate the area of a rectangle.\n\"\"\"\ndef area_rectangle(l,w):\n\treturn l*w\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to calculate the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(l,w):\n\treturn 2*(l+w)\n\nprint(perimeter_rectangle(3,4))\n\n\"\"\"\nWrite a function to calculate the area of a square.\n\"\"\"\ndef area_square(s):\n\treturn s*s\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to calculate the perimeter of a square.\n\"\"\"\ndef perimeter_square(s):\n\treturn 4*s\n\nprint(perimeter_square(3))\n\n\"\"\"\nWrite a function to calculate the area of a trapezoid."}
{"ID": 535, "source": "MBPP:172", "prompt": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\"\"\"\ndef count_occurance(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == 's' or s[i] == 'd' or s[i] == 't':\n\t\t\tcount += 1\n\treturn count\n\nprint(count_occurance(\"std\"))\nprint(count_occurance(\"stds\"))\nprint(count_occurance(\"stdsd\"))\nprint(count_occurance(\"stdsds\"))\nprint(count_occurance(\"stdsdsd\"))\nprint(count_occurance(\"stdsdsds\"))\nprint(count_occurance(\"stdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsdsds", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(count_occurance(\"std\"))\nprint(count_occurance(\"stds\"))\nprint(count_occurance(\"stdsd\"))\nprint(count_occurance(\"stdsds\"))\nprint(count_occurance(\"stdsdsd\"))\nprint(count_occurance(\"stdsdsds\"))\nprint(count_occurance(\"stdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsds\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsdsd\"))\nprint(count_occurance(\"stdsdsdsdsdsdsdsdsdsdsdsdsds"}
{"ID": 536, "source": "MBPP:173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\t", "predict": "<s> \"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\n\"\"\"\ndef remove_splchar(text): \n\treturn ''.join(c for c in text if c.isalnum())\n\ndef remove_splchar_2(text):\n\treturn ''.join(filter(lambda x: x.isalnum(), text))\n\ndef remove_splchar_3(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_4(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_5(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_6(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_7(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_8(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_9(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_10(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_11(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_12(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_13(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_14(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_15(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_16(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_17(text):\n\treturn ''.join(i for", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn ''.join(c for c in text if c.isalnum())\n\ndef remove_splchar_2(text):\n\treturn ''.join(filter(lambda x: x.isalnum(), text))\n\ndef remove_splchar_3(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_4(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_5(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_6(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_7(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_8(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_9(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_10(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_11(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_12(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_13(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_14(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_15(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_16(text):\n\treturn ''.join(i for i in text if i.isalnum())\n\ndef remove_splchar_17(text):"}
{"ID": 538, "source": "MBPP:175", "prompt": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to verify validity of a string of parentheses.\n\"\"\"\ndef is_valid_parenthese( str1):\n\tif len(str1) % 2 != 0:\n\t\treturn False\n\tstack = []\n\tfor i in range(len(str1)):\n\t\tif str1[i] == '(' or str1[i] == '[' or str1[i] == '{':\n\t\t\tstack.append(str1[i])\n\t\telse:\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\ttop = stack.pop()\n\t\t\tif top == '(' and str1[i] != ')':\n\t\t\t\treturn False\n\t\t\tif top == '[' and str1[i] != ']':\n\t\t\t\treturn False\n\t\t\tif top == '{' and str1[i] != '}':\n\t\t\t\treturn False\n\tif len(stack) != 0:\n\t\treturn False\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 539, "source": "MBPP:176", "prompt": "\"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the perimeter of a triangle.\n\"\"\"\ndef perimeter_triangle(a,b,c):\n\treturn a+b+c\n\nprint(perimeter_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(area_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(a,b):\n\treturn 2*(a+b)\n\nprint(perimeter_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\treturn a*b\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\treturn 2*3.14*r\n\nprint(perimeter_circle(3))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\nprint(area_circle(3))\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef perimeter_square(a):\n\treturn 4*a\n\nprint(perimeter_square(3))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(a):\n\treturn a**2\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef perimeter_trapezoid(a,b,c,d):\n\treturn a+b+c+d\n\nprint(perimeter_trapezoid(3,4,5,6))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(a,b,c,d):\n\treturn (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a+b+c\n\nprint(perimeter_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(a,b,c):\n\ts = (a+b+c)/2\n\treturn (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(area_triangle(3,4,5))\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef perimeter_rectangle(a,b):\n\treturn 2*(a+b)\n\nprint(perimeter_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(a,b):\n\treturn a*b\n\nprint(area_rectangle(3,4))\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef perimeter_circle(r):\n\treturn 2*3.14*r\n\nprint(perimeter_circle(3))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\nprint(area_circle(3))\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\ndef perimeter_square(a):\n\treturn 4*a\n\nprint(perimeter_square(3))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(a):\n\treturn a**2\n\nprint(area_square(3))\n\n\"\"\"\nWrite a function to find the perimeter of a trapezoid.\n\"\"\"\ndef perimeter_trapezoid(a,b,c,d):\n\treturn a+b+c+d\n\nprint(perimeter_trapezoid(3,4,5,6))\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\""}
{"ID": 541, "source": "MBPP:178", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t", "predict": "<s> \"\"\"\nWrite a function to search some literals strings in a string.\n\"\"\"\ndef string_literals(patterns,text):\n\t\"\"\"\n\t:type patterns: List[str]\n\t:type text: str\n\t:rtype: List[int]\n\t\"\"\"\n\tresult = []\n\tfor i in range(len(patterns)):\n\t\tif patterns[i] in text:\n\t\t\tresult.append(i)\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 544, "source": "MBPP:181", "prompt": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\n\"\"\"\ndef common_prefix_util(str1, str2): \n\tm = min(len(str1), len(str2)) \n\tfor i in range(m): \n\t\tif str1[i] != str2[i]: \n\t\t\treturn str1[:i] \n\treturn str1[:m] \n\ndef longest_common_prefix(strs): \n\tif len(strs) == 0: \n\t\treturn \"\"\n\telse: \n\t\treturn common_prefix_util(strs[0], longest_common_prefix(strs[1:])) \n\n\nprint(longest_common_prefix([\"abc\", \"abcde\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcde\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]))\nprint(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(longest_common_prefix([\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]"}
{"ID": 547, "source": "MBPP:184", "prompt": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn [x for x in list if x > num]\n\nprint(greater_specificnum([1,2,3,4,5,6,7,8,9,10],5))\n\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\n\"\"\"\ndef greater_specificnum(list,num):\n\treturn ["}
{"ID": 549, "source": "MBPP:186", "prompt": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t", "predict": "<s> \"\"\"\nWrite a function to search some literals strings in a string by using regex.\n\"\"\"\ndef check_literals(text, patterns):\n\t\"\"\"\n\t:param text: the text to search\n\t:param patterns: the patterns to search\n\t:return: a list of the found patterns\n\t\"\"\"\n\timport re\n\treturn [pattern for pattern in patterns if re.search(pattern, text)]\n\n\ndef test_check_literals():\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"d\"]) == [\"a\", \"b\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) ==", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"d\"]) == [\"a\", \"b\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == [\"a\", \"b\", \"c\"]\n\tassert check_literals(\"abc\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) =="}
{"ID": 551, "source": "MBPP:188", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\"\"\"\ndef prod_Square(n):\n\tfor i in range(1,int(n**0.5)+1):\n\t\tif n%i==0:\n\t\t\tif (i**0.5)**2==i:\n\t\t\t\treturn True\n\t\t\telif (n//i)**0.5==(n//i):\n\t\t\t\treturn True\n\treturn False\n\nprint(prod_Square(16))\nprint(prod_Square(17))\nprint(prod_Square(25))\nprint(prod_Square(36))\nprint(prod_Square(49))\nprint(prod_Square(64))\nprint(prod_Square(81))\nprint(prod_Square(100))\nprint(prod_Square(121))\nprint(prod_Square(144))\nprint(prod_Square(169))\nprint(prod_Square(196))\nprint(prod_Square(225))\nprint(prod_Square(256))\nprint(prod_Square(289))\nprint(prod_Square(324))\nprint(prod_Square(361))\nprint(prod_Square(400))\nprint(prod_Square(441))\nprint(prod_Square(484))\nprint(prod_Square(529))\nprint(prod_Square(576))\nprint(prod_Square(625))\nprint(prod_Square(676))\nprint(prod_Square(729))\nprint(prod_Square(784))\nprint(prod_Square(841))\nprint(prod_Square(900))\nprint(prod_Square(961))\nprint(prod_Square(1024))\nprint(prod_Square(1089))\nprint(prod_Square(1156))\nprint(prod_Square(1225))\nprint(prod_Square(1296))\nprint(prod_Square(1369))\nprint(prod_Square(14", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(prod_Square(16))\nprint(prod_Square(17))\nprint(prod_Square(25))\nprint(prod_Square(36))\nprint(prod_Square(49))\nprint(prod_Square(64))\nprint(prod_Square(81))\nprint(prod_Square(100))\nprint(prod_Square(121))\nprint(prod_Square(144))\nprint(prod_Square(169))\nprint(prod_Square(196))\nprint(prod_Square(225))\nprint(prod_Square(256))\nprint(prod_Square(289))\nprint(prod_Square(324))\nprint(prod_Square(361))\nprint(prod_Square(400))\nprint(prod_Square(441))\nprint(prod_Square(484))\nprint(prod_Square(529))\nprint(prod_Square(576))\nprint(prod_Square(625))\nprint(prod_Square(676))\nprint(prod_Square(729))\nprint(prod_Square(784))\nprint(prod_Square(841))\nprint(prod_Square(900))\nprint(prod_Square(961))\nprint(prod_Square(1024))\nprint(prod_Square(1089))\nprint(prod_Square(1156))\nprint(prod_Square(1225))\nprint(prod_Square(1296))\nprint(prod_Square(1369))\nprint(prod_Square(14"}
{"ID": 552, "source": "MBPP:189", "prompt": "\"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first missing positive number.\n\"\"\"\ndef first_Missing_Positive(arr,n): \n\tfor i in range(n): \n\t\twhile arr[i] != i+1 and arr[i] > 0 and arr[i] <= n: \n\t\t\tarr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1] \n\tfor i in range(n): \n\t\tif arr[i] != i+1: \n\t\t\treturn i+1\n\treturn n+1\n\narr = [1, 2, 0] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [3, 4, -1, 1] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\narr = [1, 2, 0] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [3, 4, -1, 1] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nn = len(arr) \nprint(\"First missing positive number is\", first_Missing_Positive(arr, n)) "}
{"ID": 553, "source": "MBPP:190", "prompt": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \n\tcount = 0\n\tfor i in range(x1,x2+1):\n\t\tfor j in range(y1,y2+1):\n\t\t\tif i*i+j*j <= x2*x2:\n\t\t\t\tcount += 1\n\treturn count\n\nprint(count_Intgral_Points(1,1,3,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c):\n\treturn max(a,b,c)\n\nprint(max_of_three(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(count_Intgral_Points(1,1,3,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c):\n\treturn max(a,b,c)\n\nprint(max_of_three(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n\n\"\"\"\nWrite a python function to find the maximum of three numbers without using if-else statement.\n\"\"\"\ndef max_of_three_without_if(a,b,c):\n\treturn (a+b+abs(a-b))/2\n\nprint(max_of_three_without_if(1,2,3))\n\n"}
{"ID": 554, "source": "MBPP:191", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\n\"\"\"\ndef check_monthnumber(monthname3):\n\tmonthname = monthname3.lower()\n\tif monthname == \"january\" or monthname == \"march\" or monthname == \"may\" or monthname == \"july\" or monthname == \"august\" or monthname == \"october\" or monthname == \"december\":\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 563, "source": "MBPP:200", "prompt": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\n\"\"\"\ndef position_max(list1):\n\tmax_value = max(list1)\n\tmax_positions = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == max_value:\n\t\t\tmax_positions.append(i)\n\treturn max_positions\n\nprint(position_max([1, 2, 3, 4, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(position_max([1, 2, 3, 4, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_max([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"ID": 564, "source": "MBPP:201", "prompt": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the elements in a list are same or not.\n\"\"\"\ndef chkList(lst): \n\treturn len(set(lst)) <= 1\n\n# Test the function\nprint(chkList([1, 1, 1, 1]))\nprint(chkList([1, 2, 3, 4]))\nprint(chkList([1, 1, 1, 1, 2]))\nprint(chkList([1, 1, 1, 1, 2, 2]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6]))\nprint(chkList([1, 1, 1, 1, 2, 2, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(chkList([1, 1, 1, 1]))\nprint(chkList([1, 2, 3, 4]))\nprint(chkList([1, 1, 1, 1, 2]))\nprint(chkList([1, 1, 1, 1, 2, 2]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]))\nprint(chkList([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6]))\nprint(chkList([1, 1, 1, 1, 2, 2, "}
{"ID": 565, "source": "MBPP:202", "prompt": "\"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove even characters in a string.\n\"\"\"\ndef remove_even(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 != 0])\n\n\ndef remove_even_2(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha()])\n\n\ndef remove_even_3(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isdigit()])\n\n\ndef remove_even_4(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalnum()])\n\n\ndef remove_even_5(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit()])\n\n\ndef remove_even_6(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit() or i.isspace()])\n\n\ndef remove_even_7(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit() or i.isspace() or i.isalnum()])\n\n\ndef remove_even_8(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit() or i.isspace() or i.isalnum() or i.isprintable()])\n\n\ndef remove_even_9(str1):\n\t\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if ord(i) % 2 != 0])\n\n\ndef remove_even_2(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha()])\n\n\ndef remove_even_3(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isdigit()])\n\n\ndef remove_even_4(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalnum()])\n\n\ndef remove_even_5(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit()])\n\n\ndef remove_even_6(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit() or i.isspace()])\n\n\ndef remove_even_7(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit() or i.isspace() or i.isalnum()])\n\n\ndef remove_even_8(str1):\n\t\"\"\"\n\t:param str1: string\n\t:return: string\n\t\"\"\"\n\treturn ''.join([i for i in str1 if i.isalpha() or i.isdigit() or i.isspace() or i.isalnum() or i.isprintable()])\n\n"}
{"ID": 571, "source": "MBPP:208", "prompt": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):\n\treturn re.match(r'^[0-9]+\\.[0-9]{2}$', num)\n\n\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\"\"\"\ndef is_decimal(num):"}
{"ID": 573, "source": "MBPP:210", "prompt": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\t", "predict": "<s> \"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\ndef is_allowed_specific_char(string):\n\timport re\n\treturn re.match(\"^[a-zA-Z0-9]*$\", string)\n\n\ndef is_allowed_specific_char_2(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_3(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_4(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_5(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_6(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_7(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_8(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\ndef is_allowed_specific_char_2(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_3(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_4(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_5(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_6(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_7(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in string)\n\n\ndef is_allowed_specific_char_8(string):\n\treturn all(c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for c in"}
{"ID": 578, "source": "MBPP:215", "prompt": "\"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t", "predict": "<s> \"\"\"\nWrite a function to decode a run-length encoded given list.\n\"\"\"\ndef decode_list(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tresult = []\n\tfor i in range(0, len(alist), 2):\n\t\tresult.extend([alist[i]] * alist[i+1])\n\treturn result\n\n\ndef decode_list_2(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for pair in alist for x in [pair] * pair]\n\n\ndef decode_list_3(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_4(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_5(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_6(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_7(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_8(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_9(alist", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn result\n\n\ndef decode_list_2(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for pair in alist for x in [pair] * pair]\n\n\ndef decode_list_3(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_4(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_5(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_6(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_7(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x, y in alist for _ in range(y)]\n\n\ndef decode_list_8(alist):\n\t\"\"\"\n\t:type alist: List[int]\n\t:rtype: List[int]\n\t\"\"\""}
{"ID": 579, "source": "MBPP:216", "prompt": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\t", "predict": "<s> \"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset_list(list1, list2): \n\tif len(list1) > len(list2):\n\t\treturn False\n\tfor i in range(len(list1)):\n\t\tif list1[i] != list2[i]:\n\t\t\treturn False\n\treturn True\n\ndef check_subset_list_recursive(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_2(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive_2(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_3(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive_3(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_4(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive_4(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_5(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif len(list1) > len(list2):\n\t\treturn False\n\tfor i in range(len(list1)):\n\t\tif list1[i] != list2[i]:\n\t\t\treturn False\n\treturn True\n\ndef check_subset_list_recursive(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_2(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive_2(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_3(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive_3(list1[1:], list2[1:])\n\ndef check_subset_list_recursive_4(list1, list2):\n\tif len(list1) > len(list2):\n\t\treturn False\n\tif len(list1) == 0:\n\t\treturn True\n\tif list1[0] != list2[0]:\n\t\treturn False\n\treturn check_subset_list_recursive_4(list1[1:], list2[1:])"}
{"ID": 580, "source": "MBPP:217", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"\ndef first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tif (str.count(str[i]) > 1): \n\t\t\treturn str[i] \n\treturn \"No repeated character found\"\n\nstr = \"hello\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr =", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nstr = \"hello\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) \n\nstr = \"hello world\"\nprint(first_Repeated_Char(str)) "}
{"ID": 583, "source": "MBPP:220", "prompt": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\ndef replace_max_specialchar(text,n):\n\t\"\"\"\n\t:param text: string\n\t:param n: int\n\t:return: string\n\t\"\"\"\n\tif n < 0:\n\t\traise ValueError(\"n must be non-negative\")\n\tif n == 0:\n\t\treturn text\n\tif text == \"\":\n\t\treturn text\n\tif text[0] in [\",\",\".\",\" \"]:\n\t\treturn replace_max_specialchar(text[1:],n-1)\n\treturn text[0] + replace_max_specialchar(text[1:],n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 586, "source": "MBPP:223", "prompt": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\t", "predict": "<s> \"\"\"\nWrite a function to check for majority element in the given sorted array.\n\"\"\"\ndef is_majority(arr, n, x):\n\tif n == 0:\n\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t\treturn True\n\tif arr[n-1] == x:\n\t\treturn True\n\tif arr[0] == arr[1]:\n\t\treturn is_majority(arr[1:], n-1, x)\n\tif arr[n-1] == arr[n-2]:\n\t\treturn is_majority(arr[:n-1], n-1, x)\n\treturn False\n\ndef is_majority_v2(arr, n, x):\n\tif n == 0:\n\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t\treturn True\n\tif arr[n-1] == x:\n\t\treturn True\n\tif arr[0] == arr[1]:\n\t\treturn is_majority_v2(arr[1:], n-1, x)\n\tif arr[n-1] == arr[n-2]:\n\t\treturn is_majority_v2(arr[:n-1], n-1, x)\n\treturn False\n\ndef is_majority_v3(arr, n, x):\n\tif n == 0:\n\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t\treturn True\n\tif arr[n-1] == x:\n\t\treturn True\n\tif arr[0] == arr[1]:\n\t\treturn is_majority_v3(arr[1:], n-1, x)\n\tif arr[n-1] == arr[n-2]:\n\t\treturn is_majority_v3(arr[:n-1], n-1, x)\n\treturn False\n\ndef is_majority_v4(arr, n, x):\n\tif n == 0:\n\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t\treturn True\n\tif arr[n-1] == x:\n\t\treturn True\n\tif arr[0] == arr[1]:\n\t\treturn is_majority_v2(arr[1:], n-1, x)\n\tif arr[n-1] == arr[n-2]:\n\t\treturn is_majority_v2(arr[:n-1], n-1, x)\n\treturn False\n\ndef is_majority_v3(arr, n, x):\n\tif n == 0:\n\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t\treturn True\n\tif arr[n-1] == x:\n\t\treturn True\n\tif arr[0] == arr[1]:\n\t\treturn is_majority_v3(arr[1:], n-1, x)\n\tif arr[n-1] == arr[n-2]:\n\t\treturn is_majority_v3(arr[:n-1], n-1, x)\n\treturn False\n\ndef is_majority_v4(arr, n, x):\n\tif n == 0:\n\t\treturn False\n\tif n == 1:\n\t\treturn arr[0] == x\n\tif arr[0] == x:\n\t"}
{"ID": 587, "source": "MBPP:224", "prompt": "\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef count_Set_Bits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count \n\n# Driver Code \nn = 12\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 13\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 14\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 15\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 16\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 17\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 18\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 19\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 20\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 21\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 22\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 23\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 24\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 25\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 26\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 27\nprint", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = 12\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 13\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 14\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 15\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 16\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 17\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 18\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 19\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 20\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 21\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 22\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 23\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 24\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 25\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) \n\nn = 26\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) "}
{"ID": 589, "source": "MBPP:226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have even index values of a given string.\n\"\"\"\ndef even_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n\nprint(even_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have even index values of a given string.\n\"\"\"\ndef even_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n\nprint(even_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have even index values of a given string.\n\"\"\"\ndef even_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n\nprint(even_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have even index values of a given string.\n\"\"\"\ndef even_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n\nprint(even_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have even index values of a given string.\n\"\"\"\ndef even_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n\nprint(even_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have even index values of a given string.\n\"\"\"\ndef even_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n\nprint(even_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"\ndef odd_values_string(str):\n\treturn ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n\nprint(odd_values_string(\"hello\"))\n\n\"\"\"\nWrite a python function to remove"}
{"ID": 590, "source": "MBPP:227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\t", "predict": "<s> \"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"\ndef min_of_three(a,b,c): \n\treturn min(a, min(b,c))\n\nprint(min_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find maximum of three numbers.\n\"\"\"\ndef max_of_three(a,b,c): \n\treturn max(a, max(b,c))\n\nprint(max_of_three(1,2,3))\n\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\""}
{"ID": 591, "source": "MBPP:228", "prompt": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n\treturn (n & ((1<<(l-1))|((1<<(r-1))-1))) == 0\n\n\nn = 10\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 5\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 7\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 9\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 10\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 11\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 12\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 13\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 14\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "n = 10\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 5\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 7\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 9\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 10\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 11\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 12\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 13\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 14\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 1"}
{"ID": 593, "source": "MBPP:230", "prompt": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace blank spaces with any character in a string.\n\"\"\"\ndef replace_blank(str1,char):\n\treturn str1.replace(\" \",\"%s\"%char)\n\nprint(replace_blank(\"Hello World\",\"_\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(replace_blank(\"Hello World\",\"_\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string.\n\"\"\"\ndef first_non_repeating(str1):\n\tstr1 = str1.lower()\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\nprint(first_non_repeating(\"Hello World\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a string."}
{"ID": 595, "source": "MBPP:232", "prompt": "\"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the n largest items from a dataset.\n\"\"\"\ndef larg_nnum(list1,n):\n\tlist1.sort()\n\treturn list1[-n:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 596, "source": "MBPP:233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n\treturn 2*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_cube(s):\n\treturn 6*s*s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the surface area of a prism.\n\"\"\"\ndef surface_prism(s,h):\n\treturn 2*s*s + 2*s*h\n\n\"\"\"\nWrite a function to find the volume of a prism.\n\"\"\"\ndef volume_prism(s,h):\n\treturn s*s*h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surface_pyramid(s,h):\n\treturn 3*s*s + 2*s*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(s,h):\n\treturn (1/3)*s*s*h\n\n\"\"\"\nWrite a function to find the surface area of a tor", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surface_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surface_cube(s):\n\treturn 6*s*s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surface_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the surface area of a prism.\n\"\"\"\ndef surface_prism(s,h):\n\treturn 2*s*s + 2*s*h\n\n\"\"\"\nWrite a function to find the volume of a prism.\n\"\"\"\ndef volume_prism(s,h):\n\treturn s*s*h\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surface_pyramid(s,h):\n\treturn 3*s*s + 2*s*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(s,h):\n\treturn (1/3)*s*s*h\n\n\"\"\"\nWrite a function to find the surface area of a tor"}
{"ID": 597, "source": "MBPP:234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l**3\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * 3.14 * r**3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r**2 * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 3.14 * r**2 * h / 3\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r, h):\n\treturn (3.14 * r**2 * h) / 3\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cylinder(r, h):\n\treturn (3.14 * r**2 * h)\n\n\"\"\"\nWrite a function to find the volume of a circular dome.\n\"\"\"\ndef volume_circular_dome(r):\n\treturn (2 * 3.14 * r**2) / 3\n\n\"\"\"\nWrite a function to find the volume of a circular hemisphere.\n\"\"\"\ndef volume_circular_hemisphere(r):\n\treturn (2 * 3.14 * r**2) / 3\n\n\"\"\"\nWrite a function to find the volume of a circular torus.\n\"\"\"\ndef volume_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l**3\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3) * 3.14 * r**3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r**2 * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 3.14 * r**2 * h / 3\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l, w, h):\n\treturn l * w * h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r, h):\n\treturn (3.14 * r**2 * h) / 3\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cylinder(r, h):\n\treturn (3.14 * r**2 * h)\n\n\"\"\"\nWrite a function to find the volume of a circular dome.\n\"\"\"\ndef volume_circular_dome(r):\n\treturn (2 * 3.14 * r**2) / 3\n\n\"\"\"\nWrite a function to find the volume of a circular hemisphere.\n\"\"\"\ndef volume_circular_hemisphere(r):\n\treturn (2 * 3.14 * r**2) / 3\n\n\"\"\"\nWrite a function to find the volume of a circular torus.\n\"\"\"\ndef volume_"}
{"ID": 603, "source": "MBPP:240", "prompt": "\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[0] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[0] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[0] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[0] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[0] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[0] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the last element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist1[-1] = list2\n\treturn list1\n\nprint(replace_list([1,2,3,4], [5,6,7]))\n\n\"\"\"\nWrite a function to replace the first element of the list with another list.\n\"\"\"\ndef replace_list(list1,list2):\n\tlist"}
{"ID": 605, "source": "MBPP:242", "prompt": "\"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to count total characters in a string.\n\"\"\"\ndef count_charac(str1):\n\treturn len(str1)\n\nprint(count_charac(\"Hello\"))\n\n\"\"\"\nWrite a function to count total vowels in a string.\n\"\"\"\ndef count_vowels(str1):\n\tvowels = \"aeiouAEIOU\"\n\tcount = 0\n\tfor i in str1:\n\t\tif i in vowels:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_vowels(\"Hello\"))\n\n\"\"\"\nWrite a function to count total consonants in a string.\n\"\"\"\ndef count_consonants(str1):\n\tvowels = \"aeiouAEIOU\"\n\tcount = 0\n\tfor i in str1:\n\t\tif i not in vowels:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_consonants(\"Hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"Hello World\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"Hello\\nWorld\"))\n\n\"\"\"\nWrite a function to count total uppercase letters in a string.\n\"\"\"\ndef count_uppercase(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tif i.isupper():\n\t\t\tcount += 1\n\treturn count\n\nprint(count_uppercase(\"Hello\"))\n\n\"\"\"\nWrite a function to count total lowercase letters in a string.\n\"\"\"\ndef count_lowercase(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tif i.islower():\n\t\t\tcount += 1\n\treturn count\n\nprint(count_lowercase(\"Hello\"))\n\n\"\"\"\nWrite a function to count total digits in a string.\n\"\"\"\ndef count_digits(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tif i.isdigit", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i not in vowels:\n\t\t\tcount += 1\n\treturn count\n\nprint(count_consonants(\"Hello\"))\n\n\"\"\"\nWrite a function to count total words in a string.\n\"\"\"\ndef count_words(str1):\n\treturn len(str1.split())\n\nprint(count_words(\"Hello World\"))\n\n\"\"\"\nWrite a function to count total lines in a string.\n\"\"\"\ndef count_lines(str1):\n\treturn len(str1.splitlines())\n\nprint(count_lines(\"Hello\\nWorld\"))\n\n\"\"\"\nWrite a function to count total uppercase letters in a string.\n\"\"\"\ndef count_uppercase(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tif i.isupper():\n\t\t\tcount += 1\n\treturn count\n\nprint(count_uppercase(\"Hello\"))\n\n\"\"\"\nWrite a function to count total lowercase letters in a string.\n\"\"\"\ndef count_lowercase(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tif i.islower():\n\t\t\tcount += 1\n\treturn count\n\nprint(count_lowercase(\"Hello\"))\n\n\"\"\"\nWrite a function to count total digits in a string.\n\"\"\"\ndef count_digits(str1):"}
{"ID": 606, "source": "MBPP:243", "prompt": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\ndef sort_on_occurence(lst): \n\treturn sorted(lst, key=lambda x: (x[0], x))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 607, "source": "MBPP:244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"\ndef next_Perfect_Square(N): \n\t# Find the next perfect square \n\t# greater than N \n\ti = 1\n\twhile (i * i) <= N: \n\t\ti += 1\n\treturn (i * i) \n\n# Driver Code \nN = 100\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 100000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 100000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 100000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nN = 100\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 100000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 100000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 100000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 1000000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) \n\nN = 10000000000000\nprint(\"Next perfect square of\", N, \"is\", next_Perfect_Square(N)) "}
{"ID": 616, "source": "MBPP:253", "prompt": "\"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count integers from a given list.\n\"\"\"\ndef count_integer(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif isinstance(i, int):\n\t\t\tcount += 1\n\treturn count\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_integer(list1))\n\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]\nprint(count_integer(list2))\n\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11]\nprint(count_integer(list3))\n\nlist4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12]\nprint(count_integer(list4))\n\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13]\nprint(count_integer(list5))\n\nlist6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13, 14]\nprint(count_integer(list6))\n\nlist7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13, 14, 15]\nprint(count_integer(list7))\n\nlist8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn count\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_integer(list1))\n\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\"]\nprint(count_integer(list2))\n\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11]\nprint(count_integer(list3))\n\nlist4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12]\nprint(count_integer(list4))\n\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13]\nprint(count_integer(list5))\n\nlist6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13, 14]\nprint(count_integer(list6))\n\nlist7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b\", \"c\", 11, 12, 13, 14, 15]\nprint(count_integer(list7))\n\nlist8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"a\", \"b"}
{"ID": 620, "source": "MBPP:257", "prompt": "\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to swap two numbers.\n\"\"\"\ndef swap_numbers(a,b):\n\treturn b,a\n\nprint(swap_numbers(1,2))\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\ndef find_max(a,b):\n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\nprint(find_max(1,2))\n\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef find_max(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(find_max(1,2,3))\n\n\"\"\"\nWrite a function to find the maximum of four numbers.\n\"\"\"\ndef find_max(a,b,c,d):\n\tif a>b and a>c and a>d:\n\t\treturn a\n\telif b>a and b>c and b>d:\n\t\treturn b\n\telif c>a and c>b and c>d:\n\t\treturn c\n\telse:\n\t\treturn d\n\nprint(find_max(1,2,3,4))\n\n\"\"\"\nWrite a function to find the maximum of five numbers.\n\"\"\"\ndef find_max(a,b,c,d,e):\n\tif a>b and a>c and a>d and a>e:\n\t\treturn a\n\telif b>a and b>c and b>d and b>e:\n\t\treturn b\n\telif c>a and c>b and c>d and c>e:\n\t\treturn c\n\telif d>a and d>b and d>c and d>e:\n\t\treturn d\n\telse:\n\t\treturn e\n\nprint(find_max(1,2,3,4,5))\n\n\"\"\"\nWrite a function to find the maximum of six numbers.\n\"\"\"\ndef find_max(a,b,c,d,e,f):\n\tif a>b and a>c and a>d and a>e and a>f:\n\t\treturn a\n\telif b>a and", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn b,a\n\nprint(swap_numbers(1,2))\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\ndef find_max(a,b):\n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\nprint(find_max(1,2))\n\n\"\"\"\nWrite a function to find the maximum of three numbers.\n\"\"\"\ndef find_max(a,b,c):\n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(find_max(1,2,3))\n\n\"\"\"\nWrite a function to find the maximum of four numbers.\n\"\"\"\ndef find_max(a,b,c,d):\n\tif a>b and a>c and a>d:\n\t\treturn a\n\telif b>a and b>c and b>d:\n\t\treturn b\n\telif c>a and c>b and c>d:\n\t\treturn c\n\telse:\n\t\treturn d\n\nprint(find_max(1,2,3,4))\n\n\"\"\"\nWrite a function to find the maximum of five numbers.\n\"\"\"\ndef find_max(a,b,c,d,e):\n\tif a>b and a>c and a>d and a>e:"}
{"ID": 623, "source": "MBPP:260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"\ndef newman_prime(n): \n\tif n == 1: \n\t\treturn 2\n\tif n == 2: \n\t\treturn 3\n\tif n == 3: \n\t\treturn 5\n\tif n == 4: \n\t\treturn 7\n\tif n == 5: \n\t\treturn 11\n\tif n == 6: \n\t\treturn 13\n\tif n == 7: \n\t\treturn 17\n\tif n == 8: \n\t\treturn 19\n\tif n == 9: \n\t\treturn 23\n\tif n == 10: \n\t\treturn 29\n\tif n == 11: \n\t\treturn 31\n\tif n == 12: \n\t\treturn 37\n\tif n == 13: \n\t\treturn 41\n\tif n == 14: \n\t\treturn 43\n\tif n == 15: \n\t\treturn 47\n\tif n == 16: \n\t\treturn 53\n\tif n == 17: \n\t\treturn 59\n\tif n == 18: \n\t\treturn 61\n\tif n == 19: \n\t\treturn 67\n\tif n == 20: \n\t\treturn 71\n\tif n == 21: \n\t\treturn 73\n\tif n == 22: \n\t\treturn 79\n\tif n == 23: \n\t\treturn 83\n\tif n == 24: \n\t\treturn 89\n\tif n == 25: \n\t\treturn 97\n\tif n == 26: \n\t\treturn 101\n\tif n == 27: \n\t\treturn 103\n\tif n == 28: \n\t\treturn 107\n\tif n == 29: \n\t\treturn 109\n\tif n == 30: \n\t\treturn 113\n\tif n == 31: \n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1: \n\t\treturn 2\n\tif n == 2: \n\t\treturn 3\n\tif n == 3: \n\t\treturn 5\n\tif n == 4: \n\t\treturn 7\n\tif n == 5: \n\t\treturn 11\n\tif n == 6: \n\t\treturn 13\n\tif n == 7: \n\t\treturn 17\n\tif n == 8: \n\t\treturn 19\n\tif n == 9: \n\t\treturn 23\n\tif n == 10: \n\t\treturn 29\n\tif n == 11: \n\t\treturn 31\n\tif n == 12: \n\t\treturn 37\n\tif n == 13: \n\t\treturn 41\n\tif n == 14: \n\t\treturn 43\n\tif n == 15: \n\t\treturn 47\n\tif n == 16: \n\t\treturn 53\n\tif n == 17: \n\t\treturn 59\n\tif n == 18: \n\t\treturn 61\n\tif n == 19: \n\t\treturn 67\n\tif n == 20: \n\t\treturn 71\n\tif n == 21: \n\t\treturn 73\n\tif n == 22: \n\t\treturn 79\n\tif n == 23: \n\t\treturn 83\n\tif n == 24: \n\t\treturn 89\n\tif n == 25: \n\t\treturn 97\n\tif n == 26: \n\t\treturn 101\n\tif n == 27: \n\t\treturn 103\n\tif n == 28: \n\t\treturn 107\n\tif n == 29: \n\t\treturn 109\n\tif n == 30: \n\t\treturn 113\n\tif n == 31: \n\t"}
{"ID": 628, "source": "MBPP:265", "prompt": "\"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t", "predict": "<s> \"\"\"\nWrite a function to split a list for every nth element.\n\"\"\"\ndef list_split(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_2(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_3(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_4(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_5(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_6(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_7(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_2(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_3(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_4(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_5(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_6(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\"\"\n\tif step == 0:\n\t\treturn []\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n\ndef list_split_7(S, step):\n\t\"\"\"\n\t:type S: list\n\t:type step: int\n\t:rtype: list\n\t\"\""}
{"ID": 629, "source": "MBPP:266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\ndef lateralsurface_cube(l):\n\treturn 4 * l * l\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l * l * l\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\treturn 6 * l * l\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r, h):\n\treturn 2 * 3.14 * r * h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r * r * r\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r, h):\n\treturn 3.14 * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1 / 3) * 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 4 * l * l\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l * l * l\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\treturn 6 * l * l\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateralsurface_cylinder(r, h):\n\treturn 2 * 3.14 * r * h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r * r * r\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\ndef lateralsurface_cone(r, h):\n\treturn 3.14 * r * h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn (1 / 3) * 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):"}
{"ID": 632, "source": "MBPP:269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"\ndef ascii_value(k):\n\treturn ord(k)\n\nprint(ascii_value('a'))\nprint(ascii_value('b'))\nprint(ascii_value('c'))\nprint(ascii_value('d'))\nprint(ascii_value('e'))\nprint(ascii_value('f'))\nprint(ascii_value('g'))\nprint(ascii_value('h'))\nprint(ascii_value('i'))\nprint(ascii_value('j'))\nprint(ascii_value('k'))\nprint(ascii_value('l'))\nprint(ascii_value('m'))\nprint(ascii_value('n'))\nprint(ascii_value('o'))\nprint(ascii_value('p'))\nprint(ascii_value('q'))\nprint(ascii_value('r'))\nprint(ascii_value('s'))\nprint(ascii_value('t'))\nprint(ascii_value('u'))\nprint(ascii_value('v'))\nprint(ascii_value('w'))\nprint(ascii_value('x'))\nprint(ascii_value('y'))\nprint(ascii_value('z'))\nprint(ascii_value('A'))\nprint(ascii_value('B'))\nprint(ascii_value('C'))\nprint(ascii_value('D'))\nprint(ascii_value('E'))\nprint(ascii_value('F'))\nprint(ascii_value('G'))\nprint(ascii_value('H'))\nprint(ascii_value('I'))\nprint(ascii_value('J'))\nprint(ascii_value('K'))\nprint(ascii_value('L'))\nprint(ascii_value('M'))\nprint(ascii_value('N'))\nprint(ascii_value('O'))\nprint(ascii_value('P'))\nprint(ascii_value('Q'))\nprint(ascii_value('R'))\nprint(ascii_value('S'))\nprint(ascii_value('T'))\nprint(ascii_value('U'))\nprint(ascii_value('V'))\nprint(ascii_value('W'))\nprint(ascii_value('X'))\nprint(ascii_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(ascii_value('a'))\nprint(ascii_value('b'))\nprint(ascii_value('c'))\nprint(ascii_value('d'))\nprint(ascii_value('e'))\nprint(ascii_value('f'))\nprint(ascii_value('g'))\nprint(ascii_value('h'))\nprint(ascii_value('i'))\nprint(ascii_value('j'))\nprint(ascii_value('k'))\nprint(ascii_value('l'))\nprint(ascii_value('m'))\nprint(ascii_value('n'))\nprint(ascii_value('o'))\nprint(ascii_value('p'))\nprint(ascii_value('q'))\nprint(ascii_value('r'))\nprint(ascii_value('s'))\nprint(ascii_value('t'))\nprint(ascii_value('u'))\nprint(ascii_value('v'))\nprint(ascii_value('w'))\nprint(ascii_value('x'))\nprint(ascii_value('y'))\nprint(ascii_value('z'))\nprint(ascii_value('A'))\nprint(ascii_value('B'))\nprint(ascii_value('C'))\nprint(ascii_value('D'))\nprint(ascii_value('E'))\nprint(ascii_value('F'))\nprint(ascii_value('G'))\nprint(ascii_value('H'))\nprint(ascii_value('I'))\nprint(ascii_value('J'))\nprint(ascii_value('K'))\nprint(ascii_value('L'))\nprint(ascii_value('M'))\nprint(ascii_value('N'))\nprint(ascii_value('O'))\nprint(ascii_value('P'))\nprint(ascii_value('Q'))\nprint(ascii_value('R'))\nprint(ascii_value('S'))\nprint(ascii_value('T'))\nprint(ascii_value('U'))\nprint(ascii_value('V'))\nprint(ascii_value('W'))\nprint(ascii_value('X'))\nprint(ascii_"}
{"ID": 633, "source": "MBPP:270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of even numbers at even positions.\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i]%2==0 and i%2==0:\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n))\n\n\n\"\"\"\nWrite a python function to find the sum of even numbers at odd positions.\n\"\"\"\ndef sum_even_and_odd_index(arr,n):  \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i]%2==0 and i%2==0:\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_odd_index(arr,n))\n\n\n\"\"\"\nWrite a python function to find the sum of even numbers at odd positions.\n\"\"\"\ndef sum_even_and_odd_index(arr,n):  \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i]%2==0 and i%2==0:\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_odd_index(arr,n))\n\n\n\"\"\"\nWrite a python function to find the sum of even numbers at odd positions.\n\"\"\"\ndef sum_even_and_odd_index(arr,n):  \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i]%2==0 and i%2==0:\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "arr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n))\n\n\n\"\"\"\nWrite a python function to find the sum of even numbers at odd positions.\n\"\"\"\ndef sum_even_and_odd_index(arr,n):  \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i]%2==0 and i%2==0:\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_odd_index(arr,n))\n\n\n\"\"\"\nWrite a python function to find the sum of even numbers at odd positions.\n\"\"\"\ndef sum_even_and_odd_index(arr,n):  \n\tsum = 0\n\tfor i in range(n):\n\t\tif arr[i]%2==0 and i%2==0:\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_odd_index(arr,n))"}
{"ID": 638, "source": "MBPP:275", "prompt": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\tfor i in range(n-1,m-1,-1): \n\t\tif a[i]==a[m-1]: \n\t\t\treturn i \n\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 5\nm = 8\nprint(get_Position(a,n,m)) \n\n\n\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\tfor i in range(n-1,m-1,-1): \n\t\tif a[i]==a[m-1]: \n\t\t\treturn i \n\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 5\nm = 8\nprint(get_Position(a,n,m)) \n\n\n\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\tfor i in range(n-1,m-1,-1): \n\t\tif a[i]==a[m-1]: \n\t\t\treturn i \n\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 5\nm = 8\nprint(get_Position(a,n,m)) \n\n\n\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\tfor i in range(n-1,m-1,-1): \n\t\tif a[i]==a[m-1]: \n\t\t\treturn i \n\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 5\nm = 8", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "n = 5\nm = 8\nprint(get_Position(a,n,m)) \n\n\n\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\tfor i in range(n-1,m-1,-1): \n\t\tif a[i]==a[m-1]: \n\t\t\treturn i \n\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 5\nm = 8\nprint(get_Position(a,n,m)) \n\n\n\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\n\"\"\"\ndef get_Position(a,n,m): \n\tfor i in range(n-1,m-1,-1): \n\t\tif a[i]==a[m-1]: \n\t\t\treturn i \n\treturn -1\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = 5\nm = 8"}
{"ID": 639, "source": "MBPP:276", "prompt": "\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(l,w,h):\n\treturn (l*w*h)/3\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the volume of a circular sphere.\n\"\"\"\ndef volume_circular_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cy", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(l,w,h):\n\treturn (l*w*h)/3\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the volume of a circular sphere.\n\"\"\"\ndef volume_circular_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cy"}
{"ID": 640, "source": "MBPP:277", "prompt": "\"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to filter a dictionary based on values.\n\"\"\"\ndef dict_filter(dict,n):\n\treturn {k:v for k,v in dict.items() if v == n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 646, "source": "MBPP:283", "prompt": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\"\"\"\ndef validate(n): \n\tcount = [0] * 10 \n\tfor i in range(len(n)): \n\t\tcount[ord(n[i]) - ord('0')] += 1\n\tfor i in range(len(n)): \n\t\tif count[ord(n[i]) - ord('0')] > ord(n[i]) - ord('0'): \n\t\t\treturn False\n\treturn True\n\n\n# Driver Code \nn = \"123456789\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"12345678901\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"123456789012\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890123\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"12345678901234\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"123456789012345\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890123456\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"12345678901234567\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = \"123456789\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"12345678901\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"123456789012\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890123\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"12345678901234\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"123456789012345\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"1234567890123456\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n\nn = \"12345678901234567\"\nif validate(n): \n\tprint(\"Valid\") \nelse: \n\tprint(\"Invalid\") \n"}
{"ID": 648, "source": "MBPP:285", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\n\"\"\"\ndef text_match_two_three(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_2(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_3(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_4(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_5(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_6(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_7(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_8(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_9(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_10(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_11(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_12(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_13(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_14(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_15(text):\n\treturn re", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_2(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_3(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_4(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_5(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_6(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_7(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_8(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_9(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_10(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_11(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_12(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_13(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_14(text):\n\treturn re.match(r'a(b{2,3})', text)\n\n\ndef text_match_two_three_15(text):"}
{"ID": 650, "source": "MBPP:287", "prompt": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\n\"\"\"\ndef square_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i*i\n\treturn sum\n\nprint(square_Sum(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef cube_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i*i*i\n\treturn sum\n\nprint(cube_Sum(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(square_Sum(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef cube_Sum(n):  \n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += i*i*i\n\treturn sum\n\nprint(cube_Sum(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula.\n\"\"\"\ndef cube_Sum_Formula(n):  \n\treturn (n*(n+1)*(2*n+1))//6\n\nprint(cube_Sum_Formula(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers using formula."}
{"ID": 655, "source": "MBPP:292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find quotient of two numbers.\n\"\"\"\ndef find(n,m):  \n\treturn n/m\n\nprint(find(10,2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 656, "source": "MBPP:293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"\ndef otherside_rightangle(w,h):\n\treturn (w**2 + h**2)**0.5\n\nprint(otherside_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r**3\n\nprint(sphere_volume(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r,h):\n\treturn 3.14 * r**2 * h\n\nprint(cylinder_volume(5,10))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5 * b * h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,w):\n\treturn l * w\n\nprint(rectangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s * s\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5 * b * h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,w):\n\treturn l * w\n\nprint(rectangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (w**2 + h**2)**0.5\n\nprint(otherside_rightangle(3,4))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef sphere_volume(r):\n\treturn (4/3) * 3.14 * r**3\n\nprint(sphere_volume(5))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef cylinder_volume(r,h):\n\treturn 3.14 * r**2 * h\n\nprint(cylinder_volume(5,10))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5 * b * h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,w):\n\treturn l * w\n\nprint(rectangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s * s\n\nprint(square_area(5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14 * r**2\n\nprint(circle_area(5))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn 0.5 * b * h\n\nprint(triangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,w):\n\treturn l * w\n\nprint(rectangle_area(5,10))\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square"}
{"ID": 657, "source": "MBPP:294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"\ndef max_val(listval):\n\tmax_val = listval[0]\n\tfor i in range(1, len(listval)):\n\t\tif max_val < listval[i]:\n\t\t\tmax_val = listval[i]\n\treturn max_val\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13"}
{"ID": 658, "source": "MBPP:295", "prompt": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\t", "predict": "<s> \"\"\"\nWrite a function to return the sum of all divisors of a number.\n\"\"\"\ndef sum_div(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tsum = 0\n\tfor i in range(1, number+1):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\nprint(sum_div_except(10))\n\n\"\"\"\nWrite a function to return the sum of all divisors of a number except the number itself.\n\"\"\"\ndef sum_div_except(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n"}
{"ID": 660, "source": "MBPP:297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"\ndef flatten_list(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_2(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_2(sublist)]\n\telse:\n\t\treturn list1\n\n\ndef flatten_list_3(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_3(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_4(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_4(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_5(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_5(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_6(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_6(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_7(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_7(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_8(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_8(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_9(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_2(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_2(sublist)]\n\telse:\n\t\treturn list1\n\n\ndef flatten_list_3(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_3(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_4(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_4(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_5(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_5(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_6(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_6(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_7(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_7(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_8(list1):\n\tif type(list1) == list:\n\t\treturn [item for sublist in list1 for item in flatten_list_8(sublist)]\n\telse:\n\t\treturn [list1]\n\n\ndef flatten_list_9(list1):"}
{"ID": 661, "source": "MBPP:298", "prompt": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the nested list elements which are present in another list.\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_2(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_3(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_4(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_5(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_6(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_7(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_2(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_3(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_4(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_5(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_6(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]\n\t:type l2: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\treturn [x for x in l1 if x in l2]\n\n\ndef intersection_nested_lists_7(l1, l2):\n\t\"\"\"\n\t:type l1: List[List[int]]"}
{"ID": 664, "source": "MBPP:301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"\ndef dict_depth(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth(v) for v in d.values())\n\n\ndef dict_depth_2(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_2(v) for v in d.values())\n\n\ndef dict_depth_3(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_3(v) for v in d.values())\n\n\ndef dict_depth_4(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_4(v) for v in d.values())\n\n\ndef dict_depth_5(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_5(v) for v in d.values())\n\n\ndef dict_depth_6(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_6(v) for v in d.values())\n\n\ndef dict_depth_7(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_7(v) for v in d.values())\n\n\ndef dict_depth_8(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_8(v) for v in d.values())\n\n\ndef dict_depth_9(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_9(v) for v in d.values())\n\n\ndef dict_depth_10(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_10(v) for v in d.values())\n\n\ndef dict_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth(v) for v in d.values())\n\n\ndef dict_depth_2(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_2(v) for v in d.values())\n\n\ndef dict_depth_3(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_3(v) for v in d.values())\n\n\ndef dict_depth_4(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_4(v) for v in d.values())\n\n\ndef dict_depth_5(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_5(v) for v in d.values())\n\n\ndef dict_depth_6(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_6(v) for v in d.values())\n\n\ndef dict_depth_7(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_7(v) for v in d.values())\n\n\ndef dict_depth_8(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_8(v) for v in d.values())\n\n\ndef dict_depth_9(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_9(v) for v in d.values())\n\n\ndef dict_depth_10(d):\n\tif not isinstance(d, dict):\n\t\treturn 0\n\treturn 1 + max(dict_depth_10(v) for v in d.values())\n\n\ndef dict_"}
{"ID": 665, "source": "MBPP:302", "prompt": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\n\"\"\"\ndef set_Bit_Number(n): \n\tif n == 0: \n\t\treturn -1\n\treturn 31 - n.bit_length() \n\n# Driver Code \nn = 10\nprint(set_Bit_Number(n)) \n\nn = 15\nprint(set_Bit_Number(n)) \n\nn = 1\nprint(set_Bit_Number(n)) \n\nn = 0\nprint(set_Bit_Number(n)) \n\nn = 1073741824\nprint(set_Bit_Number(n)) \n\nn = 2147483648\nprint(set_Bit_Number(n)) \n\nn = 4294967295\nprint(set_Bit_Number(n)) \n\nn = 4294967296\nprint(set_Bit_Number(n)) \n\nn = 9223372036854775807\nprint(set_Bit_Number(n)) \n\nn = 18446744073709551615\nprint(set_Bit_Number(n)) \n\nn = 36893488147419103232\nprint(set_Bit_Number(n)) \n\nn = 73786976294838206464\nprint(set_Bit_Number(n)) \n\nn = 147573952589676412928\nprint(set_Bit_Number(n)) \n\nn = 295147904579352825856\nprint(set_Bit_Number(n)) \n\nn = 590295810358705651712\nprint(set_Bit_Number(n)) \n\nn = 1180591620717411303424\nprint(set_Bit_Number(n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = 10\nprint(set_Bit_Number(n)) \n\nn = 15\nprint(set_Bit_Number(n)) \n\nn = 1\nprint(set_Bit_Number(n)) \n\nn = 0\nprint(set_Bit_Number(n)) \n\nn = 1073741824\nprint(set_Bit_Number(n)) \n\nn = 2147483648\nprint(set_Bit_Number(n)) \n\nn = 4294967295\nprint(set_Bit_Number(n)) \n\nn = 4294967296\nprint(set_Bit_Number(n)) \n\nn = 9223372036854775807\nprint(set_Bit_Number(n)) \n\nn = 18446744073709551615\nprint(set_Bit_Number(n)) \n\nn = 36893488147419103232\nprint(set_Bit_Number(n)) \n\nn = 73786976294838206464\nprint(set_Bit_Number(n)) \n\nn = 147573952589676412928\nprint(set_Bit_Number(n)) \n\nn = 295147904579352825856\nprint(set_Bit_Number(n)) \n\nn = 590295810358705651712\nprint(set_Bit_Number(n)) \n\nn = 1180591620717411303424\nprint(set_Bit_Number(n"}
{"ID": 666, "source": "MBPP:303", "prompt": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\n\"\"\"\ndef solve(a,n):   \n\tcount=0\n\tfor i in range(n):\n\t\tif a[i]=='A':\n\t\t\tcount+=1\n\treturn count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 667, "source": "MBPP:304", "prompt": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find element at a given index after number of rotations.\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \n\tn = len(arr)\n\tif rotations == 0 :\n\t\treturn arr[index]\n\telse :\n\t\treturn arr[(index + rotations) % n]\n\n\narr = [1,2,3,4,5,6,7]\nranges = 7\nrotations = 3\nindex = 4\nprint(find_Element(arr,ranges,rotations,index))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 670, "source": "MBPP:307", "prompt": "\"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get a colon of a tuple.\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\n\t\"\"\"\n\t:type tuplex: tuple\n\t:type m: int\n\t:type n: int\n\t:rtype: tuple\n\t\"\"\"\n\treturn tuplex[m:n]\n\ndef colon_list(listx,m,n):\n\t\"\"\"\n\t:type listx: list\n\t:type m: int\n\t:type n: int\n\t:rtype: list\n\t\"\"\"\n\treturn listx[m:n]\n\ndef colon_string(stringx,m,n):\n\t\"\"\"\n\t:type stringx: str\n\t:type m: int\n\t:type n: int\n\t:rtype: str\n\t\"\"\"\n\treturn stringx[m:n]\n\ndef colon_dict(dictx,m,n):\n\t\"\"\"\n\t:type dictx: dict\n\t:type m: int\n\t:type n: int\n\t:rtype: dict\n\t\"\"\"\n\treturn dictx[m:n]\n\ndef colon_set(setx,m,n):\n\t\"\"\"\n\t:type setx: set\n\t:type m: int\n\t:type n: int\n\t:rtype: set\n\t\"\"\"\n\treturn setx[m:n]\n\ndef colon_frozenset(frozensetx,m,n):\n\t\"\"\"\n\t:type frozensetx: frozenset\n\t:type m: int\n\t:type n: int\n\t:rtype: frozenset\n\t\"\"\"\n\treturn frozensetx[m:n]\n\ndef colon_array(arrayx,m,n):\n\t\"\"\"\n\t:type arrayx: array\n\t:type m: int\n\t:type n: int\n\t:rtype: array\n\t\"\"\"\n\treturn arrayx[m:n]\n\ndef colon_bytearray(bytearrayx,m,n):\n\t\"\"\"\n\t:type bytearrayx: bytearray\n\t:type m: int\n\t:type n: int\n\t:rtype: bytearray\n\t\"\"\"\n\treturn bytearrayx[m:n]\n\ndef colon_memoryview(memoryviewx,m,n):", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type tuplex: tuple\n\t:type m: int\n\t:type n: int\n\t:rtype: tuple\n\t\"\"\"\n\treturn tuplex[m:n]\n\ndef colon_list(listx,m,n):\n\t\"\"\"\n\t:type listx: list\n\t:type m: int\n\t:type n: int\n\t:rtype: list\n\t\"\"\"\n\treturn listx[m:n]\n\ndef colon_string(stringx,m,n):\n\t\"\"\"\n\t:type stringx: str\n\t:type m: int\n\t:type n: int\n\t:rtype: str\n\t\"\"\"\n\treturn stringx[m:n]\n\ndef colon_dict(dictx,m,n):\n\t\"\"\"\n\t:type dictx: dict\n\t:type m: int\n\t:type n: int\n\t:rtype: dict\n\t\"\"\"\n\treturn dictx[m:n]\n\ndef colon_set(setx,m,n):\n\t\"\"\"\n\t:type setx: set\n\t:type m: int\n\t:type n: int\n\t:rtype: set\n\t\"\"\"\n\treturn setx[m:n]\n\ndef colon_frozenset(frozensetx,m,n):\n\t\"\"\"\n\t:type frozensetx: frozenset\n\t:type m: int"}
{"ID": 671, "source": "MBPP:308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the specified number of largest products from two given lists.\n\"\"\"\ndef large_product(nums1, nums2, N):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type N: int\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums1) == 0 or len(nums2) == 0:\n\t\treturn []\n\tif N > len(nums1) * len(nums2):\n\t\treturn []\n\tresult = []\n\tfor i in range(N):\n\t\tresult.append(nums1[i] * nums2[i])\n\treturn result\n\n\nif __name__ == '__main__':\n\tprint(large_product([1, 2, 3], [4, 5, 6], 3))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 4))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 5))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 6))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 7))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 8))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 9))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 10))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 11))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 12))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 13))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 14))\n\tprint(large_product([1, 2, 3], [4, 5,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(large_product([1, 2, 3], [4, 5, 6], 3))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 4))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 5))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 6))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 7))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 8))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 9))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 10))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 11))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 12))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 13))\n\tprint(large_product([1, 2, 3], [4, 5, 6], 14))\n\tprint(large_product([1, 2, 3], [4, 5,"}
{"ID": 672, "source": "MBPP:309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"\ndef maximum(a,b):   \n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\nprint(maximum(10,20))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum(a,b,c):   \n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(maximum(10,20,30))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum(a,b,c,d):   \n\tif a>b and a>c and a>d:\n\t\treturn a\n\telif b>a and b>c and b>d:\n\t\treturn b\n\telif c>a and c>b and c>d:\n\t\treturn c\n\telse:\n\t\treturn d\n\nprint(maximum(10,20,30,40))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum(a,b,c,d,e):   \n\tif a>b and a>c and a>d and a>e:\n\t\treturn a\n\telif b>a and b>c and b>d and b>e:\n\t\treturn b\n\telif c>a and c>b and c>d and c>e:\n\t\treturn c\n\telif d>a and d>b and d>c and d>e:\n\t\treturn d\n\telse:\n\t\treturn e\n\nprint(maximum(10,20,30,40,50))\n\n\"\"\"\nWrite a python function to find the maximum of six numbers.\n\"\"\"\ndef maximum(a,b,c,d,e,f):   \n\tif a>b and a>c and a>d and a>e and a>f:\n\t\treturn a\n\telif b>a and b>c and b>d and b>e and b>f:\n\t\treturn b\n\telif c>a and c>b and c>d and c", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\nprint(maximum(10,20))\n\n\"\"\"\nWrite a python function to find the maximum of three numbers.\n\"\"\"\ndef maximum(a,b,c):   \n\tif a>b and a>c:\n\t\treturn a\n\telif b>a and b>c:\n\t\treturn b\n\telse:\n\t\treturn c\n\nprint(maximum(10,20,30))\n\n\"\"\"\nWrite a python function to find the maximum of four numbers.\n\"\"\"\ndef maximum(a,b,c,d):   \n\tif a>b and a>c and a>d:\n\t\treturn a\n\telif b>a and b>c and b>d:\n\t\treturn b\n\telif c>a and c>b and c>d:\n\t\treturn c\n\telse:\n\t\treturn d\n\nprint(maximum(10,20,30,40))\n\n\"\"\"\nWrite a python function to find the maximum of five numbers.\n\"\"\"\ndef maximum(a,b,c,d,e):   "}
{"ID": 673, "source": "MBPP:310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\treturn tuple(str1)\n\nprint(string_to_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set(str1)\n\nprint(string_to_set(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\treturn dict(str1)\n\nprint(string_to_dict(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\treturn tuple(str1)\n\nprint(string_to_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set(str1)\n\nprint(string_to_set(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\treturn dict(str1)\n\nprint(string_to_dict(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\treturn tuple(str1)\n\nprint(string_to_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn tuple(str1)\n\nprint(string_to_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set(str1)\n\nprint(string_to_set(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\treturn dict(str1)\n\nprint(string_to_dict(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\treturn tuple(str1)\n\nprint(string_to_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):\n\treturn set(str1)\n\nprint(string_to_set(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a dictionary.\n\"\"\"\ndef string_to_dict(str1):\n\treturn dict(str1)\n\nprint(string_to_dict(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a tuple.\n\"\"\"\ndef string_to_tuple(str1):\n\treturn tuple(str1)\n\nprint(string_to_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a list.\n\"\"\"\ndef string_to_list(str1):\n\treturn list(str1)\n\nprint(string_to_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a given string to a set.\n\"\"\"\ndef string_to_set(str1):"}
{"ID": 675, "source": "MBPP:312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\nprint(volume_cone(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\nprint(volume_cylinder(5,10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\nprint(volume_cuboid(5,5,5))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l,w,h):\n\treturn l*w*h\n\nprint(volume_rectangular_prism(5,5,5))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b,h):\n\treturn (1/2)*b*h\n\nprint(volume_triangular_prism(5,5))\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b,h):\n\treturn (1/3)*b*h\n\nprint(volume_pyramid(5,5))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\nprint(volume_cone(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\nprint(volume_cylinder(5,10))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (1/3)*3.14*r**2*h\n\nprint(volume_cone(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\nprint(volume_cylinder(5,10))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r**3\n\nprint(volume_sphere(5))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\nprint(volume_cuboid(5,5,5))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l,w,h):\n\treturn l*w*h\n\nprint(volume_rectangular_prism(5,5,5))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b,h):\n\treturn (1/2)*b*h\n\nprint(volume_triangular_prism(5,5))\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b,h):\n\treturn (1/3)*b*h\n\nprint(volume_pyramid(5,5))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*3.14*r**2*h\n\nprint(volume_cone(5,10))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):"}
{"ID": 681, "source": "MBPP:318", "prompt": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n\nprint(max_volume(10))\n\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\n\"\"\"\ndef max_volume (s): \n\tfor i in range(s//3,0,-1): \n\t\tif s%i==0: \n\t\t\treturn i*i*s//i \n\treturn 0\n"}
{"ID": 685, "source": "MBPP:322", "prompt": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\n\"\"\"\ndef position_min(list1):\n\tmin_value = min(list1)\n\tmin_positions = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == min_value:\n\t\t\tmin_positions.append(i)\n\treturn min_positions\n\nprint(position_min([1, 2, 3, 4, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, ", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(position_min([1, 2, 3, 4, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))\nprint(position_min([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "}
{"ID": 688, "source": "MBPP:325", "prompt": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\n\"\"\"\ndef get_Min_Squares(n):\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 3\n\tif n == 4:\n\t\treturn 4\n\tif n == 5:\n\t\treturn 5\n\tif n == 6:\n\t\treturn 6\n\tif n == 7:\n\t\treturn 7\n\tif n == 8:\n\t\treturn 8\n\tif n == 9:\n\t\treturn 9\n\tif n == 10:\n\t\treturn 10\n\tif n == 11:\n\t\treturn 11\n\tif n == 12:\n\t\treturn 12\n\tif n == 13:\n\t\treturn 13\n\tif n == 14:\n\t\treturn 14\n\tif n == 15:\n\t\treturn 15\n\tif n == 16:\n\t\treturn 16\n\tif n == 17:\n\t\treturn 17\n\tif n == 18:\n\t\treturn 18\n\tif n == 19:\n\t\treturn 19\n\tif n == 20:\n\t\treturn 20\n\tif n == 21:\n\t\treturn 21\n\tif n == 22:\n\t\treturn 22\n\tif n == 23:\n\t\treturn 23\n\tif n == 24:\n\t\treturn 24\n\tif n == 25:\n\t\treturn 25\n\tif n == 26:\n\t\treturn 26\n\tif n == 27:\n\t\treturn 27\n\tif n == 28:\n\t\treturn 28\n\tif n == 29:\n\t\treturn 29\n\tif n == 30:\n\t\treturn 30\n\tif n == 31:\n\t\treturn 31\n\tif n == 32:\n\t\treturn 32\n\tif n == ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 3\n\tif n == 4:\n\t\treturn 4\n\tif n == 5:\n\t\treturn 5\n\tif n == 6:\n\t\treturn 6\n\tif n == 7:\n\t\treturn 7\n\tif n == 8:\n\t\treturn 8\n\tif n == 9:\n\t\treturn 9\n\tif n == 10:\n\t\treturn 10\n\tif n == 11:\n\t\treturn 11\n\tif n == 12:\n\t\treturn 12\n\tif n == 13:\n\t\treturn 13\n\tif n == 14:\n\t\treturn 14\n\tif n == 15:\n\t\treturn 15\n\tif n == 16:\n\t\treturn 16\n\tif n == 17:\n\t\treturn 17\n\tif n == 18:\n\t\treturn 18\n\tif n == 19:\n\t\treturn 19\n\tif n == 20:\n\t\treturn 20\n\tif n == 21:\n\t\treturn 21\n\tif n == 22:\n\t\treturn 22\n\tif n == 23:\n\t\treturn 23\n\tif n == 24:\n\t\treturn 24\n\tif n == 25:\n\t\treturn 25\n\tif n == 26:\n\t\treturn 26\n\tif n == 27:\n\t\treturn 27\n\tif n == 28:\n\t\treturn 28\n\tif n == 29:\n\t\treturn 29\n\tif n == 30:\n\t\treturn 30\n\tif n == 31:\n\t\treturn 31\n\tif n == 32:\n\t\treturn 32"}
{"ID": 689, "source": "MBPP:326", "prompt": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\n\"\"\"\ndef most_occurrences(test_list):\n\t\"\"\"\n\t:param test_list: list of strings\n\t:return: string with most occurrences\n\t\"\"\"\n\tword_count = {}\n\tfor word in test_list:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\tmax_count = 0\n\tmax_word = \"\"\n\tfor word, count in word_count.items():\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_word = word\n\treturn max_word\n\n\ndef test_function(test_case):\n\ttest_string_list = test_case[0]\n\tsolution = test_case[1]\n\tif most_occurrences(test_string_list) == solution:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\n\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function([[\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"hello\"], \"hello\"])\ntest_function(["}
{"ID": 693, "source": "MBPP:330", "prompt": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\ndef find_char(text):\n\timport re\n\treturn re.findall(r'\\w{3,5}', text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 694, "source": "MBPP:331", "prompt": "\"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count unset bits of a given number.\n\"\"\"\ndef count_unset_bits(n): \n\tcount = 0\n\twhile n: \n\t\tcount += 1\n\t\tn &= n - 1\n\treturn count \n\n# Driver Code \nn = 12\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 13\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 14\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 15\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 16\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 17\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 18\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 19\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 20\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 21\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 22\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 23\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 24\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 25\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 26\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = 12\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 13\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 14\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 15\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 16\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 17\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 18\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 19\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 20\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 21\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 22\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 23\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 24\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 25\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits(n)) \n\nn = 26\nprint(\"Number of unset bits in\", n, \"is\", count_unset_bits"}
{"ID": 699, "source": "MBPP:336", "prompt": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\n\"\"\"\ndef check_monthnum(monthname1):\n\tmonthname = monthname1.lower()\n\tif monthname == \"january\" or monthname == \"march\" or monthname == \"may\" or monthname == \"july\" or monthname == \"august\" or monthname == \"october\" or monthname == \"december\":\n\t\treturn 28\n\telif monthname == \"april\" or monthname == \"june\" or monthname == \"september\" or monthname == \"november\":\n\t\treturn 30\n\telse:\n\t\treturn 29\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 700, "source": "MBPP:337", "prompt": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\n\"\"\"\ndef text_match_word(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_2(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_3(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_4(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_5(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_6(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_7(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_8(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_9(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_10(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_11(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_12(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_13(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_14(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_2(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_3(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_4(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_5(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_6(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_7(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_8(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_9(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_10(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_11(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_12(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_13(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text_match_word_punctuation_14(text):\n\treturn text.endswith(('?', '!', '.'))\n\ndef text"}
{"ID": 701, "source": "MBPP:338", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\n\"\"\"\ndef count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)): \n\t\tif s[i] == s[-i-1]: \n\t\t\tcount += 1\n\treturn count \n\ns = \"abcde\"\nprint(count_Substring_With_Equal_Ends(s)) \n\n\n\"\"\"\nWrite a python function to find the maximum sum of all subarrays of size k.\n\"\"\"\ndef max_sum_of_subarrays(arr, k): \n\tn = len(arr) \n\tif n == 0 or k == 0: \n\t\treturn 0\n\tif k > n: \n\t\treturn -1\n\tmax_sum = 0\n\tfor i in range(n - k + 1): \n\t\tmax_sum = max(max_sum, sum(arr[i:i+k])) \n\treturn max_sum \n\narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(max_sum_of_subarrays(arr, k)) \n\n\n\"\"\"\nWrite a python function to find the maximum sum of all subarrays of size k.\n\"\"\"\ndef max_sum_of_subarrays(arr, k): \n\tn = len(arr) \n\tif n == 0 or k == 0: \n\t\treturn 0\n\tif k > n: \n\t\treturn -1\n\tmax_sum = 0\n\tfor i in range(n - k + 1): \n\t\tmax_sum = max(max_sum, sum(arr[i:i+k])) \n\treturn max_sum \n\narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(max_sum_of_subarrays(arr, k)) \n\n\n\"\"\"\nWrite a python function to find the maximum sum of all subarrays of size k.\n\"\"\"\ndef max_sum_of_subarrays(arr, k): \n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the maximum sum of all subarrays of size k.\n\"\"\"\ndef max_sum_of_subarrays(arr, k): \n\tn = len(arr) \n\tif n == 0 or k == 0: \n\t\treturn 0\n\tif k > n: \n\t\treturn -1\n\tmax_sum = 0\n\tfor i in range(n - k + 1): \n\t\tmax_sum = max(max_sum, sum(arr[i:i+k])) \n\treturn max_sum \n\narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(max_sum_of_subarrays(arr, k)) \n\n\n\"\"\"\nWrite a python function to find the maximum sum of all subarrays of size k.\n\"\"\"\ndef max_sum_of_subarrays(arr, k): \n\tn = len(arr) \n\tif n == 0 or k == 0: \n\t\treturn 0\n\tif k > n: \n\t\treturn -1\n\tmax_sum = 0\n\tfor i in range(n - k + 1): \n\t\tmax_sum = max(max_sum, sum(arr[i:i+k])) \n\treturn max_sum \n\narr = [1, 4, 2, 10, 2, 3, 1, 0, 20] \nk = 4\nprint(max_sum_of_subarrays(arr, k)) \n\n\n\"\"\"\nWrite a python function to find the maximum sum of all subarrays of size k.\n\"\"\"\ndef max_sum_of_subarrays(arr, k): "}
{"ID": 702, "source": "MBPP:339", "prompt": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor(10,100))\n\n\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\n\"\"\"\ndef find_Divisor(x,y):  \n\tdivisors = []  \n\tfor i in range(x,y+1):  \n\t\tif x%i == 0:  \n\t\t\tdivisors.append(i)  \n\treturn max(divisors)  \n\nprint(find_Divisor"}
{"ID": 703, "source": "MBPP:340", "prompt": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\"\"\"\ndef sum_three_smallest_nums(lst):\n\treturn sum(sorted(lst)[:3])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 704, "source": "MBPP:341", "prompt": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given set into ordered tuples.\n\"\"\"\ndef set_to_tuple(s):\n\treturn tuple(sorted(s))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 705, "source": "MBPP:342", "prompt": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\n\"\"\"\ndef find_minimum_range(list):\n\tmin_range = [100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tmin_range}
{"ID": 710, "source": "MBPP:347", "prompt": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of squares in a rectangle.\n\"\"\"\ndef count_Squares(m,n): \n\treturn m*n\n\nprint(count_Squares(2,3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a square.\n\"\"\"\ndef count_Rectangles(m): \n\treturn m*m\n\nprint(count_Rectangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a square.\n\"\"\"\ndef count_Triangles(m): \n\treturn m*m\n\nprint(count_Triangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a square.\n\"\"\"\ndef count_Circles(m): \n\treturn m*m\n\nprint(count_Circles(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m): \n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m): \n\treturn m*m\n\nprint(count_Rectangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a circle.\n\"\"\"\ndef count_Triangles_in_circle(m): \n\treturn m*m\n\nprint(count_Triangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a circle.\n\"\"\"\ndef count_Circles_in_circle(m): \n\treturn m*m\n\nprint(count_Circles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m): \n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m): \n\treturn m", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn m*n\n\nprint(count_Squares(2,3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a square.\n\"\"\"\ndef count_Rectangles(m): \n\treturn m*m\n\nprint(count_Rectangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a square.\n\"\"\"\ndef count_Triangles(m): \n\treturn m*m\n\nprint(count_Triangles(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a square.\n\"\"\"\ndef count_Circles(m): \n\treturn m*m\n\nprint(count_Circles(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m): \n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m): \n\treturn m*m\n\nprint(count_Rectangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of triangles in a circle.\n\"\"\"\ndef count_Triangles_in_circle(m): \n\treturn m*m\n\nprint(count_Triangles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of circles in a circle.\n\"\"\"\ndef count_Circles_in_circle(m): \n\treturn m*m\n\nprint(count_Circles_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of squares in a circle.\n\"\"\"\ndef count_Squares_in_circle(m): \n\treturn m*m\n\nprint(count_Squares_in_circle(3))\n\n\n\"\"\"\nWrite a python function to count the number of rectangles in a circle.\n\"\"\"\ndef count_Rectangles_in_circle(m): "}
{"ID": 711, "source": "MBPP:348", "prompt": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\t", "predict": "<s> \"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\"\"\"\ndef find_ways(M): \n\tn = len(M)\n\tm = len(M[0])\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0 and j == 0:\n\t\t\t\tdp[i][j] = 1\n\t\t\telif i == 0 and j > 0:\n\t\t\t\tdp[i][j] = dp[i][j-1]\n\t\t\telif j == 0 and i > 0:\n\t\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1]\n\treturn dp[n-1][m-1]\n\n\ndef find_ways_2(M):\n\tn = len(M)\n\tm = len(M[0])\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0 and j == 0:\n\t\t\t\tdp[i][j] = 1\n\t\t\telif i == 0 and j > 0:\n\t\t\t\tdp[i][j] = dp[i][j-1]\n\t\t\telif j == 0 and i > 0:\n\t\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1]\n\treturn dp[n-1][m-1]\n\n\ndef find_ways_3(M):\n\tn = len(M)\n\tm = len(M[0])\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0 and j == 0:", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tn = len(M)\n\tm = len(M[0])\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0 and j == 0:\n\t\t\t\tdp[i][j] = 1\n\t\t\telif i == 0 and j > 0:\n\t\t\t\tdp[i][j] = dp[i][j-1]\n\t\t\telif j == 0 and i > 0:\n\t\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1]\n\treturn dp[n-1][m-1]\n\n\ndef find_ways_2(M):\n\tn = len(M)\n\tm = len(M[0])\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i == 0 and j == 0:\n\t\t\t\tdp[i][j] = 1\n\t\t\telif i == 0 and j > 0:\n\t\t\t\tdp[i][j] = dp[i][j-1]"}
{"ID": 713, "source": "MBPP:350", "prompt": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\n\"\"\"\ndef minimum_Length(s) : \n\t# code here\n\ts = s.replace(\"a\", \"\")\n\ts = s.replace(\"b\", \"\")\n\ts = s.replace(\"c\", \"\")\n\ts = s.replace(\"d\", \"\")\n\ts = s.replace(\"e\", \"\")\n\ts = s.replace(\"f\", \"\")\n\ts = s.replace(\"g\", \"\")\n\ts = s.replace(\"h\", \"\")\n\ts = s.replace(\"i\", \"\")\n\ts = s.replace(\"j\", \"\")\n\ts = s.replace(\"k\", \"\")\n\ts = s.replace(\"l\", \"\")\n\ts = s.replace(\"m\", \"\")\n\ts = s.replace(\"n\", \"\")\n\ts = s.replace(\"o\", \"\")\n\ts = s.replace(\"p\", \"\")\n\ts = s.replace(\"q\", \"\")\n\ts = s.replace(\"r\", \"\")\n\ts = s.replace(\"s\", \"\")\n\ts = s.replace(\"t\", \"\")\n\ts = s.replace(\"u\", \"\")\n\ts = s.replace(\"v\", \"\")\n\ts = s.replace(\"w\", \"\")\n\ts = s.replace(\"x\", \"\")\n\ts = s.replace(\"y\", \"\")\n\ts = s.replace(\"z\", \"\")\n\treturn len(s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 718, "source": "MBPP:355", "prompt": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\n\"\"\"\ndef count_Rectangles(radius):  \n\treturn 3.14 * radius * radius\n\nprint(count_Rectangles(10))\n\n\"\"\"\nWrite a python function to count the number of triangles in a circle of radius r.\n\"\"\"\ndef count_Triangles(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Triangles(10))\n\n\"\"\"\nWrite a python function to count the number of squares in a circle of radius r.\n\"\"\"\ndef count_Squares(radius):  \n\treturn 3.14 * radius * radius\n\nprint(count_Squares(10))\n\n\"\"\"\nWrite a python function to count the number of pentagons in a circle of radius r.\n\"\"\"\ndef count_Pentagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Pentagons(10))\n\n\"\"\"\nWrite a python function to count the number of hexagons in a circle of radius r.\n\"\"\"\ndef count_Hexagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Hexagons(10))\n\n\"\"\"\nWrite a python function to count the number of heptagons in a circle of radius r.\n\"\"\"\ndef count_Heptagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Heptagons(10))\n\n\"\"\"\nWrite a python function to count the number of octagons in a circle of radius r.\n\"\"\"\ndef count_Octagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Octagons(10))\n\n\"\"\"\nWrite a python function to count the number of nonagons in a circle of radius r.\n\"\"\"\ndef count_Nonagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Nonagons(10))\n\n\"\"\"\nWrite a python function to count the number of decagons in a circle of radius r.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(count_Squares(10))\n\n\"\"\"\nWrite a python function to count the number of pentagons in a circle of radius r.\n\"\"\"\ndef count_Pentagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Pentagons(10))\n\n\"\"\"\nWrite a python function to count the number of hexagons in a circle of radius r.\n\"\"\"\ndef count_Hexagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Hexagons(10))\n\n\"\"\"\nWrite a python function to count the number of heptagons in a circle of radius r.\n\"\"\"\ndef count_Heptagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Heptagons(10))\n\n\"\"\"\nWrite a python function to count the number of octagons in a circle of radius r.\n\"\"\"\ndef count_Octagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Octagons(10))\n\n\"\"\"\nWrite a python function to count the number of nonagons in a circle of radius r.\n\"\"\"\ndef count_Nonagons(radius):  \n\treturn 3.14 * radius * radius / 2\n\nprint(count_Nonagons(10))\n\n\"\"\"\nWrite a python function to count the number of decagons in a circle of radius r.\n\"\"\"\ndef"}
{"ID": 723, "source": "MBPP:360", "prompt": "\"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the n’th carol number.\n\"\"\"\ndef get_carol(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol(n-1) + get_carol(n-2) \n\ndef get_n_carol(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_n_carol(n-1) + get_n_carol(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\telse: \n\t\treturn get_carol(n-1) + get_carol(n-2) \n\ndef get_n_carol(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_n_carol(n-1) + get_n_carol(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number(n-1) + get_carol_number(n-2) \n\ndef get_carol_number(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol_number"}
{"ID": 726, "source": "MBPP:363", "prompt": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t", "predict": "<s> \"\"\"\nWrite a function to add the k elements to each element in the tuple.\n\"\"\"\ndef add_K_element(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\tresult = []\n\tfor i in test_list:\n\t\tresult.append(i + K)\n\treturn result\n\n\ndef add_K_element_2(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [i + K for i in test_list]\n\n\ndef add_K_element_3(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn map(lambda x: x + K, test_list)\n\n\ndef add_K_element_4(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_5(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_6(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_7(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_8(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_9", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tresult.append(i + K)\n\treturn result\n\n\ndef add_K_element_2(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [i + K for i in test_list]\n\n\ndef add_K_element_3(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn map(lambda x: x + K, test_list)\n\n\ndef add_K_element_4(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_5(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_6(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_7(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\"\n\treturn [x + K for x in test_list]\n\n\ndef add_K_element_8(test_list, K):\n\t\"\"\"\n\t:type test_list: list\n\t:type K: int\n\t:rtype: list\n\t\"\"\""}
{"ID": 727, "source": "MBPP:364", "prompt": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\"\"\"\ndef min_flip_to_make_string_alternate(str): \n\tcount = 0\n\tfor i in range(len(str)-1):\n\t\tif str[i] == str[i+1]:\n\t\t\tcount += 1\n\treturn count\n\nprint(min_flip_to_make_string_alternate(\"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(min_flip_to_make_string_alternate(\"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"}
{"ID": 729, "source": "MBPP:366", "prompt": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\"\"\"\ndef adjacent_num_product(list_nums):\n\tif len(list_nums) == 0:\n\t\treturn 0\n\telif len(list_nums) == 1:\n\t\treturn list_nums[0]\n\telse:\n\t\tmax_product = 0\n\t\tfor i in range(len(list_nums)-1):\n\t\t\tproduct = list_nums[i] * list_nums[i+1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\t\treturn max_product\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 732, "source": "MBPP:369", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the lateral surface area of cuboid\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n\treturn 2*(l*w + w*h + h*l)\n\nprint(lateralsurface_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\nprint(volume_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the surface area of cuboid\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\treturn 2*(l*w + w*h + h*l)\n\nprint(surfacearea_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the lateral surface area of cylinder\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\treturn 2*3.14*r*h\n\nprint(lateralsurface_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the volume of cylinder\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\nprint(volume_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the surface area of cylinder\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*h + 2*3.14*r*r\n\nprint(surfacearea_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of sphere\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4*3.14*r*r\n\nprint(lateralsurface_sphere(2))\n\n\"\"\"\nWrite a function to find the volume of sphere\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\nprint(volume_sphere(2))\n\n\"\"\"\nWrite a function to find the surface area of sphere\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*(l*w + w*h + h*l)\n\nprint(lateralsurface_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the volume of cuboid\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\nprint(volume_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the surface area of cuboid\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\treturn 2*(l*w + w*h + h*l)\n\nprint(surfacearea_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the lateral surface area of cylinder\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\treturn 2*3.14*r*h\n\nprint(lateralsurface_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the volume of cylinder\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\nprint(volume_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the surface area of cylinder\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*h + 2*3.14*r*r\n\nprint(surfacearea_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the lateral surface area of sphere\n\"\"\"\ndef lateralsurface_sphere(r):\n\treturn 4*3.14*r*r\n\nprint(lateralsurface_sphere(2))\n\n\"\"\"\nWrite a function to find the volume of sphere\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\nprint(volume_sphere(2))\n\n\"\"\"\nWrite a function to find the surface area of sphere\n\"\"\"\ndef surfacearea_sphere(r):"}
{"ID": 734, "source": "MBPP:371", "prompt": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest missing element in a sorted array.\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\n\t\"\"\"\n\t:type A: List[int]\n\t:type left_element: int\n\t:type right_element: int\n\t:rtype: int\n\t\"\"\"\n\tif left_element == right_element:\n\t\treturn left_element\n\tif left_element == 1:\n\t\treturn 1\n\tif right_element == len(A):\n\t\treturn len(A) + 1\n\tif A[left_element - 1] == left_element:\n\t\treturn left_element\n\tif A[right_element - 1] == right_element:\n\t\treturn right_element\n\tif A[left_element - 1] == right_element:\n\t\treturn right_element + 1\n\tif A[right_element - 1] == left_element:\n\t\treturn left_element + 1\n\tif A[left_element - 1] > left_element:\n\t\treturn left_element\n\tif A[right_element - 1] < right_element:\n\t\treturn right_element + 1\n\treturn A[left_element - 1] + 1\n\n\ndef smallest_missing_2(A, left_element, right_element):\n\t\"\"\"\n\t:type A: List[int]\n\t:type left_element: int\n\t:type right_element: int\n\t:rtype: int\n\t\"\"\"\n\tif left_element == right_element:\n\t\treturn left_element\n\tif left_element == 1:\n\t\treturn 1\n\tif right_element == len(A):\n\t\treturn len(A) + 1\n\tif A[left_element - 1] == left_element:\n\t\treturn left_element\n\tif A[right_element - 1] == right_element:\n\t\treturn right_element\n\tif A[left_element - 1] == right_element:\n\t\treturn right_element + 1\n\tif A[right_element - 1] == left_element:\n\t\treturn left_element + 1\n\tif A[left_element - 1] > left_element:\n\t\treturn left_element\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif left_element == 1:\n\t\treturn 1\n\tif right_element == len(A):\n\t\treturn len(A) + 1\n\tif A[left_element - 1] == left_element:\n\t\treturn left_element\n\tif A[right_element - 1] == right_element:\n\t\treturn right_element\n\tif A[left_element - 1] == right_element:\n\t\treturn right_element + 1\n\tif A[right_element - 1] == left_element:\n\t\treturn left_element + 1\n\tif A[left_element - 1] > left_element:\n\t\treturn left_element\n\tif A[right_element - 1] < right_element:\n\t\treturn right_element + 1\n\treturn A[left_element - 1] + 1\n\n\ndef smallest_missing_2(A, left_element, right_element):\n\t\"\"\"\n\t:type A: List[int]\n\t:type left_element: int\n\t:type right_element: int\n\t:rtype: int\n\t\"\"\"\n\tif left_element == right_element:\n\t\treturn left_element\n\tif left_element == 1:\n\t\treturn 1\n\tif right_element == len(A):\n\t\treturn len(A) + 1\n\tif A[left_element - 1] == left_element:\n\t\treturn left_element\n\tif A[right_element - 1] == right_element:\n\t\treturn right_element\n\tif A[left_element - 1] == right_element:\n\t\treturn right_element + 1\n\tif A[right_element - 1] == left_element:\n\t\treturn left_element + 1"}
{"ID": 736, "source": "MBPP:373", "prompt": "\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\nprint(volume_cuboid(2,3,4))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\nimport math\n\ndef volume_sphere(r):\n\treturn (4/3)*math.pi*r**3\n\nprint(volume_sphere(2))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn math.pi*r**2*h\n\nprint(volume_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*math.pi*r**2*h\n\nprint(volume_cone(2,3))\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b,h):\n\treturn (1/3)*b*h\n\nprint(volume_pyramid(2,3))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l,w,h):\n\treturn l*w*h\n\nprint(volume_rectangular_prism(2,3,4))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b,h):\n\treturn (1/2)*b*h\n\nprint(volume_triangular_prism(2,3))\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r,h):\n\treturn (1/3)*math.pi*r**2*h\n\nprint(volume_circular_cone(2,3))\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cylinder(r,h):\n\treturn math.pi*r**2*h\n\nprint(volume_circular_cylinder(2", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\nimport math\n\ndef volume_sphere(r):\n\treturn (4/3)*math.pi*r**3\n\nprint(volume_sphere(2))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn math.pi*r**2*h\n\nprint(volume_cylinder(2,3))\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn (1/3)*math.pi*r**2*h\n\nprint(volume_cone(2,3))\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b,h):\n\treturn (1/3)*b*h\n\nprint(volume_pyramid(2,3))\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangular_prism(l,w,h):\n\treturn l*w*h\n\nprint(volume_rectangular_prism(2,3,4))\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef volume_triangular_prism(b,h):\n\treturn (1/2)*b*h\n\nprint(volume_triangular_prism(2,3))\n\n\"\"\"\nWrite a function to find the volume of a circular cone.\n\"\"\"\ndef volume_circular_cone(r,h):\n\treturn (1/3)*math.pi*r**2*h\n\nprint(volume_circular_cone(2,3))\n\n\"\"\"\nWrite a function to find the volume of a circular cylinder.\n\"\"\"\ndef volume_circular_cylinder(r,h):\n\treturn math.pi*r**2*h\n\nprint(volume_circular_cylinder(2"}
{"ID": 738, "source": "MBPP:375", "prompt": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\t", "predict": "<s> \"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\n\"\"\"\ndef round_num(n,m):\n\treturn m * round(n/m)\n\nprint(round_num(10,5))\nprint(round_num(10,3))\nprint(round_num(10,2))\nprint(round_num(10,1))\nprint(round_num(10,0.5))\nprint(round_num(10,0.3))\nprint(round_num(10,0.2))\nprint(round_num(10,0.1))\nprint(round_num(10,0.05))\nprint(round_num(10,0.03))\nprint(round_num(10,0.02))\nprint(round_num(10,0.01))\nprint(round_num(10,0.005))\nprint(round_num(10,0.003))\nprint(round_num(10,0.002))\nprint(round_num(10,0.001))\nprint(round_num(10,0.0005))\nprint(round_num(10,0.0003))\nprint(round_num(10,0.0002))\nprint(round_num(10,0.0001))\nprint(round_num(10,0.00005))\nprint(round_num(10,0.00003))\nprint(round_num(10,0.00002))\nprint(round_num(10,0.00001))\nprint(round_num(10,0.000005))\nprint(round_num(10,0.000003))\nprint(round_num(10,0.000002))\nprint(round_num(10,0.000001))\nprint(round_num(10,0.0000005))\nprint(round_num(10,0.0000003))\nprint(round_num(10,0.000000", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(round_num(10,5))\nprint(round_num(10,3))\nprint(round_num(10,2))\nprint(round_num(10,1))\nprint(round_num(10,0.5))\nprint(round_num(10,0.3))\nprint(round_num(10,0.2))\nprint(round_num(10,0.1))\nprint(round_num(10,0.05))\nprint(round_num(10,0.03))\nprint(round_num(10,0.02))\nprint(round_num(10,0.01))\nprint(round_num(10,0.005))\nprint(round_num(10,0.003))\nprint(round_num(10,0.002))\nprint(round_num(10,0.001))\nprint(round_num(10,0.0005))\nprint(round_num(10,0.0003))\nprint(round_num(10,0.0002))\nprint(round_num(10,0.0001))\nprint(round_num(10,0.00005))\nprint(round_num(10,0.00003))\nprint(round_num(10,0.00002))\nprint(round_num(10,0.00001))\nprint(round_num(10,0.000005))\nprint(round_num(10,0.000003))\nprint(round_num(10,0.000002))\nprint(round_num(10,0.000001))\nprint(round_num(10,0.0000005))\nprint(round_num(10,0.0000003))\nprint(round_num(10,0.000000"}
{"ID": 740, "source": "MBPP:377", "prompt": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  \n\treturn s.replace(c,\"\")\n\nprint(remove_Char(\"hello world\",\"l\"))\n\n\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\n\"\"\"\ndef remove_Char(s,c) :  "}
{"ID": 741, "source": "MBPP:378", "prompt": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a python function to shift last element to first position in the given list.\n\"\"\"\ndef move_first(test_list):\n\tif len(test_list) == 0:\n\t\treturn test_list\n\telse:\n\t\treturn [test_list[-1]] + test_list[:-1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 742, "source": "MBPP:379", "prompt": "\"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cuboid.\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n\treturn 2*l*w + 2*w*h + 2*h*l\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*r + 2*3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r1,r2):\n\treturn 3.14*r1*r2*(1 + 0.5*r1/r2)\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r1,r2):\n\treturn 3.14*r1*r2*r2/3\n\n\"\"\"\nWrite a function to find the surface area of a dodecahedron.\n\"\"\"\ndef surfacearea_dodecahedron(r", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*l*w + 2*w*h + 2*h*l\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume_cuboid(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*r + 2*3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r1,r2):\n\treturn 3.14*r1*r2*(1 + 0.5*r1/r2)\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r1,r2):\n\treturn 3.14*r1*r2*r2/3\n\n\"\"\"\nWrite a function to find the surface area of a dodecahedron.\n\"\"\"\ndef surfacearea_dodecahedron(r"}
{"ID": 743, "source": "MBPP:380", "prompt": "\"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\t", "predict": "<s> \"\"\"\nWrite a function to generate a two-dimensional array.\n\"\"\"\ndef multi_list(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\ndef multi_list_2(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_3(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_4(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_5(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_6(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_7(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_8(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_9(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_10(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_11(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_12(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_13(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_14(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_15(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_16(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_17(rownum,colnum):\n\treturn [[0", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\ndef multi_list_2(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_3(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_4(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_5(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_6(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_7(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_8(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_9(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_10(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_11(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_12(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_13(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_14(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_15(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_16(rownum,colnum):\n\treturn [[0]*colnum for i in range(rownum)]\n\ndef multi_list_17(rownum,colnum):"}
{"ID": 758, "source": "MBPP:395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"\ndef first_non_repeating_character(str1):\n\tstr1 = str1.lower()\n\tcount = 0\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\treturn \"No non-repeating character found\"\n\nprint(first_non_repeating_character(\"hello\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_re", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(first_non_repeating_character(\"hello\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_repeating_character(\"hello world\"))\nprint(first_non_re"}
{"ID": 760, "source": "MBPP:397", "prompt": "\"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the median of three specific numbers.\n\"\"\"\ndef median_numbers(a,b,c):\n\t\"\"\"\n\t:param a: first number\n\t:param b: second number\n\t:param c: third number\n\t:return: the median of the three numbers\n\t\"\"\"\n\tif a < b and a < c:\n\t\tif b < c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\telif b < a and b < c:\n\t\tif a < c:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn c\n\telse:\n\t\tif a < b:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 761, "source": "MBPP:398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\ndef sum_of_digits(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tsum = 0\n\tfor num in nums:\n\t\tsum += sum_of_digits_helper(num)\n\treturn sum\n\ndef sum_of_digits_helper(num):\n\tsum = 0\n\twhile num > 0:\n\t\tsum += num % 10\n\t\tnum = num // 10\n\treturn sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 766, "source": "MBPP:403", "prompt": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if a url is valid or not using regex.\n\"\"\"\ndef is_valid_URL(str):\n\timport re\n\tregex = r\"^(?:http|ftp)s?://\"\n\tp = re.compile(regex)\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 768, "source": "MBPP:405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\t", "predict": "<s> \"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \n\tif tuple1 in tuplex:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 770, "source": "MBPP:407", "prompt": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n\"\"\"\ndef rearrange_bigger(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_2(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_3(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_4(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_5(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_6(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_7(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_8(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_9(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_10(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_11(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_12(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_13(n):\n\tn = list(str(n))\n\tn.sort(reverse=", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_2(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_3(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_4(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_5(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_6(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_7(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_8(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_9(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_10(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_11(n):\n\tn = list(str(n))\n\tn.sort(reverse=True)\n\treturn int(''.join(n))\n\ndef rearrange_bigger_12(n):\n\tn = list(str(n))\n\tn.sort()\n\treturn int(''.join(n))\n\ndef rearrange_bigger_13(n):"}
{"ID": 771, "source": "MBPP:408", "prompt": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k <= 0:\n\t\treturn []\n\tresult = []\n\tmin_heap = []\n\tfor i in range(min(k, len(nums1))):\n\t\theappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n\tfor i in range(k):\n\t\tresult.append([heappop(min_heap)[1], heappop(min_heap)[2]])\n\treturn result\n\ndef k_smallest_pairs_2(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k <= 0:\n\t\treturn []\n\tresult = []\n\tmin_heap = []\n\tfor i in range(min(k, len(nums1))):\n\t\theappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n\tfor i in range(k):\n\t\tresult.append([heappop(min_heap)[1], heappop(min_heap)[2]])\n\treturn result\n\ndef k_smallest_pairs_3(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k <= 0:\n\t\treturn []\n\tresult = []\n\tmin_heap = []\n\tfor i in range(min(k,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k <= 0:\n\t\treturn []\n\tresult = []\n\tmin_heap = []\n\tfor i in range(min(k, len(nums1))):\n\t\theappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n\tfor i in range(k):\n\t\tresult.append([heappop(min_heap)[1], heappop(min_heap)[2]])\n\treturn result\n\ndef k_smallest_pairs_2(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k <= 0:\n\t\treturn []\n\tresult = []\n\tmin_heap = []\n\tfor i in range(min(k, len(nums1))):\n\t\theappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n\tfor i in range(k):\n\t\tresult.append([heappop(min_heap)[1], heappop(min_heap)[2]])\n\treturn result\n\ndef k_smallest_pairs_3(nums1, nums2, k):\n\t\"\"\"\n\t:type nums1: List[int]\n\t:type nums2: List[int]\n\t:type k: int\n\t:rtype: List[List[int]]\n\t\"\"\"\n\tif not nums1 or not nums2 or k <= 0:\n\t\treturn []"}
{"ID": 772, "source": "MBPP:409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"\ndef min_product_tuple(list1):\n\tmin_product = 1\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tif list1[i][1] * list1[j][0] < min_product:\n\t\t\t\tmin_product = list1[i][1] * list1[j][0]\n\treturn min_product\n\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16),", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]\nprint(min_product_tuple(list1))\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16),"}
{"ID": 774, "source": "MBPP:411", "prompt": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\n\"\"\"\ndef snake_to_camel(word):\n\treturn ''.join([word[0].lower()] + [char.upper() for char in word[1:]])\n\ndef snake_to_camel_regex(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_2(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_3(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_4(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_5(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_6(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_7(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_8(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_9(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_10(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_11(word):\n\treturn re.sub(r'", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef snake_to_camel_regex(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_2(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_3(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_4(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_5(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_6(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_7(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_8(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_9(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_10(word):\n\treturn re.sub(r'(_[a-z])', lambda x: x.group(1).upper(), word)\n\ndef snake_to_camel_regex_11(word):\n\treturn re.sub(r'"}
{"ID": 777, "source": "MBPP:414", "prompt": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\n\"\"\"\ndef overlapping(list1,list2):  \n\tfor i in list1:  \n\t\tif i in list2:  \n\t\t\treturn True  \n\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 778, "source": "MBPP:415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"\ndef max_Product(arr): \n\tn = len(arr) \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn arr[0]\n\tif n == 2: \n\t\treturn arr[0] * arr[1]\n\tmax1 = arr[0] \n\tmax2 = arr[1] \n\tmax3 = arr[0] * arr[1] \n\tfor i in range(2, n): \n\t\tcurr_max = max(max1 * arr[i], max2 * arr[i], arr[i]) \n\t\tcurr_min = min(max1 * arr[i], max2 * arr[i], arr[i]) \n\t\tmax1 = max(curr_max, curr_min) \n\t\tmax2 = max(max1, curr_min) \n\t\tmax3 = max(max3, max1 * max2) \n\treturn max3\n\narr = [1, 2, 3, 4, 5] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4,", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn max3\n\narr = [1, 2, 3, 4, 5] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(max_Product(arr)) \n\narr = [1, 2, 3, 4,"}
{"ID": 779, "source": "MBPP:416", "prompt": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\"\"\"\ndef breakSum(n): \n\tif n <= 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 5\n\tif n == 5: \n\t\treturn 7\n\tif n == 6: \n\t\treturn 9\n\tif n == 7: \n\t\treturn 11\n\tif n == 8: \n\t\treturn 13\n\tif n == 9: \n\t\treturn 15\n\tif n == 10: \n\t\treturn 17\n\tif n == 11: \n\t\treturn 19\n\tif n == 12: \n\t\treturn 21\n\tif n == 13: \n\t\treturn 23\n\tif n == 14: \n\t\treturn 25\n\tif n == 15: \n\t\treturn 27\n\tif n == 16: \n\t\treturn 29\n\tif n == 17: \n\t\treturn 31\n\tif n == 18: \n\t\treturn 33\n\tif n == 19: \n\t\treturn 35\n\tif n == 20: \n\t\treturn 37\n\tif n == 21: \n\t\treturn 39\n\tif n == 22: \n\t\treturn 41\n\tif n == 23: \n\t\treturn 43\n\tif n == 24: \n\t\treturn 45\n\tif n == 25: \n\t\treturn 47\n\tif n == 26: \n\t\treturn 49\n\tif n == 27: \n\t\treturn 51\n\tif n == 28: \n\t\treturn 53\n\tif n == 29: \n\t\treturn 55\n\tif n == 30: \n\t\treturn 57\n\tif n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n <= 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 5\n\tif n == 5: \n\t\treturn 7\n\tif n == 6: \n\t\treturn 9\n\tif n == 7: \n\t\treturn 11\n\tif n == 8: \n\t\treturn 13\n\tif n == 9: \n\t\treturn 15\n\tif n == 10: \n\t\treturn 17\n\tif n == 11: \n\t\treturn 19\n\tif n == 12: \n\t\treturn 21\n\tif n == 13: \n\t\treturn 23\n\tif n == 14: \n\t\treturn 25\n\tif n == 15: \n\t\treturn 27\n\tif n == 16: \n\t\treturn 29\n\tif n == 17: \n\t\treturn 31\n\tif n == 18: \n\t\treturn 33\n\tif n == 19: \n\t\treturn 35\n\tif n == 20: \n\t\treturn 37\n\tif n == 21: \n\t\treturn 39\n\tif n == 22: \n\t\treturn 41\n\tif n == 23: \n\t\treturn 43\n\tif n == 24: \n\t\treturn 45\n\tif n == 25: \n\t\treturn 47\n\tif n == 26: \n\t\treturn 49\n\tif n == 27: \n\t\treturn 51\n\tif n == 28: \n\t\treturn 53\n\tif n == 29: \n\t\treturn 55\n\tif n == 30: \n\t\treturn 57"}
{"ID": 781, "source": "MBPP:418", "prompt": "\"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sublist having maximum length.\n\"\"\"\ndef Find_Max(lst): \n\tif len(lst) == 0: \n\t\treturn 0\n\telse: \n\t\treturn 1 + Find_Max(lst[1:]) \n\ndef find_max_length(lst):\n\tif len(lst) == 0:\n\t\treturn 0\n\telse:\n\t\treturn max(Find_Max(lst[1:]), find_max_length(lst[1:]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 785, "source": "MBPP:422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"\ndef find_Average_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum/(n)\n\nprint(find_Average_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(find_Average_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_Cube(n):  \n\tsum = 0\n\tfor i in range(1, n+1):  \n\t\tsum += i**3\n\treturn sum\n\nprint(find_Sum_Of_Cube(5))\n\n\"\"\"\nWrite a python function to find the sum of cubes of first n natural numbers.\n\"\"\"\ndef find_Sum_Of_"}
{"ID": 786, "source": "MBPP:423", "prompt": "\"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t", "predict": "<s> \"\"\"\nWrite a function to solve gold mine problem.\n\"\"\"\ndef get_maxgold(gold, m, n): \n\t# Initialize the maximum gold to be collected \n\tmax_gold = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i = 0\n\tmax_gold_at_any_point_j = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o_p = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o_p_q = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o_p", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tmax_gold_at_any_point_i = 0\n\tmax_gold_at_any_point_j = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o_p = 0\n\t# Initialize the maximum gold collected \n\t# at any point in the matrix \n\tmax_gold_at_any_point_i_j_k_l_m_n_o_p_q = 0\n\t# Initialize the maximum gold collected "}
{"ID": 792, "source": "MBPP:429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n\t\"\"\"\n\t:param test_tup1: tuple, first tuple\n\t:param test_tup2: tuple, second tuple\n\t:return: tuple, elementwise and tuples\n\t\"\"\"\n\treturn tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n\ndef test_function(test_case):\n\toutput = and_tuples(test_case[0], test_case[1])\n\tprint(output)\n\tif output == test_case[2]:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\n\ntest_function(((1, 2, 3), (4, 5, 6), (1, 1, 1)))\ntest_function(((1, 2, 3), (4, 5, 6), (0, 0, 0)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 5, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 2, 3)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 5, 3)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 5, 3)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 2, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 5, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 2, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 5, 2)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 2, 5)))\ntest_function(((1, 2, 3), (4,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "test_function(((1, 2, 3), (4, 5, 6), (1, 1, 1)))\ntest_function(((1, 2, 3), (4, 5, 6), (0, 0, 0)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 5, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 2, 3)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 5, 3)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 5, 3)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 2, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 5, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 2, 6)))\ntest_function(((1, 2, 3), (4, 5, 6), (4, 5, 2)))\ntest_function(((1, 2, 3), (4, 5, 6), (1, 2, 5)))\ntest_function(((1, 2, 3), (4,"}
{"ID": 794, "source": "MBPP:431", "prompt": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\t", "predict": "<s> \"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n\treturn any(x in list2 for x in list1)\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are common to both lists (without creating a new list).\n\"\"\"\ndef common_elements(list1, list2):\n\treturn list(filter(lambda x: x in list2, list1))\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_2(list1, list2):\n\treturn list(set(list1).intersection(list2))\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_3(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_4(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_5(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_6(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_7(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "Write a function that takes two lists and returns a list that contains only the elements that are common to both lists (without creating a new list).\n\"\"\"\ndef common_elements(list1, list2):\n\treturn list(filter(lambda x: x in list2, list1))\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_2(list1, list2):\n\treturn list(set(list1).intersection(list2))\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_3(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_4(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_5(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_6(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\"\ndef common_elements_7(list1, list2):\n\treturn [x for x in list1 if x in list2]\n\n\"\"\"\nWrite a function that takes two lists and returns a list that contains only the elements that are in both lists (without creating a new list).\n\"\"\""}
{"ID": 795, "source": "MBPP:432", "prompt": "\"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the median of a trapezium.\n\"\"\"\ndef median_trapezium(base1,base2,height):\n\treturn (base1+base2)/2\n\nprint(median_trapezium(1,2,3))\n\n\"\"\"\nWrite a function to find the median of a triangle.\n\"\"\"\ndef median_triangle(base,height):\n\treturn base/2\n\nprint(median_triangle(1,2))\n\n\"\"\"\nWrite a function to find the median of a rectangle.\n\"\"\"\ndef median_rectangle(length,width):\n\treturn (length+width)/2\n\nprint(median_rectangle(1,2))\n\n\"\"\"\nWrite a function to find the median of a square.\n\"\"\"\ndef median_square(side):\n\treturn side/2\n\nprint(median_square(1))\n\n\"\"\"\nWrite a function to find the median of a circle.\n\"\"\"\ndef median_circle(radius):\n\treturn radius/2\n\nprint(median_circle(1))\n\n\"\"\"\nWrite a function to find the median of a cylinder.\n\"\"\"\ndef median_cylinder(radius,height):\n\treturn (radius+height)/2\n\nprint(median_cylinder(1,2))\n\n\"\"\"\nWrite a function to find the median of a cone.\n\"\"\"\ndef median_cone(radius,height):\n\treturn (radius+height)/2\n\nprint(median_cone(1,2))\n\n\"\"\"\nWrite a function to find the median of a sphere.\n\"\"\"\ndef median_sphere(radius):\n\treturn radius/2\n\nprint(median_sphere(1))\n\n\"\"\"\nWrite a function to find the median of a cube.\n\"\"\"\ndef median_cube(side):\n\treturn side/2\n\nprint(median_cube(1))\n\n\"\"\"\nWrite a function to find the median of a pyramid.\n\"\"\"\ndef median_pyramid(base,height):\n\treturn (base+height)/2\n\nprint(median_pyramid(1,2))\n\n\"\"\"\nWrite a function to find the median of a prism.\n\"\"\"\ndef median_prism(base,height):\n\treturn (base+height)/", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (base1+base2)/2\n\nprint(median_trapezium(1,2,3))\n\n\"\"\"\nWrite a function to find the median of a triangle.\n\"\"\"\ndef median_triangle(base,height):\n\treturn base/2\n\nprint(median_triangle(1,2))\n\n\"\"\"\nWrite a function to find the median of a rectangle.\n\"\"\"\ndef median_rectangle(length,width):\n\treturn (length+width)/2\n\nprint(median_rectangle(1,2))\n\n\"\"\"\nWrite a function to find the median of a square.\n\"\"\"\ndef median_square(side):\n\treturn side/2\n\nprint(median_square(1))\n\n\"\"\"\nWrite a function to find the median of a circle.\n\"\"\"\ndef median_circle(radius):\n\treturn radius/2\n\nprint(median_circle(1))\n\n\"\"\"\nWrite a function to find the median of a cylinder.\n\"\"\"\ndef median_cylinder(radius,height):\n\treturn (radius+height)/2\n\nprint(median_cylinder(1,2))\n\n\"\"\"\nWrite a function to find the median of a cone.\n\"\"\"\ndef median_cone(radius,height):\n\treturn (radius+height)/2\n\nprint(median_cone(1,2))\n\n\"\"\"\nWrite a function to find the median of a sphere.\n\"\"\"\ndef median_sphere(radius):\n\treturn radius/2\n\nprint(median_sphere(1))\n\n\"\"\"\nWrite a function to find the median of a cube.\n\"\"\"\ndef median_cube(side):\n\treturn side/2\n\nprint(median_cube(1))\n\n\"\"\"\nWrite a function to find the median of a pyramid.\n\"\"\"\ndef median_pyramid(base,height):\n\treturn (base+height)/2\n\nprint(median_pyramid(1,2))\n\n\"\"\"\nWrite a function to find the median of a prism.\n\"\"\"\ndef median_prism(base,height):"}
{"ID": 797, "source": "MBPP:434", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_one(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_two(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_three(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_four(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_five(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_six(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_seven(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_eight(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_nine(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_ten(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_two(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_three(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_four(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_five(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_six(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_seven(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_eight(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_nine(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\n\"\"\"\ndef text_match_ten(text):\n\treturn re.match(r'a+b+', text)\n\n\"\"\"\nWrite a function that"}
{"ID": 799, "source": "MBPP:436", "prompt": "\"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to print negative numbers in a list.\n\"\"\"\ndef neg_nos(list1):\n\tfor i in list1:\n\t\tif i<0:\n\t\t\tprint(i)\n\nlist1 = [1,2,3,-4,-5,6,7,-8]\nneg_nos(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\tif i<0:\n\t\t\tprint(i)\n\nlist1 = [1,2,3,-4,-5,6,7,-8]\nneg_nos(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n\nlist1 = [1,2,3,4,5]\nfirst_last(list1)\n\n\"\"\"\nWrite a python function to print the first and last element of a list.\n\"\"\"\ndef first_last(list1):\n\tprint(list1[0])\n\tprint(list1[-1])\n"}
{"ID": 804, "source": "MBPP:441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(l):\n\treturn 6 * l ** 2\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l ** 3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(l):\n\treturn l ** 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d):\n\treturn d ** 2\n\n\"\"\"", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 6 * l ** 2\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(l):\n\treturn l ** 3\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r, h):\n\treturn 3.14 * r ** 2 * h\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r ** 3\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(l):\n\treturn l ** 2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b, h):\n\treturn b * h / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d):"}
{"ID": 810, "source": "MBPP:447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\ndef cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(cube_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a list using lambda function.\n\"\"\"\ndef sum_list(nums):\n\treturn sum(nums)\n\nprint(sum_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find the sum of all the elements in a"}
{"ID": 811, "source": "MBPP:448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"\ndef cal_sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i \n\treturn sum \n\n# Driver program to test above function \nn = 10\nprint(\"Sum of first\", n, \"perrin numbers is\", cal_sum(n)) \n\n\n\"\"\""}
{"ID": 813, "source": "MBPP:450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\n\"\"\"\ndef extract_string(str, l):\n\treturn [x for x in str if len(x) == l]\n\nprint(extract_string([\"hello\", \"world\", \"python\", \"java\", \"c++\"], 5))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\td = {}\n\tfor i in str:\n\t\tif i not in d:\n\t\t\td[i] = 1\n\t\telse:\n\t\t\td[i] += 1\n\tfor i in str:\n\t\tif d[i] == 1:\n\t\t\treturn i\n\treturn None\n\nprint(first_non_repeating_char(\"hello\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\td = {}\n\tfor i in str:\n\t\tif i not in d:\n\t\t\td[i] = 1\n\t\telse:\n\t\t\td[i] += 1\n\tfor i in str:\n\t\tif d[i] == 1:\n\t\t\treturn i\n\treturn None\n\nprint(first_non_repeating_char(\"hello\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\td = {}\n\tfor i in str:\n\t\tif i not in d:\n\t\t\td[i] = 1\n\t\telse:\n\t\t\td[i] += 1\n\tfor i in str:\n\t\tif d[i] == 1:\n\t\t\treturn i\n\treturn None\n\nprint(first_non_repeating_char(\"hello\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\td = {}\n\tfor i in str:\n\t\tif i not in d:\n\t\t\td[i] = ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(extract_string([\"hello\", \"world\", \"python\", \"java\", \"c++\"], 5))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\td = {}\n\tfor i in str:\n\t\tif i not in d:\n\t\t\td[i] = 1\n\t\telse:\n\t\t\td[i] += 1\n\tfor i in str:\n\t\tif d[i] == 1:\n\t\t\treturn i\n\treturn None\n\nprint(first_non_repeating_char(\"hello\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\"\ndef first_non_repeating_char(str):\n\td = {}\n\tfor i in str:\n\t\tif i not in d:\n\t\t\td[i] = 1\n\t\telse:\n\t\t\td[i] += 1\n\tfor i in str:\n\t\tif d[i] == 1:\n\t\t\treturn i\n\treturn None\n\nprint(first_non_repeating_char(\"hello\"))\n\n\"\"\"\nWrite a function to find the first non-repeating character in a given string.\n\"\"\""}
{"ID": 814, "source": "MBPP:451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\n\"\"\"\ndef remove_whitespaces(text1):\n\treturn re.sub(r'\\s+', '', text1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 816, "source": "MBPP:453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"\ndef sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i == 0) : \n\t\t\tsum += i \n\treturn sum \n\n# Driver Code \nn = 12\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 13\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 14\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 15\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 16\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 17\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 18\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 19\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 20\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 21\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 22\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 23\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 24\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 25\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 26\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 27\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 28\nprint(\"Sum of", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver Code \nn = 12\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 13\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 14\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 15\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 16\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 17\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 18\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 19\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 20\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 21\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 22\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 23\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 24\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 25\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 26\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) \n\nn = 27\nprint(\"Sum of factors of\", n, \"is\", sumofFactors(n)) "}
{"ID": 817, "source": "MBPP:454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\t", "predict": "<s> \"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"\ndef text_match_wordz(text):\n\treturn 'z' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a'.\n\"\"\"\ndef text_match_wordza(text):\n\treturn 'z' in text and 'a' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e'.\n\"\"\"\ndef text_match_wordzea(text):\n\treturn 'z' in text and 'a' in text and 'e' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i'.\n\"\"\"\ndef text_match_wordzeai(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o'.\n\"\"\"\ndef text_match_wordzeaio(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text and 'o' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o' and 'u'.\n\"\"\"\ndef text_match_wordzeaio(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text and 'o' in text and 'u' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o' and 'u' and 'y'.\n\"\"\"\ndef text_match_wordzeaioy(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text and 'o' in text and 'u' in text and 'y' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o' and 'u' and 'y' and 'q'.\n\"\"\"\ndef text_match_wordzeaioyq", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 'z' in text and 'a' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e'.\n\"\"\"\ndef text_match_wordzea(text):\n\treturn 'z' in text and 'a' in text and 'e' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i'.\n\"\"\"\ndef text_match_wordzeai(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o'.\n\"\"\"\ndef text_match_wordzeaio(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text and 'o' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o' and 'u'.\n\"\"\"\ndef text_match_wordzeaio(text):\n\treturn 'z' in text and 'a' in text and 'e' in text and 'i' in text and 'o' in text and 'u' in text\n\n\"\"\"\nWrite a function that matches a word containing 'z' and 'a' and 'e' and 'i' and 'o' and 'u' and 'y'.\n\"\"\"\ndef text_match_wordzeaioy(text):"}
{"ID": 818, "source": "MBPP:455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"\ndef check_monthnumb_number(monthnum2):\n\tif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 821, "source": "MBPP:458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s*s\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s*s\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s*s\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s*s\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s*s\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):\n\treturn 3.14*r*r\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef square_area(s):\n\treturn s*s\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef rectangle_area(l,b):\n\treturn l*b\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef triangle_area(b,h):\n\treturn (b*h)/2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef circle_area(r):"}
{"ID": 824, "source": "MBPP:461", "prompt": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\t", "predict": "<s> \"\"\"\nWrite a python function to count the upper case characters in a given string.\n\"\"\"\ndef upper_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of upper case characters in the string is: \", upper_ctr(str))\n\n\"\"\"\nWrite a python function to count the vowels in a given string.\n\"\"\"\ndef vowel_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"aeiouAEIOU\":\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of vowels in the string is: \", vowel_ctr(str))\n\n\"\"\"\nWrite a python function to count the consonants in a given string.\n\"\"\"\ndef consonant_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\":\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of consonants in the string is: \", consonant_ctr(str))\n\n\"\"\"\nWrite a python function to count the number of words in a given string.\n\"\"\"\ndef word_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\nstr = input(\"Enter a string: \")\nprint(\"The number of words in the string is: \", word_ctr(str))\n\n\"\"\"\nWrite a python function to count the number of digits in a given string.\n\"\"\"\ndef digit_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of digits in the string is: \", digit_ctr(str))\n\n\"\"\"\nWrite a python function to count the number of alphabets in a given string.\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tcount = 0\n\tfor i in str:\n\t\tif i in \"aeiouAEIOU\":\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of vowels in the string is: \", vowel_ctr(str))\n\n\"\"\"\nWrite a python function to count the consonants in a given string.\n\"\"\"\ndef consonant_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\":\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of consonants in the string is: \", consonant_ctr(str))\n\n\"\"\"\nWrite a python function to count the number of words in a given string.\n\"\"\"\ndef word_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i == \" \":\n\t\t\tcount += 1\n\treturn count + 1\n\nstr = input(\"Enter a string: \")\nprint(\"The number of words in the string is: \", word_ctr(str))\n\n\"\"\"\nWrite a python function to count the number of digits in a given string.\n\"\"\"\ndef digit_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\nstr = input(\"Enter a string: \")\nprint(\"The number of digits in the string is: \", digit_ctr(str))\n"}
{"ID": 826, "source": "MBPP:463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"\ndef max_subarray_product(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(arr) == 0:\n\t\treturn 0\n\tmax_product = arr[0]\n\tmin_product = arr[0]\n\tmax_so_far = arr[0]\n\tmin_so_far = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tnum = arr[i]\n\t\tmax_product = max(num, max_product * num, min_product * num)\n\t\tmin_product = min(num, max_product * num, min_product * num)\n\t\tmax_so_far = max(max_so_far * num, num)\n\t\tmin_so_far = min(min_so_far * num, num)\n\treturn max(max_so_far, max_product)\n\n\nif __name__ == '__main__':\n\tprint(max_subarray_product([-2, 3, -4]))\n\tprint(max_subarray_product([-2, 3, -4, 5]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2, -5]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2, -5, 7]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2, -5, 7, -2]))\n\t", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(max_subarray_product([-2, 3, -4]))\n\tprint(max_subarray_product([-2, 3, -4, 5]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2, -5]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2, -5, 7]))\n\tprint(max_subarray_product([-2, 3, -4, 5, -1, 6, -2, 2, -5, 7, -2]))\n\t"}
{"ID": 827, "source": "MBPP:464", "prompt": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if all values are same in a dictionary.\n\"\"\"\ndef check_value(dict, n):\n\tfor i in dict:\n\t\tif dict[i] != n:\n\t\t\treturn False\n\treturn True\n\ndef check_value_2(dict):\n\treturn len(set(dict.values())) == 1\n\ndef check_value_3(dict):\n\treturn len(dict) == 0 or all(dict.values()[0] == x for x in dict.values())\n\ndef check_value_4(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[1]\n\ndef check_value_5(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_6(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_7(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_8(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_9(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_10(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_11(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_12(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_13(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_14(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_15", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn True\n\ndef check_value_2(dict):\n\treturn len(set(dict.values())) == 1\n\ndef check_value_3(dict):\n\treturn len(dict) == 0 or all(dict.values()[0] == x for x in dict.values())\n\ndef check_value_4(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[1]\n\ndef check_value_5(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_6(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_7(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_8(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_9(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_10(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_11(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_12(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_13(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_14(dict):\n\treturn len(dict) == 0 or dict.values()[0] == dict.values()[0]\n\ndef check_value_15"}
{"ID": 828, "source": "MBPP:465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\t", "predict": "<s> \"\"\"\nWrite a function to drop empty items from a given dictionary.\n\"\"\"\ndef drop_empty(dict1):\n\treturn {k: v for k, v in dict1.items() if v}\n\n\ndef drop_empty_2(dict1):\n\treturn {k: v for k, v in dict1.items() if v != ''}\n\n\ndef drop_empty_3(dict1):\n\treturn {k: v for k, v in dict1.items() if v is not None}\n\n\ndef drop_empty_4(dict1):\n\treturn {k: v for k, v in dict1.items() if v != []}\n\n\ndef drop_empty_5(dict1):\n\treturn {k: v for k, v in dict1.items() if v != {}}\n\n\ndef drop_empty_6(dict1):\n\treturn {k: v for k, v in dict1.items() if v != set()}\n\n\ndef drop_empty_7(dict1):\n\treturn {k: v for k, v in dict1.items() if v != 0}\n\n\ndef drop_empty_8(dict1):\n\treturn {k: v for k, v in dict1.items() if v != False}\n\n\ndef drop_empty_9(dict1):\n\treturn {k: v for k, v in dict1.items() if v != []}\n\n\ndef drop_empty_10(dict1):\n\treturn {k: v for k, v in dict1.items() if v != {}}\n\n\ndef drop_empty_11(dict1):\n\treturn {k: v for k, v in dict1.items() if v != set()}\n\n\ndef drop_empty_12(dict1):\n\treturn {k: v for k, v in dict1.items() if v != 0}\n\n\ndef drop_empty_13(dict1):\n\treturn {k: v for k, v in dict1.items() if v != False}\n\n\ndef drop_empty_14(dict1):\n\treturn {k: v for k, v in dict1.items() if v != []}\n\n\ndef drop_empty_15(dict1):\n\treturn {k: v for k, v in dict1.items()", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn {k: v for k, v in dict1.items() if v}\n\n\ndef drop_empty_2(dict1):\n\treturn {k: v for k, v in dict1.items() if v != ''}\n\n\ndef drop_empty_3(dict1):\n\treturn {k: v for k, v in dict1.items() if v is not None}\n\n\ndef drop_empty_4(dict1):\n\treturn {k: v for k, v in dict1.items() if v != []}\n\n\ndef drop_empty_5(dict1):\n\treturn {k: v for k, v in dict1.items() if v != {}}\n\n\ndef drop_empty_6(dict1):\n\treturn {k: v for k, v in dict1.items() if v != set()}\n\n\ndef drop_empty_7(dict1):\n\treturn {k: v for k, v in dict1.items() if v != 0}\n\n\ndef drop_empty_8(dict1):\n\treturn {k: v for k, v in dict1.items() if v != False}\n\n\ndef drop_empty_9(dict1):\n\treturn {k: v for k, v in dict1.items() if v != []}\n\n\ndef drop_empty_10(dict1):\n\treturn {k: v for k, v in dict1.items() if v != {}}\n\n\ndef drop_empty_11(dict1):\n\treturn {k: v for k, v in dict1.items() if v != set()}\n\n\ndef drop_empty_12(dict1):\n\treturn {k: v for k, v in dict1.items() if v != 0}\n\n\ndef drop_empty_13(dict1):\n\treturn {k: v for k, v in dict1.items() if v != False}\n\n\ndef drop_empty_14(dict1):\n\treturn {k: v for k, v in dict1.items() if v != []}\n\n\ndef drop_empty_15(dict1):"}
{"ID": 830, "source": "MBPP:467", "prompt": "\"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\t", "predict": "<s> \"\"\"\nWrite a python function to convert decimal number to octal number.\n\"\"\"\ndef decimal_to_Octal(deciNum):\n\toctalNum = ''\n\twhile deciNum > 0:\n\t\toctalNum = str(deciNum % 8) + octalNum\n\t\tdeciNum = deciNum // 8\n\treturn octalNum\n\n# Test the function\nprint(decimal_to_Octal(10))\nprint(decimal_to_Octal(11))\nprint(decimal_to_Octal(12))\nprint(decimal_to_Octal(13))\nprint(decimal_to_Octal(14))\nprint(decimal_to_Octal(15))\nprint(decimal_to_Octal(16))\nprint(decimal_to_Octal(17))\nprint(decimal_to_Octal(18))\nprint(decimal_to_Octal(19))\nprint(decimal_to_Octal(20))\nprint(decimal_to_Octal(21))\nprint(decimal_to_Octal(22))\nprint(decimal_to_Octal(23))\nprint(decimal_to_Octal(24))\nprint(decimal_to_Octal(25))\nprint(decimal_to_Octal(26))\nprint(decimal_to_Octal(27))\nprint(decimal_to_Octal(28))\nprint(decimal_to_Octal(29))\nprint(decimal_to_Octal(30))\nprint(decimal_to_Octal(31))\nprint(decimal_to_Octal(32))\nprint(decimal_to_Octal(33))\nprint(decimal_to_Octal(34))\nprint(decimal_to_Octal(35))\nprint(decimal_to_Octal(36))\nprint(decimal_to_Octal(37))\nprint(decimal_to_Octal(38))\nprint(decimal_to_Octal(39))\nprint(decimal_to_Octal(40))\nprint(decimal_to_Octal(41))\nprint(dec", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print(decimal_to_Octal(10))\nprint(decimal_to_Octal(11))\nprint(decimal_to_Octal(12))\nprint(decimal_to_Octal(13))\nprint(decimal_to_Octal(14))\nprint(decimal_to_Octal(15))\nprint(decimal_to_Octal(16))\nprint(decimal_to_Octal(17))\nprint(decimal_to_Octal(18))\nprint(decimal_to_Octal(19))\nprint(decimal_to_Octal(20))\nprint(decimal_to_Octal(21))\nprint(decimal_to_Octal(22))\nprint(decimal_to_Octal(23))\nprint(decimal_to_Octal(24))\nprint(decimal_to_Octal(25))\nprint(decimal_to_Octal(26))\nprint(decimal_to_Octal(27))\nprint(decimal_to_Octal(28))\nprint(decimal_to_Octal(29))\nprint(decimal_to_Octal(30))\nprint(decimal_to_Octal(31))\nprint(decimal_to_Octal(32))\nprint(decimal_to_Octal(33))\nprint(decimal_to_Octal(34))\nprint(decimal_to_Octal(35))\nprint(decimal_to_Octal(36))\nprint(decimal_to_Octal(37))\nprint(decimal_to_Octal(38))\nprint(decimal_to_Octal(39))\nprint(decimal_to_Octal(40))\nprint(decimal_to_Octal(41))\nprint(dec"}
{"ID": 832, "source": "MBPP:469", "prompt": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\n\"\"\"\ndef max_profit(price, k):\n\t\"\"\"\n\t:type price: List[int]\n\t:type k: int\n\t:rtype: int\n\t\"\"\"\n\tif k == 0:\n\t\treturn 0\n\tif len(price) == 0:\n\t\treturn 0\n\tif k >= len(price):\n\t\treturn max_profit_naive(price)\n\telse:\n\t\treturn max_profit_k(price, k)\n\ndef max_profit_naive(price):\n\tprofit = 0\n\tfor i in range(len(price) - 1):\n\t\tfor j in range(i + 1, len(price)):\n\t\t\tprofit = max(profit, price[j] - price[i])\n\treturn profit\n\ndef max_profit_k(price, k):\n\tprofit = 0\n\tfor i in range(len(price) - 1):\n\t\tfor j in range(i + 1, len(price)):\n\t\t\tprofit = max(profit, price[j] - price[i])\n\treturn profit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 834, "source": "MBPP:471", "prompt": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\n\"\"\"\ndef find_remainder(arr, lens, n): \n\tresult = 0\n\tfor i in range(lens): \n\t\tresult = (result * 10 + arr[i]) % n \n\treturn result \n\narr = [1, 2, 3, 4, 5] \nlens = len(arr) \nn = 2\nprint(find_remainder(arr, lens, n)) \n\n\n\"\"\"\nWrite a python function to find the maximum number of consecutive 1's in a binary array.\n\"\"\"\ndef find_max_consecutive_ones(arr): \n\tmax_count = 0\n\tcurrent_count = 0\n\tfor i in range(len(arr)): \n\t\tif arr[i] == 1: \n\t\t\tcurrent_count += 1\n\t\telse: \n\t\t\tif current_count > max_count: \n\t\t\t\tmax_count = current_count \n\t\t\tcurrent_count = 0\n\tif current_count > max_count: \n\t\tmax_count = current_count \n\treturn max_count \n\narr = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1] \nprint(find_max_consecutive_ones(arr)) \n\n\n\"\"\"\nWrite a python function to find the maximum number of consecutive 1's in a binary array using deque.\n\"\"\"\nfrom collections import deque\ndef find_max_consecutive_ones_using_deque(arr): \n\tmax_count = 0\n\tcurrent_count = 0\n\td = deque() \n\tfor i in range(len(arr)): \n\t\tif arr[i] == 1: \n\t\t\tcurrent_count += 1\n\t\t\td.append(i) \n\t\telse: \n\t\t\tif current_count > max_count: \n\t\t\t\tmax_count = current_count \n\t\t\tcurrent_count = 0\n\t\t\twhile len(d", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\nWrite a python function to find the maximum number of consecutive 1's in a binary array.\n\"\"\"\ndef find_max_consecutive_ones(arr): \n\tmax_count = 0\n\tcurrent_count = 0\n\tfor i in range(len(arr)): \n\t\tif arr[i] == 1: \n\t\t\tcurrent_count += 1\n\t\telse: \n\t\t\tif current_count > max_count: \n\t\t\t\tmax_count = current_count \n\t\t\tcurrent_count = 0\n\tif current_count > max_count: \n\t\tmax_count = current_count \n\treturn max_count \n\narr = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1] \nprint(find_max_consecutive_ones(arr)) \n\n\n\"\"\"\nWrite a python function to find the maximum number of consecutive 1's in a binary array using deque.\n\"\"\"\nfrom collections import deque\ndef find_max_consecutive_ones_using_deque(arr): \n\tmax_count = 0\n\tcurrent_count = 0\n\td = deque() \n\tfor i in range(len(arr)): \n\t\tif arr[i] == 1: \n\t\t\tcurrent_count += 1\n\t\t\td.append(i) \n\t\telse: \n\t\t\tif current_count > max_count: \n\t\t\t\tmax_count = current_count "}
{"ID": 838, "source": "MBPP:475", "prompt": "\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort counter by value.\n\"\"\"\ndef sort_counter(dict1):\n\treturn {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n\n\n\"\"\"\nWrite a function to sort a list of lists by the sum of the elements in each sublist.\n\"\"\"\ndef sort_list_of_lists(list_of_lists):\n\treturn sorted(list_of_lists, key=sum)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n\n\n\"\"\"\nWrite a function to sort a list of lists by the sum of the elements in each sublist.\n\"\"\"\ndef sort_list_of_lists(list_of_lists):\n\treturn sorted(list_of_lists, key=sum)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):\n\treturn sorted(list_of_lists, key=len)\n\n\n\"\"\"\nWrite a function to sort a list of lists by the length of the sublists.\n\"\"\"\ndef sort_list_of_lists_by_length(list_of_lists):"}
{"ID": 839, "source": "MBPP:476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef big_sum(nums):\n\treturn max(nums) + min(nums)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 843, "source": "MBPP:480", "prompt": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the maximum occurring character in a given string.\n\"\"\"\ndef get_max_occuring_char(str1):\n\tchar_count = {}\n\tfor char in str1:\n\t\tif char in char_count:\n\t\t\tchar_count[char] += 1\n\t\telse:\n\t\t\tchar_count[char] = 1\n\tmax_count = 0\n\tmax_char = ''\n\tfor char, count in char_count.items():\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_char = char\n\treturn max_char\n\nprint(get_max_occuring_char('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "print(get_max_occuring_char('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"}
{"ID": 850, "source": "MBPP:487", "prompt": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\"\"\"\ndef sort_tuple(tup): \n\treturn sorted(tup, key = lambda x: x[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 851, "source": "MBPP:488", "prompt": "\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\ndef area_pentagon(a):\n\treturn (5 * a ** 2) / (4 * math.tan(math.pi / 5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn math.pi * r ** 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(s):\n\treturn s ** 2\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\treturn (6 * a ** 2) / (4 * math.tan(math.pi / 6))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1, d2):\n\treturn d1 * d2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b, h):\n\treturn (b + b) * h / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef area_kite(b, h):\n\treturn (b + b) * h / 2\n\n\"\"\"\nWrite a function to find the area of a irregular polygon.\n\"\"\"\ndef area_irregular_polygon(s):\n\treturn (s * s) / (4 * math.tan(math.pi / s))\n\n\"\"\"\nWrite a function to find the area of a regular polygon.\n\"\"\"\ndef area_regular_polygon(n, r):\n\treturn (n * r ** 2) / (4 * math.tan(math.pi", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn (5 * a ** 2) / (4 * math.tan(math.pi / 5))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn math.pi * r ** 2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(l, w):\n\treturn l * w\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(b, h):\n\treturn (b * h) / 2\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(s):\n\treturn s ** 2\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\ndef area_hexagon(a):\n\treturn (6 * a ** 2) / (4 * math.tan(math.pi / 6))\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\ndef area_rhombus(d1, d2):\n\treturn d1 * d2\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef area_trapezoid(b, h):\n\treturn (b + b) * h / 2\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\ndef area_parallelogram(b, h):\n\treturn b * h\n\n\"\"\"\nWrite a function to find the area of a kite.\n\"\"\"\ndef area_kite(b, h):\n\treturn (b + b) * h / 2\n\n\"\"\"\nWrite a function to find the area of a irregular polygon.\n\"\"\"\ndef area_irregular_polygon(s):\n\treturn (s * s) / (4 * math.tan(math.pi / s))\n\n\"\"\"\nWrite a function to find the area of a regular polygon.\n\"\"\"\ndef area_regular_polygon(n, r):"}
{"ID": 853, "source": "MBPP:490", "prompt": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\n\"\"\"\ndef extract_symmetric(test_list):\n\tsymmetric_pairs = []\n\tfor pair in test_list:\n\t\tif pair[0] == pair[1]:\n\t\t\tsymmetric_pairs.append(pair)\n\treturn symmetric_pairs\n\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "test_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), ("}
{"ID": 859, "source": "MBPP:496", "prompt": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\"\"\"\ndef heap_queue_smallest(nums,n):\n\t\"\"\"\n\t:type nums: List[int]\n\t:type n: int\n\t:rtype: List[int]\n\t\"\"\"\n\timport heapq\n\treturn heapq.nsmallest(n,nums)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 860, "source": "MBPP:497", "prompt": "\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 2*3.14*r*h + 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r**2*h/3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*h + 2*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6*s**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_rectangularprism(l,w,h):\n\treturn 2*l*w + 2*l*h + 2*w*h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the surface area of a triangular prism.\n\"\"\"\ndef surfacearea_triangularprism(b,h):\n\treturn 2*b*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*3.14*r*h + 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r**2*h/3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*h + 2*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r**2*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6*s**2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s**3\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\ndef surfacearea_rectangularprism(l,w,h):\n\treturn 2*l*w + 2*l*h + 2*w*h\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\ndef volume_rectangularprism(l,w,h):\n\treturn l*w*h\n\n\"\"\"\nWrite a function to find the surface area of a triangular prism.\n\"\"\"\ndef surfacearea_triangularprism(b,h):\n\treturn 2*b*h\n\n\"\"\"\nWrite a function to find the volume of a triangular prism.\n\"\"\"\ndef"}
{"ID": 862, "source": "MBPP:499", "prompt": "\"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the diameter of a circle.\n\"\"\"\ndef diameter_circle(r):\n\treturn 2*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn 4/3*3.14*r**3\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):\n\treturn 3.14*r**2\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef area_triangle(base, height):\n\treturn base*height/2\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef area_rectangle(base, height):\n\treturn base*height\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\ndef area_square(side):\n\treturn side**2\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\ndef area_circle(r):"}
{"ID": 863, "source": "MBPP:500", "prompt": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\t", "predict": "<s> \"\"\"\nWrite a function to concatenate all elements of the given list into a string.\n\"\"\"\ndef concatenate_elements(list):\n\treturn ''.join(list)\n\n\"\"\"\nWrite a function that takes a string and returns the string in camel case.\n\"\"\"\ndef camel_case(string):\n\treturn ''.join([word.capitalize() for word in string.split(' ')])\n\n\"\"\"\nWrite a function that takes a string and returns the string with the first letter capitalized.\n\"\"\"\ndef capitalize_first(string):\n\treturn string.capitalize()\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first instance of the character \"a\" replaced with \"4\" and the first instance of the character \"e\" replaced with \"3\".\n\"\"\"\ndef replace_a_with_4_and_e_with_3(string):\n\treturn string.replace('a', '4').replace('e', '3')\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last characters swapped.\n\"\"\"\ndef swap_first_and_last_characters(string):\n\treturn string[1:] + string[0]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 2 characters swapped.\n\"\"\"\ndef swap_first_and_last_2_characters(string):\n\treturn string[1:-1] + string[0] + string[-1]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 3 characters swapped.\n\"\"\"\ndef swap_first_and_last_3_characters(string):\n\treturn string[2:] + string[0:2]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 4 characters swapped.\n\"\"\"\ndef swap_first_and_last_4_characters(string):\n\treturn string[3:] + string[0:3]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 5 characters swapped.\n\"\"\"\ndef swap_first_and_last_5_characters(string):\n\treturn string[4:] + string[0:4]\n\n\"\"\"\nWrite a function", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\"\"\"\ndef replace_a_with_4_and_e_with_3(string):\n\treturn string.replace('a', '4').replace('e', '3')\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last characters swapped.\n\"\"\"\ndef swap_first_and_last_characters(string):\n\treturn string[1:] + string[0]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 2 characters swapped.\n\"\"\"\ndef swap_first_and_last_2_characters(string):\n\treturn string[1:-1] + string[0] + string[-1]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 3 characters swapped.\n\"\"\"\ndef swap_first_and_last_3_characters(string):\n\treturn string[2:] + string[0:2]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 4 characters swapped.\n\"\"\"\ndef swap_first_and_last_4_characters(string):\n\treturn string[3:] + string[0:3]\n\n\"\"\"\nWrite a function that takes a string and returns a new string with the first and last 5 characters swapped.\n\"\"\"\ndef swap_first_and_last_5_characters(string):\n\treturn string[4:] + string[0:4]\n\n\"\"\"\nWrite a function"}
{"ID": 865, "source": "MBPP:502", "prompt": "\"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find remainder of two numbers.\n\"\"\"\ndef find(n,m):\n\treturn n%m\n\nprint(find(10,3))\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(n,m):\n\treturn n+m\n\nprint(sum(10,3))\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef diff(n,m):\n\treturn n-m\n\nprint(diff(10,3))\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef product(n,m):\n\treturn n*m\n\nprint(product(10,3))\n\n\"\"\"\nWrite a python function to find the quotient of two numbers.\n\"\"\"\ndef quotient(n,m):\n\treturn n/m\n\nprint(quotient(10,3))\n\n\"\"\"\nWrite a python function to find the exponent of two numbers.\n\"\"\"\ndef exponent(n,m):\n\treturn n**m\n\nprint(exponent(10,3))\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef sqrt(n):\n\treturn n**0.5\n\nprint(sqrt(10))\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cuberoot(n):\n\treturn n**(1/3)\n\nprint(cuberoot(10))\n\n\"\"\"\nWrite a python function to find the absolute value of a number.\n\"\"\"\ndef abs(n):\n\treturn abs(n)\n\nprint(abs(-10))\n\n\"\"\"\nWrite a python function to find the floor value of a number.\n\"\"\"\ndef floor(n):\n\treturn math.floor(n)\n\nprint(floor(10.5))\n\n\"\"\"\nWrite a python function to find the ceiling value of a number.\n\"\"\"\ndef ceil(n):\n\treturn math.ceil(n)\n\nprint(ceil(10.5))\n\n\"\"\"\nWrite a python function to find the round value of a number.\n\"\"\"\ndef round(n):\n\treturn round(n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn n%m\n\nprint(find(10,3))\n\n\"\"\"\nWrite a python function to find the sum of two numbers.\n\"\"\"\ndef sum(n,m):\n\treturn n+m\n\nprint(sum(10,3))\n\n\"\"\"\nWrite a python function to find the difference of two numbers.\n\"\"\"\ndef diff(n,m):\n\treturn n-m\n\nprint(diff(10,3))\n\n\"\"\"\nWrite a python function to find the product of two numbers.\n\"\"\"\ndef product(n,m):\n\treturn n*m\n\nprint(product(10,3))\n\n\"\"\"\nWrite a python function to find the quotient of two numbers.\n\"\"\"\ndef quotient(n,m):\n\treturn n/m\n\nprint(quotient(10,3))\n\n\"\"\"\nWrite a python function to find the exponent of two numbers.\n\"\"\"\ndef exponent(n,m):\n\treturn n**m\n\nprint(exponent(10,3))\n\n\"\"\"\nWrite a python function to find the square root of a number.\n\"\"\"\ndef sqrt(n):\n\treturn n**0.5\n\nprint(sqrt(10))\n\n\"\"\"\nWrite a python function to find the cube root of a number.\n\"\"\"\ndef cuberoot(n):\n\treturn n**(1/3)\n\nprint(cuberoot(10))\n\n\"\"\"\nWrite a python function to find the absolute value of a number.\n\"\"\"\ndef abs(n):\n\treturn abs(n)\n\nprint(abs(-10))\n\n\"\"\"\nWrite a python function to find the floor value of a number.\n\"\"\"\ndef floor(n):\n\treturn math.floor(n)\n\nprint(floor(10.5))\n\n\"\"\"\nWrite a python function to find the ceiling value of a number.\n\"\"\"\ndef ceil(n):\n\treturn math.ceil(n)\n\nprint(ceil(10.5))\n\n\"\"\"\nWrite a python function to find the round value of a number.\n\"\"\"\ndef round(n):"}
{"ID": 866, "source": "MBPP:503", "prompt": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to add consecutive numbers of a given list.\n\"\"\"\ndef add_consecutive_nums(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(nums) == 0:\n\t\treturn 0\n\telse:\n\t\treturn nums[0] + add_consecutive_nums(nums[1:])\n\n\ndef add_consecutive_nums_2(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif len(nums) == 0:\n\t\treturn 0\n\telse:\n\t\treturn sum(nums)\n\n\ndef add_consecutive_nums_3(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_4(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_5(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_6(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_7(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_8(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_9(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn 0\n\telse:\n\t\treturn sum(nums)\n\n\ndef add_consecutive_nums_3(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_4(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_5(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_6(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_7(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_8(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: int\n\t\"\"\"\n\treturn sum(nums)\n\n\ndef add_consecutive_nums_9(nums):\n\t\"\"\"\n\t:type nums: List[int]"}
{"ID": 868, "source": "MBPP:505", "prompt": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t", "predict": "<s> \"\"\"\nWrite a function to move all zeroes to the end of the given array.\n\"\"\"\ndef re_order(A):\n\t\"\"\"\n\t:type A: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(A) == 0:\n\t\treturn A\n\telse:\n\t\tzero_count = 0\n\t\tfor i in range(len(A)):\n\t\t\tif A[i] == 0:\n\t\t\t\tzero_count += 1\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tA[i-zero_count] = A[i]\n\t\t\t\tA[i] = 0\n\t\treturn A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 869, "source": "MBPP:506", "prompt": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\t", "predict": "<s> \"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\n\"\"\"\ndef permutation_coefficient(n, k): \n\tif k > n: \n\t\treturn 0\n\tif k == 0 or k == n: \n\t\treturn 1\n\treturn permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k) \n\n# Driver program to test above function \nn = 5\nk = 2\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 3\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 4\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 5\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 6\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 7\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 8\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 9\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 10\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 11\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 12\nprint(\"Value of p({}, {}) is {}\".format", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Driver program to test above function \nn = 5\nk = 2\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 3\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 4\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 5\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 6\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 7\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 8\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 9\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 10\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 11\nprint(\"Value of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k))) \n\nn = 5\nk = 12\nprint(\"Value of p({}, {}) is {}\".format"}
{"ID": 870, "source": "MBPP:507", "prompt": "\"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\t", "predict": "<s> \"\"\"\nWrite a function to remove specific words from a given list.\n\"\"\"\ndef remove_words(list1, removewords):\n\tfor word in removewords:\n\t\tif word in list1:\n\t\t\tlist1.remove(word)\n\treturn list1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 879, "source": "MBPP:516", "prompt": "\"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort a list of elements using radix sort.\n\"\"\"\ndef radix_sort(nums):\n\t\"\"\"\n\t:type nums: List[int]\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) <= 1:\n\t\treturn nums\n\tmax_len = max(nums)\n\tmax_len_len = len(str(max_len))\n\tfor i in range(max_len_len):\n\t\tnums = radix_sort_helper(nums, i)\n\treturn nums\n\ndef radix_sort_helper(nums, i):\n\t\"\"\"\n\t:type nums: List[int]\n\t:type i: int\n\t:rtype: List[int]\n\t\"\"\"\n\tif len(nums) <= 1:\n\t\treturn nums\n\tmax_len = max(nums)\n\tmax_len_len = len(str(max_len))\n\tif i >= max_len_len:\n\t\treturn nums\n\tbuckets = [[] for _ in range(10)]\n\tfor num in nums:\n\t\tbuckets[int(str(num)[i])].append(num)\n\treturn [num for bucket in buckets for num in bucket]\n\nif __name__ == '__main__':\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(radix_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\tprint(radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n\tprint(radix_"}
{"ID": 881, "source": "MBPP:518", "prompt": "\"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the square root of a perfect number.\n\"\"\"\ndef sqrt_root(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_2(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_3(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_4(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_5(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_6(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_7(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_8(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_2(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_3(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_4(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_5(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_6(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:\n\t\t\treturn i\n\treturn -1\n\n\ndef sqrt_root_7(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tfor i in range(1, num):\n\t\tif i * i == num:"}
{"ID": 882, "source": "MBPP:519", "prompt": "\"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\t", "predict": "<s> \"\"\"\nWrite a function to calculate volume of a tetrahedron.\n\"\"\"\ndef volume_tetrahedron(num):\n\treturn num**3\n\nprint(volume_tetrahedron(10))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef area_triangle(num):\n\treturn num**2\n\nprint(area_triangle(10))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef area_circle(num):\n\treturn 3.14 * num**2\n\nprint(area_circle(10))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef area_rectangle(num1, num2):\n\treturn num1 * num2\n\nprint(area_rectangle(10, 5))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef area_square(num):\n\treturn num * num\n\nprint(area_square(10))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef area_rhombus(num):\n\treturn num * num\n\nprint(area_rhombus(10))\n\n\"\"\"\nWrite a function to calculate area of a trapezoid.\n\"\"\"\ndef area_trapezoid(num1, num2):\n\treturn (num1 + num2) * num1\n\nprint(area_trapezoid(10, 5))\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef area_parallelogram(num1, num2):\n\treturn num1 * num2\n\nprint(area_parallelogram(10, 5))\n\n\"\"\"\nWrite a function to calculate area of a pentagon.\n\"\"\"\ndef area_pentagon(num):\n\treturn (5 * num**2) / (4 * 3.14)\n\nprint(area_pentagon(10))\n\n\"\"\"\nWrite a function to calculate area of a hexagon.\n\"\"\"\ndef area_hexagon(num):\n\treturn (6 * num**2) / (4 * 3.14)\n\nprint(area_hexagon(10))\n\n\"\"\"\nWrite a function to", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(volume_tetrahedron(10))\n\n\"\"\"\nWrite a function to calculate area of a triangle.\n\"\"\"\ndef area_triangle(num):\n\treturn num**2\n\nprint(area_triangle(10))\n\n\"\"\"\nWrite a function to calculate area of a circle.\n\"\"\"\ndef area_circle(num):\n\treturn 3.14 * num**2\n\nprint(area_circle(10))\n\n\"\"\"\nWrite a function to calculate area of a rectangle.\n\"\"\"\ndef area_rectangle(num1, num2):\n\treturn num1 * num2\n\nprint(area_rectangle(10, 5))\n\n\"\"\"\nWrite a function to calculate area of a square.\n\"\"\"\ndef area_square(num):\n\treturn num * num\n\nprint(area_square(10))\n\n\"\"\"\nWrite a function to calculate area of a rhombus.\n\"\"\"\ndef area_rhombus(num):\n\treturn num * num\n\nprint(area_rhombus(10))\n\n\"\"\"\nWrite a function to calculate area of a trapezoid.\n\"\"\"\ndef area_trapezoid(num1, num2):\n\treturn (num1 + num2) * num1\n\nprint(area_trapezoid(10, 5))\n\n\"\"\"\nWrite a function to calculate area of a parallelogram.\n\"\"\"\ndef area_parallelogram(num1, num2):\n\treturn num1 * num2\n\nprint(area_parallelogram(10, 5))\n\n\"\"\"\nWrite a function to calculate area of a pentagon.\n\"\"\"\ndef area_pentagon(num):\n\treturn (5 * num**2) / (4 * 3.14)\n\nprint(area_pentagon(10))\n\n\"\"\"\nWrite a function to calculate area of a hexagon.\n\"\"\"\ndef area_hexagon(num):\n\treturn (6 * num**2) / (4 * 3.14)\n\nprint(area_hexagon(10))\n\n\"\"\"\nWrite a function to"}
{"ID": 884, "source": "MBPP:521", "prompt": "\"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\t", "predict": "<s> \"\"\"\nWrite a function to print check if the triangle is scalene or not.\n\"\"\"\ndef check_isosceles(x,y,z):\n\tif x==y or y==z or x==z:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef check_scalene(x,y,z):\n\tif x==y or y==z or x==z:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef check_triangle(x,y,z):\n\tif x+y<z or y+z<x or z+x<y:\n\t\treturn False\n\telse:\n\t\treturn True\n\ndef print_triangle(x,y,z):\n\tif check_triangle(x,y,z):\n\t\tif check_isosceles(x,y,z):\n\t\t\tprint(\"Isosceles\")\n\t\telif check_scalene(x,y,z):\n\t\t\tprint(\"Scalene\")\n\telse:\n\t\tprint(\"Not a triangle\")\n\nprint_triangle(3,4,5)\nprint_triangle(3,4,6)\nprint_triangle(3,4,7)\nprint_triangle(3,4,8)\nprint_triangle(3,4,9)\nprint_triangle(3,4,10)\nprint_triangle(3,4,11)\nprint_triangle(3,4,12)\nprint_triangle(3,4,13)\nprint_triangle(3,4,14)\nprint_triangle(3,4,15)\nprint_triangle(3,4,16)\nprint_triangle(3,4,17)\nprint_triangle(3,4,18)\nprint_triangle(3,4,19)\nprint_triangle(3,4,20)\nprint_triangle(3,4,21)\nprint_triangle(3,4,22)\nprint_triangle(3,4,23)\nprint_triangle(3,4,24)\nprint_triangle(3,4,25)\nprint_triangle(3,4,26)\nprint_triangle(3,4,27)\nprint_triangle(3,4,28)\nprint_triangle(3,4,29)\nprint_triangle(3,", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "print_triangle(3,4,5)\nprint_triangle(3,4,6)\nprint_triangle(3,4,7)\nprint_triangle(3,4,8)\nprint_triangle(3,4,9)\nprint_triangle(3,4,10)\nprint_triangle(3,4,11)\nprint_triangle(3,4,12)\nprint_triangle(3,4,13)\nprint_triangle(3,4,14)\nprint_triangle(3,4,15)\nprint_triangle(3,4,16)\nprint_triangle(3,4,17)\nprint_triangle(3,4,18)\nprint_triangle(3,4,19)\nprint_triangle(3,4,20)\nprint_triangle(3,4,21)\nprint_triangle(3,4,22)\nprint_triangle(3,4,23)\nprint_triangle(3,4,24)\nprint_triangle(3,4,25)\nprint_triangle(3,4,26)\nprint_triangle(3,4,27)\nprint_triangle(3,4,28)\nprint_triangle(3,4,29)\nprint_triangle(3,"}
{"ID": 889, "source": "MBPP:526", "prompt": "\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\n\"\"\"\ndef capitalize_first_last_letters(str1):\n\tstr1 = str1.split()\n\tfor i in range(len(str1)):\n\t\tstr1[i] = str1[i][0].upper() + str1[i][1:].lower()\n\t\tstr1[i] = str1[i][:-1] + str1[i][-1].upper()\n\treturn \" \".join(str1)\n\nprint(capitalize_first_last_letters(\"hello world\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 893, "source": "MBPP:530", "prompt": "\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\n\"\"\"\ndef negative_count(nums):\n\tcount = 0\n\tfor num in nums:\n\t\tif num < 0:\n\t\t\tcount += 1\n\treturn count / len(nums)\n\n\ndef negative_count_2(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_3(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_4(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_5(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_6(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_7(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_8(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_9(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_10(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_11(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_12(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_13(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_14(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_15(nums):\n\treturn sum(num < 0 for num in", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn count / len(nums)\n\n\ndef negative_count_2(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_3(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_4(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_5(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_6(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_7(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_8(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_9(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_10(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_11(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_12(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_13(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_14(nums):\n\treturn sum(num < 0 for num in nums) / len(nums)\n\n\ndef negative_count_15(nums):"}
{"ID": 895, "source": "MBPP:532", "prompt": "\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\t", "predict": "<s> \"\"\"\nWrite a function to check if the two given strings are permutations of each other.\n\"\"\"\ndef check_permutation(str1, str2):\n\tif len(str1) != len(str2):\n\t\treturn False\n\telse:\n\t\tstr1_dict = {}\n\t\tfor char in str1:\n\t\t\tif char not in str1_dict:\n\t\t\t\tstr1_dict[char] = 1\n\t\t\telse:\n\t\t\t\tstr1_dict[char] += 1\n\n\t\tfor char in str2:\n\t\t\tif char not in str1_dict:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstr1_dict[char] -= 1\n\t\t\t\tif str1_dict[char] == 0:\n\t\t\t\t\tdel str1_dict[char]\n\n\t\tif len(str1_dict) == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\ndef check_permutation_2(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\ndef check_permutation_3(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_4(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_5(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_6(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_7(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_8(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_9(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_10(str1, str2):\n\treturn collections.Counter", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\treturn False\n\n\ndef check_permutation_2(str1, str2):\n\treturn sorted(str1) == sorted(str2)\n\n\ndef check_permutation_3(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_4(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_5(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_6(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_7(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_8(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_9(str1, str2):\n\treturn collections.Counter(str1) == collections.Counter(str2)\n\n\ndef check_permutation_10(str1, str2):"}
{"ID": 898, "source": "MBPP:535", "prompt": "\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\n\"\"\"\ndef topbottom_surfacearea(r):\n\treturn 2 * 3.14 * r * (r + 1)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateral_surfacearea(r):\n\treturn 2 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume(r, h):\n\treturn 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r * r * r\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6 * s * s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s * s * s\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 3.14 * r * r * h / 3\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(b, h):\n\treturn 3.14 * b * b / 3 * h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):\n\treturn 3", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2 * 3.14 * r * (r + 1)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\ndef lateral_surfacearea(r):\n\treturn 2 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume(r, h):\n\treturn 3.14 * r * r * h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea(r, h):\n\treturn 2 * 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4 * 3.14 * r * r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4 / 3) * 3.14 * r * r * r\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6 * s * s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s * s * s\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r, h):\n\treturn 3.14 * r * (r + h)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r, h):\n\treturn 3.14 * r * r * h / 3\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(b, h):\n\treturn 3.14 * b * b / 3 * h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b, h):"}
{"ID": 899, "source": "MBPP:536", "prompt": "\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i in range(0,len(list),n)]\n\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3))\n\n\"\"\"\nWrite a function to select the nth items of a list.\n\"\"\"\ndef nth_items(list,n):\n\treturn [list[i] for i"}
{"ID": 900, "source": "MBPP:537", "prompt": "\"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the first repeated word in a given string.\n\"\"\"\ndef first_repeated_word(str1):\n\tstr1 = str1.lower()\n\tstr1 = str1.replace(\".\", \"\")\n\tstr1 = str1.replace(\",\", \"\")\n\tstr1 = str1.replace(\";\", \"\")\n\tstr1 = str1.replace(\":\", \"\")\n\tstr1 = str1.replace(\"?\", \"\")\n\tstr1 = str1.replace(\"!\", \"\")\n\tstr1 = str1.replace(\"'\", \"\")\n\tstr1 = str1.replace(\"\\\"\", \"\")\n\tstr1 = str1.replace(\"(\", \"\")\n\tstr1 = str1.replace(\")\", \"\")\n\tstr1 = str1.replace(\"-\", \" \")\n\tstr1 = str1.replace(\"_\", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tstr1 = str1.lower()\n\tstr1 = str1.replace(\".\", \"\")\n\tstr1 = str1.replace(\",\", \"\")\n\tstr1 = str1.replace(\";\", \"\")\n\tstr1 = str1.replace(\":\", \"\")\n\tstr1 = str1.replace(\"?\", \"\")\n\tstr1 = str1.replace(\"!\", \"\")\n\tstr1 = str1.replace(\"'\", \"\")\n\tstr1 = str1.replace(\"\\\"\", \"\")\n\tstr1 = str1.replace(\"(\", \"\")\n\tstr1 = str1.replace(\")\", \"\")\n\tstr1 = str1.replace(\"-\", \" \")\n\tstr1 = str1.replace(\"_\", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")\n\tstr1 = str1.replace(\"  \", \" \")"}
{"ID": 901, "source": "MBPP:538", "prompt": "\"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\t", "predict": "<s> \"\"\"\nWrite a python function to convert a given string list to a tuple.\n\"\"\"\ndef string_list_to_tuple(str1):\n\treturn tuple(str1)\n\nprint(string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 902, "source": "MBPP:539", "prompt": "\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(map(lambda x: x**index,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using list comprehension.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn [x**index for x in bases_num]\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using reduce function.\n\"\"\"\nfrom functools import reduce\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn reduce(lambda x,y: x+[y**index],bases_num,[])\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using filter function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(filter(lambda x: x**index,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using filter function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(filter(lambda x: x**index,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using filter function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(filter(lambda x: x**index,bases_num))\n\nprint(basesnum_", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn list(map(lambda x: x**index,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using list comprehension.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn [x**index for x in bases_num]\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using reduce function.\n\"\"\"\nfrom functools import reduce\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn reduce(lambda x,y: x+[y**index],bases_num,[])\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using filter function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(filter(lambda x: x**index,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using filter function.\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\n\treturn list(filter(lambda x: x**index,bases_num))\n\nprint(basesnum_coresspondingnum([2,3,4,5],2))\n\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using filter function.\n\"\"\""}
{"ID": 904, "source": "MBPP:541", "prompt": "\"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find if the given number is abundant or not.\n\"\"\"\ndef check_abundant(n): \n\tsum = 0\n\tfor i in range(1, n): \n\t\tif n % i == 0: \n\t\t\tsum += i \n\treturn sum > n \n\n# Driver Code \nn = 12\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 10\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 18\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 19\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 20\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 21\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 22\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 23\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 24\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "n = 12\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 10\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 18\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 19\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 20\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 21\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 22\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 23\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n\nn = 24\nif check_abundant(n): \n\tprint(n, \"is an abundant number\") \nelse: \n\tprint(n, \"is not an abundant number\") \n"}
{"ID": 905, "source": "MBPP:542", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\"\"\"\ndef fill_spaces(text):\n\treturn re.sub(r'[ ,.]', ':', text)\n\n\n# Test case 1:\nprint(fill_spaces(\"Hello, World!\") == \"Hello:World!\")\n# Test case 2:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 3:\nprint(fill_spaces(\"Hello.World!\") == \"Hello:World!\")\n# Test case 4:\nprint(fill_spaces(\"Hello World\") == \"Hello:World\")\n# Test case 5:\nprint(fill_spaces(\"Hello,World\") == \"Hello:World\")\n# Test case 6:\nprint(fill_spaces(\"Hello.World\") == \"Hello:World\")\n# Test case 7:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 8:\nprint(fill_spaces(\"Hello, World!\") == \"Hello:World!\")\n# Test case 9:\nprint(fill_spaces(\"Hello. World!\") == \"Hello:World!\")\n# Test case 10:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 11:\nprint(fill_spaces(\"Hello,World!\") == \"Hello:World!\")\n# Test case 12:\nprint(fill_spaces(\"Hello.World!\") == \"Hello:World!\")\n# Test case 13:\nprint(fill_spaces(\"Hello World\") == \"Hello:World\")\n# Test case 14:\nprint(fill_spaces(\"Hello,World\") == \"Hello:World\")\n# Test case 15:\nprint(fill_spaces(\"Hello.World\") == \"Hello:World\")\n# Test case 16:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 17:\nprint(fill_spaces(\"Hello, World!\") == \"Hello:World!\")\n# Test case 18:\nprint(fill_spaces(\"Hello. World!\") == \"Hello:World!\")\n# Test case 19:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 20:\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Test case 1:\nprint(fill_spaces(\"Hello, World!\") == \"Hello:World!\")\n# Test case 2:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 3:\nprint(fill_spaces(\"Hello.World!\") == \"Hello:World!\")\n# Test case 4:\nprint(fill_spaces(\"Hello World\") == \"Hello:World\")\n# Test case 5:\nprint(fill_spaces(\"Hello,World\") == \"Hello:World\")\n# Test case 6:\nprint(fill_spaces(\"Hello.World\") == \"Hello:World\")\n# Test case 7:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 8:\nprint(fill_spaces(\"Hello, World!\") == \"Hello:World!\")\n# Test case 9:\nprint(fill_spaces(\"Hello. World!\") == \"Hello:World!\")\n# Test case 10:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 11:\nprint(fill_spaces(\"Hello,World!\") == \"Hello:World!\")\n# Test case 12:\nprint(fill_spaces(\"Hello.World!\") == \"Hello:World!\")\n# Test case 13:\nprint(fill_spaces(\"Hello World\") == \"Hello:World\")\n# Test case 14:\nprint(fill_spaces(\"Hello,World\") == \"Hello:World\")\n# Test case 15:\nprint(fill_spaces(\"Hello.World\") == \"Hello:World\")\n# Test case 16:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")\n# Test case 17:\nprint(fill_spaces(\"Hello, World!\") == \"Hello:World!\")\n# Test case 18:\nprint(fill_spaces(\"Hello. World!\") == \"Hello:World!\")\n# Test case 19:\nprint(fill_spaces(\"Hello World!\") == \"Hello:World!\")"}
{"ID": 908, "source": "MBPP:545", "prompt": "\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\t", "predict": "<s> \"\"\"\nWrite a python function to toggle only first and last bits of a given number.\n\"\"\"\ndef toggle_F_and_L_bits(n) :  \n\treturn (n^(1<<0))^(n^(1<<(n.bit_length()-1)))\n\n\n# Test program\nn = 12\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 13\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 14\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 15\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 16\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 17\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 18\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 19\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 20\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 21\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 22\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "# Test program\nn = 12\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 13\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 14\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 15\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 16\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 17\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 18\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 19\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 20\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 21\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))\n\nn = 22\nprint(\"The number is: \", n)\nprint(\"The number after toggling first and last bits is: \", toggle_F_and_L_bits(n))"}
{"ID": 909, "source": "MBPP:546", "prompt": "\"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the last occurrence of a character in a string.\n\"\"\"\ndef last_occurence_char(string,char):\n\treturn string.rfind(char)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 914, "source": "MBPP:551", "prompt": "\"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t", "predict": "<s> \"\"\"\nWrite a function to extract a specified column from a given nested list.\n\"\"\"\ndef extract_column(list1, n):\n\t\"\"\"\n\t:type list1: List[List[int]]\n\t:type n: int\n\t:rtype: List[int]\n\t\"\"\"\n\tresult = []\n\tfor i in list1:\n\t\tresult.append(i[n])\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 915, "source": "MBPP:552", "prompt": "\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether a given sequence is linear or not.\n\"\"\"\ndef Seq_Linear(seq_nums):\n\tif len(seq_nums) == 1:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(seq_nums)-1):\n\t\t\tif seq_nums[i] + 1 != seq_nums[i+1]:\n\t\t\t\treturn False\n\t\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 916, "source": "MBPP:553", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert the given tuple to a floating-point number.\n\"\"\"\ndef tuple_to_float(test_tup):\n\treturn float(test_tup[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 917, "source": "MBPP:554", "prompt": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\t", "predict": "<s> \"\"\"\nWrite a python function to find odd numbers from a mixed list.\n\"\"\"\ndef Split(list): \n\todd = [] \n\teven = [] \n\tfor i in list: \n\t\tif i % 2 == 0: \n\t\t\teven.append(i) \n\t\telse: \n\t\t\todd.append(i) \n\treturn odd \n\n# Driver Code \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\n# Driver Code \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nprint(\"Odd numbers are: \", Split(list)) \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1"}
{"ID": 921, "source": "MBPP:558", "prompt": "\"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\t", "predict": "<s> \"\"\"\nWrite a python function to find the digit distance between two integers.\n\"\"\"\ndef digit_distance_nums(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn len(n1) + len(n2)\n\ndef digit_distance_nums_2(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_3(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_4(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_5(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_6(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_7(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_8(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_9(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_10(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn len(n1) + len(n2)\n\ndef digit_distance_nums_2(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_3(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_4(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_5(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_6(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_7(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_8(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_9(n1, n2):\n\tn1 = str(n1)\n\tn2 = str(n2)\n\treturn abs(len(n1) - len(n2))\n\ndef digit_distance_nums_10(n1, n2):"}
{"ID": 928, "source": "MBPP:565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\t", "predict": "<s> \"\"\"\nWrite a python function to split a string into characters.\n\"\"\"\ndef split(word): \n\treturn [char for char in word]\n\nprint(split(\"hello\"))\n\n\"\"\"\nWrite a python function to split a string into words.\n\"\"\"\ndef split(word): \n\treturn word.split()\n\nprint(split(\"hello world\"))\n\n\"\"\"\nWrite a python function to split a string into lines.\n\"\"\"\ndef split(word): \n\treturn word.splitlines()\n\nprint(split(\"hello\\nworld\"))\n\n\"\"\"\nWrite a python function to split a string into characters and words.\n\"\"\"\ndef split(word): \n\treturn [char for char in word] + [word for word in word.split()]\n\nprint(split(\"hello world\"))\n\n\"\"\"\nWrite a python function to split a string into characters and words and lines.\n\"\"\"\ndef split(word): \n\treturn [char for char in word] + [word for word in word.split()] + [word for word in word.splitlines()]\n\nprint(split(\"hello\\nworld\"))\n\n\"\"\"\nWrite a python function to split a string into characters and words and lines and sentences.\n\"\"\"\ndef split(word): \n\treturn [char for char in word] + [word for word in word.split()] + [word for word in word.splitlines()] + [word for word in word.split('.')]\n\nprint(split(\"hello\\nworld.how are you?\"))\n\n\"\"\"\nWrite a python function to split a string into characters and words and lines and sentences and paragraphs.\n\"\"\"\ndef split(word): \n\treturn [char for char in word] + [word for word in word.split()] + [word for word in word.splitlines()] + [word for word in word.split('.')] + [word for word in word.split('?')]\n\nprint(split(\"hello\\nworld.how are you?\\nI am fine.\"))\n\n\"\"\"\nWrite a python function to split a string into characters and words and lines and sentences and paragraphs and pages.\n\"\"\"\ndef split(word): \n\treturn [char for char in word] + [word for word in word.split()] + [word for word in word.splitlines()", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\treturn [char for char in word] + [word for word in word.split()] + [word for word in word.splitlines()"}
{"ID": 929, "source": "MBPP:566", "prompt": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the sum of a non-negative integer.\n\"\"\"\ndef sum_digits(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn n % 10 + sum_digits(n // 10)\n\n\ndef sum_digits_2(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_3(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_4(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_5(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_6(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_7(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_8(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_9(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_10(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn n % 10 + sum_digits(n // 10)\n\n\ndef sum_digits_2(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_3(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_4(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_5(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_6(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_7(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_8(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(int(i) for i in str(n))\n\n\ndef sum_digits_9(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\treturn sum(map(int, str(n)))\n\n\ndef sum_digits_10(n):\n\t\"\"\"\n\t:type n: int"}
{"ID": 930, "source": "MBPP:567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"\ndef issort_list(list1):\n\tfor i in range(len(list1)-1):\n\t\tif list1[i] > list1[i+1]:\n\t\t\treturn False\n\treturn True\n\ndef issort_list2(list1):\n\treturn sorted(list1) == list1\n\ndef issort_list3(list1):\n\treturn all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n\ndef issort_list4(list1):\n\treturn list1 == sorted(list1)\n\ndef issort_list5(list1):\n\treturn list1 == sorted(list1, reverse=True)\n\ndef issort_list6(list1):\n\treturn list1 == sorted(list1, key=lambda x: x)\n\ndef issort_list7(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list8(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list9(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list10(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list11(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list12(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list13(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list14(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list15(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list16(list1):\n\treturn", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\ndef issort_list3(list1):\n\treturn all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n\ndef issort_list4(list1):\n\treturn list1 == sorted(list1)\n\ndef issort_list5(list1):\n\treturn list1 == sorted(list1, reverse=True)\n\ndef issort_list6(list1):\n\treturn list1 == sorted(list1, key=lambda x: x)\n\ndef issort_list7(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list8(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list9(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list10(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list11(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list12(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list13(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)\n\ndef issort_list14(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=False)\n\ndef issort_list15(list1):\n\treturn list1 == sorted(list1, key=lambda x: x, reverse=True)"}
{"ID": 931, "source": "MBPP:568", "prompt": "\"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\t", "predict": "<s> \"\"\"\nWrite a function to create a list of empty dictionaries.\n\"\"\"\ndef empty_list(length):\n\treturn [{} for i in range(length)]\n\nprint(empty_list(5))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, ", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [{} for i in range(length)]\n\nprint(empty_list(5))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n\nprint(list_of_dicts(5, ['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to create a list of dictionaries with keys and values.\n\"\"\"\ndef list_of_dicts(length, keys, values):\n\treturn [{keys[i]: values[i]} for i in range(length)]\n"}
{"ID": 932, "source": "MBPP:569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\t", "predict": "<s> \"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"\ndef sort_sublists(list1):\n\tfor i in range(len(list1)):\n\t\tlist1[i].sort()\n\treturn list1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 934, "source": "MBPP:571", "prompt": "\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\t", "predict": "<s> \"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n\tarr.sort()\n\tmax_sum = 0\n\tfor i in range(N-1):\n\t\tfor j in range(i+1, N):\n\t\t\tif (arr[j]-arr[i]) < K:\n\t\t\t\tmax_sum += (arr[j]-arr[i])\n\t\t\t\tbreak\n\treturn max_sum\n\n\narr = [1, 2, 3, 4, 5]\nN = len(arr)\nK = 2\nprint(max_sum_pair_diff_lessthan_K(arr, N, K))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 935, "source": "MBPP:572", "prompt": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\n\"\"\"\ndef two_unique_nums(nums):\n\treturn list(set(nums))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 937, "source": "MBPP:574", "prompt": "\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\t", "predict": "<s> \"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\ndef surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*(h+r)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6*s*s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(b,h):\n\treturn 3*b*b + 3*b*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b,h):\n\treturn (b*h)/3\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r1,r2):\n\treturn 3.14*r1*r2*(r1+r2)\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r1,r2):\n\treturn (", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn 2*3.14*r*(h+r)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef volume_cylinder(r,h):\n\treturn 3.14*r*r*h\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\ndef surfacearea_sphere(r):\n\treturn 4*3.14*r*r\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\ndef volume_sphere(r):\n\treturn (4/3)*3.14*r*r*r\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\ndef surfacearea_cube(s):\n\treturn 6*s*s\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\ndef volume_cube(s):\n\treturn s*s*s\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\ndef surfacearea_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\ndef volume_cone(r,h):\n\treturn 3.14*r*r*h/3\n\n\"\"\"\nWrite a function to find the surface area of a pyramid.\n\"\"\"\ndef surfacearea_pyramid(b,h):\n\treturn 3*b*b + 3*b*h\n\n\"\"\"\nWrite a function to find the volume of a pyramid.\n\"\"\"\ndef volume_pyramid(b,h):\n\treturn (b*h)/3\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\ndef surfacearea_torus(r1,r2):\n\treturn 3.14*r1*r2*(r1+r2)\n\n\"\"\"\nWrite a function to find the volume of a torus.\n\"\"\"\ndef volume_torus(r1,r2):"}
{"ID": 939, "source": "MBPP:576", "prompt": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether an array is subarray of another or not.\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \n\tif n<m:\n\t\treturn False\n\tfor i in range(0,n-m+1):\n\t\tif A[i:i+m]==B:\n\t\t\treturn True\n\treturn False\n\nA = [1,2,3,4,5]\nB = [3,4]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,6]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6,7]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6,7,8]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6,7,8,9", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn False\n\nA = [1,2,3,4,5]\nB = [3,4]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,6]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6,7]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\nA = [1,2,3,4,5]\nB = [3,4,5,6,7,8]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"}
{"ID": 941, "source": "MBPP:578", "prompt": "\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\t", "predict": "<s> \"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\ndef interleave_lists(list1,list2,list3):\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tresult.append(list1[i])\n\t\tresult.append(list2[i])\n\t\tresult.append(list3[i])\n\treturn result\n\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns a list of all the pairs of integers \nthat add up to zero.\n\"\"\"\ndef pair_sum(my_list):\n\tresult = []\n\tfor i in range(len(my_list)):\n\t\tfor j in range(i+1,len(my_list)):\n\t\t\tif my_list[i] + my_list[j] == 0:\n\t\t\t\tresult.append((my_list[i],my_list[j]))\n\treturn result\n\nprint(pair_sum([-3,0,1,2,-3]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns a list of all the pairs of integers \nthat add up to a given value.\n\"\"\"\ndef pair_sum_value(my_list,value):\n\tresult = []\n\tfor i in range(len(my_list)):\n\t\tfor j in range(i+1,len(my_list)):\n\t\t\tif my_list[i] + my_list[j] == value:\n\t\t\t\tresult.append((my_list[i],my_list[j]))\n\treturn result\n\nprint(pair_sum_value([-3,0,1,2,-3],0))\n\n\"\"\"\nWrite a function that takes a list of integers and returns a list of all the triples of integers \nthat add up to zero.\n\"\"\"\ndef triple_sum(my_list):\n\tresult = []\n\tfor i in range(len(my_list)):\n\t\tfor j in range(i+1,len(my_list)):\n\t\t\tfor k in range(j+1,len(my_list)):\n\t\t\t\tif my_list[i] + my_list[j] + my_list[k", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns a list of all the pairs of integers \nthat add up to zero.\n\"\"\"\ndef pair_sum(my_list):\n\tresult = []\n\tfor i in range(len(my_list)):\n\t\tfor j in range(i+1,len(my_list)):\n\t\t\tif my_list[i] + my_list[j] == 0:\n\t\t\t\tresult.append((my_list[i],my_list[j]))\n\treturn result\n\nprint(pair_sum([-3,0,1,2,-3]))\n\n\"\"\"\nWrite a function that takes a list of integers and returns a list of all the pairs of integers \nthat add up to a given value.\n\"\"\"\ndef pair_sum_value(my_list,value):\n\tresult = []\n\tfor i in range(len(my_list)):\n\t\tfor j in range(i+1,len(my_list)):\n\t\t\tif my_list[i] + my_list[j] == value:\n\t\t\t\tresult.append((my_list[i],my_list[j]))\n\treturn result\n\nprint(pair_sum_value([-3,0,1,2,-3],0))\n\n\"\"\"\nWrite a function that takes a list of integers and returns a list of all the triples of integers \nthat add up to zero.\n\"\"\"\ndef triple_sum(my_list):\n\tresult = []\n\tfor i in range(len(my_list)):\n\t\tfor j in range(i+1,len(my_list)):"}
{"ID": 947, "source": "MBPP:584", "prompt": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\t", "predict": "<s> \"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\n\"\"\"\ndef find_adverbs(text):\n\timport re\n\tpattern = r\"(very|too|enough|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|", "is_repeat": true, "repeat_type": "character_repetition", "repeat_code": "\tpattern = r\"(very|too|enough|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|quite|rather|somewhat|slightly|very|well|completely|largely|mostly|partly|scarcely|slightly|totally|almost|barely|hardly|just|fairly|mostly|nearly|only|partly|"}
{"ID": 949, "source": "MBPP:586", "prompt": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\t", "predict": "<s> \"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))\n\n\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\n\"\"\"\ndef split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\na = [1,2,3,4,5,6]\nn = 3\nk = 2\nprint(split_Arr(a,n,k))"}
{"ID": 950, "source": "MBPP:587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"\ndef list_tuple(listx):\n\treturn tuple(listx)\n\nprint(list_tuple([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\nprint(tuple_list((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\treturn list(stringx)\n\nprint(string_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\treturn \"\".join(listx)\n\nprint(list_string([\"h\",\"e\",\"l\",\"l\",\"o\"]))\n\n\"\"\"\nWrite a function to convert a tuple to a string.\n\"\"\"\ndef tuple_string(tuplex):\n\treturn \"\".join(tuplex)\n\nprint(tuple_string((\"h\",\"e\",\"l\",\"l\",\"o\")))\n\n\"\"\"\nWrite a function to convert a string to a tuple.\n\"\"\"\ndef string_tuple(stringx):\n\treturn tuple(stringx)\n\nprint(string_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_set(listx):\n\treturn set(listx)\n\nprint(list_set([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to convert a set to a list.\n\"\"\"\ndef set_list(setx):\n\treturn list(setx)\n\nprint(set_list({1,2,3,4,5}))\n\n\"\"\"\nWrite a function to convert a tuple to a set.\n\"\"\"\ndef tuple_set(tuplex):\n\treturn set(tuplex)\n\nprint(tuple_set((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert a set to a tuple.\n\"\"\"\ndef set_tuple(setx):\n\treturn tuple(setx)\n\nprint(set_tuple({1,2,3,4,5}))\n\n\"\"\"\nWrite a function to convert", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "print(list_tuple([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to convert a tuple to a list.\n\"\"\"\ndef tuple_list(tuplex):\n\treturn list(tuplex)\n\nprint(tuple_list((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert a string to a list.\n\"\"\"\ndef string_list(stringx):\n\treturn list(stringx)\n\nprint(string_list(\"hello\"))\n\n\"\"\"\nWrite a function to convert a list to a string.\n\"\"\"\ndef list_string(listx):\n\treturn \"\".join(listx)\n\nprint(list_string([\"h\",\"e\",\"l\",\"l\",\"o\"]))\n\n\"\"\"\nWrite a function to convert a tuple to a string.\n\"\"\"\ndef tuple_string(tuplex):\n\treturn \"\".join(tuplex)\n\nprint(tuple_string((\"h\",\"e\",\"l\",\"l\",\"o\")))\n\n\"\"\"\nWrite a function to convert a string to a tuple.\n\"\"\"\ndef string_tuple(stringx):\n\treturn tuple(stringx)\n\nprint(string_tuple(\"hello\"))\n\n\"\"\"\nWrite a function to convert a list to a set.\n\"\"\"\ndef list_set(listx):\n\treturn set(listx)\n\nprint(list_set([1,2,3,4,5]))\n\n\"\"\"\nWrite a function to convert a set to a list.\n\"\"\"\ndef set_list(setx):\n\treturn list(setx)\n\nprint(set_list({1,2,3,4,5}))\n\n\"\"\"\nWrite a function to convert a tuple to a set.\n\"\"\"\ndef tuple_set(tuplex):\n\treturn set(tuplex)\n\nprint(tuple_set((1,2,3,4,5)))\n\n\"\"\"\nWrite a function to convert a set to a tuple.\n\"\"\"\ndef set_tuple(setx):\n\treturn tuple(setx)\n\nprint(set_tuple({1,2,3,4,5}))\n\n\"\"\"\nWrite a function to convert"}
{"ID": 952, "source": "MBPP:589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t", "predict": "<s> \"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"\ndef perfect_squares(a, b):\n\t\"\"\"\n\t:type a: int\n\t:type b: int\n\t:rtype: List[int]\n\t\"\"\"\n\tresult = []\n\tfor i in range(a, b+1):\n\t\tif i**0.5 == int(i**0.5):\n\t\t\tresult.append(i)\n\treturn result\n\n\nif __name__ == '__main__':\n\tprint(perfect_squares(1, 10))\n\tprint(perfect_squares(1, 100))\n\tprint(perfect_squares(1, 1000))\n\tprint(perfect_squares(1, 10000))\n\tprint(perfect_squares(1, 100000))\n\tprint(perfect_squares(1, 1000000))\n\tprint(perfect_squares(1, 10000000))\n\tprint(perfect_squares(1, 100000000))\n\tprint(perfect_squares(1, 1000000000))\n\tprint(perfect_squares(1, 10000000000))\n\tprint(perfect_squares(1, 100000000000))\n\tprint(perfect_squares(1, 1000000000000))\n\tprint(perfect_squares(1, 10000000000000))\n\tprint(perfect_squares(1, 100000000000000))\n\tprint(perfect_squares(1, 1000000000000000))\n\tprint(perfect_squares(1, 10000000000000000))\n\tprint(perfect_squares(1, 100000000000000000))\n\tprint(perfect_squares(1", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tprint(perfect_squares(1, 10))\n\tprint(perfect_squares(1, 100))\n\tprint(perfect_squares(1, 1000))\n\tprint(perfect_squares(1, 10000))\n\tprint(perfect_squares(1, 100000))\n\tprint(perfect_squares(1, 1000000))\n\tprint(perfect_squares(1, 10000000))\n\tprint(perfect_squares(1, 100000000))\n\tprint(perfect_squares(1, 1000000000))\n\tprint(perfect_squares(1, 10000000000))\n\tprint(perfect_squares(1, 100000000000))\n\tprint(perfect_squares(1, 1000000000000))\n\tprint(perfect_squares(1, 10000000000000))\n\tprint(perfect_squares(1, 100000000000000))\n\tprint(perfect_squares(1, 1000000000000000))\n\tprint(perfect_squares(1, 10000000000000000))\n\tprint(perfect_squares(1, 100000000000000000))\n\tprint(perfect_squares(1"}
{"ID": 953, "source": "MBPP:590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\t", "predict": "<s> \"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"\ndef polar_rect(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_2(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_3(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_4(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_5(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_6(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_7(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_8(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_9(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_10(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_11(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_12(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_13(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_14(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_15(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_16(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_1", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_2(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_3(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_4(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_5(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_6(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_7(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_8(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_9(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_10(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_11(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_12(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_13(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_14(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_15(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_16(x,y):\n\treturn x*math.cos(y), x*math.sin(y)\n\ndef polar_rect_1"}
{"ID": 960, "source": "MBPP:597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\t", "predict": "<s> \"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\n\tif m + n == k:\n\t\treturn arr1[m-1]\n\tif m + n < k:\n\t\treturn arr2[n-1]\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif n == 0:\n\t\treturn arr1[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\tif arr1[m-1] < arr2[n-1]:\n\t\treturn find_kth(arr1, arr2[n:], m, n-1, k-m)\n\telse:\n\t\treturn find_kth(arr1[m:], arr2, m-1, n, k-n)\n\n\ndef find_kth(arr1, arr2, m, n, k):\n\tif m + n == k:\n\t\treturn arr1[m-1]\n\tif m + n < k:\n\t\treturn arr2[n-1]\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif n == 0:\n\t\treturn arr1[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\tif arr1[m-1] < arr2[n-1]:\n\t\treturn find_kth(arr1, arr2[n:], m, n-1, k-m)\n\telse:\n\t\treturn find_kth(arr1[m:], arr2, m-1, n, k-n)\n\n\ndef find_kth(arr1, arr2, m, n, k):\n\tif m + n == k:\n\t\treturn arr1[m-1]\n\tif m + n < k:\n\t\treturn arr2[n-1]\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif n == 0:\n\t\treturn arr1[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\tif arr1[m-1]", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\treturn arr2[n-1]\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif n == 0:\n\t\treturn arr1[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\tif arr1[m-1] < arr2[n-1]:\n\t\treturn find_kth(arr1, arr2[n:], m, n-1, k-m)\n\telse:\n\t\treturn find_kth(arr1[m:], arr2, m-1, n, k-n)\n\n\ndef find_kth(arr1, arr2, m, n, k):\n\tif m + n == k:\n\t\treturn arr1[m-1]\n\tif m + n < k:\n\t\treturn arr2[n-1]\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif n == 0:\n\t\treturn arr1[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\tif arr1[m-1] < arr2[n-1]:\n\t\treturn find_kth(arr1, arr2[n:], m, n-1, k-m)\n\telse:\n\t\treturn find_kth(arr1[m:], arr2, m-1, n, k-n)"}
{"ID": 962, "source": "MBPP:599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\t", "predict": "<s> \"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"\ndef sum_average(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i\n\taverage = sum/number\n\treturn sum, average\n\nprint(sum_average(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using recursion.\n\"\"\"\ndef sum_recursion(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_recursion(number-1)\n\nprint(sum_recursion(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop.\n\"\"\"\ndef sum_loop(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_loop(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_loop_recursion(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_loop_recursion(number-1)\n\nprint(sum_loop_recursion(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_recursion_loop(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_recursion_loop(number-1)\n\nprint(sum_recursion_loop(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_recursion_loop_2(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_recursion_loop_2(number-1)\n\nprint(sum_recursion_loop_2(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_recursion_loop_3(number):\n\tif number == 0:\n\t\treturn 0\n", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\telse:\n\t\treturn number + sum_recursion(number-1)\n\nprint(sum_recursion(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop.\n\"\"\"\ndef sum_loop(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i\n\treturn sum\n\nprint(sum_loop(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_loop_recursion(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_loop_recursion(number-1)\n\nprint(sum_loop_recursion(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_recursion_loop(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_recursion_loop(number-1)\n\nprint(sum_recursion_loop(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_recursion_loop_2(number):\n\tif number == 0:\n\t\treturn 0\n\telse:\n\t\treturn number + sum_recursion_loop_2(number-1)\n\nprint(sum_recursion_loop_2(5))\n\n\"\"\"\nWrite a function to find sum of first n natural numbers using loop and recursion.\n\"\"\"\ndef sum_recursion_loop_3(number):\n\tif number == 0:\n\t\treturn 0"}
{"ID": 968, "source": "MBPP:5", "prompt": "\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\t", "predict": "<s> \"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\"\"\"\ndef count_ways(n): \n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 5\n\tif n == 4: \n\t\treturn 12\n\tif n == 5: \n\t\treturn 29\n\tif n == 6: \n\t\treturn 70\n\tif n == 7: \n\t\treturn 167\n\tif n == 8: \n\t\treturn 404\n\tif n == 9: \n\t\treturn 927\n\tif n == 10: \n\t\treturn 2184\n\tif n == 11: \n\t\treturn 4765\n\tif n == 12: \n\t\treturn 11919\n\tif n == 13: \n\t\treturn 27497\n\tif n == 14: \n\t\treturn 60919\n\tif n == 15: \n\t\treturn 131272\n\tif n == 16: \n\t\treturn 282376\n\tif n == 17: \n\t\treturn 610272\n\tif n == 18: \n\t\treturn 131272\n\tif n == 19: \n\t\treturn 282376\n\tif n == 20: \n\t\treturn 610272\n\tif n == 21: \n\t\treturn 131272\n\tif n == 22: \n\t\treturn 282376\n\tif n == 23: \n\t\treturn 610272\n\tif n == 24: \n\t\treturn 131272\n\tif n == 25: \n\t\treturn 282376\n\tif n == 26: \n\t\treturn 610272\n\tif n == 27: \n\t\treturn 13127", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 5\n\tif n == 4: \n\t\treturn 12\n\tif n == 5: \n\t\treturn 29\n\tif n == 6: \n\t\treturn 70\n\tif n == 7: \n\t\treturn 167\n\tif n == 8: \n\t\treturn 404\n\tif n == 9: \n\t\treturn 927\n\tif n == 10: \n\t\treturn 2184\n\tif n == 11: \n\t\treturn 4765\n\tif n == 12: \n\t\treturn 11919\n\tif n == 13: \n\t\treturn 27497\n\tif n == 14: \n\t\treturn 60919\n\tif n == 15: \n\t\treturn 131272\n\tif n == 16: \n\t\treturn 282376\n\tif n == 17: \n\t\treturn 610272\n\tif n == 18: \n\t\treturn 131272\n\tif n == 19: \n\t\treturn 282376\n\tif n == 20: \n\t\treturn 610272\n\tif n == 21: \n\t\treturn 131272\n\tif n == 22: \n\t\treturn 282376\n\tif n == 23: \n\t\treturn 610272\n\tif n == 24: \n\t\treturn 131272\n\tif n == 25: \n\t\treturn 282376\n\tif n == 26: \n\t\treturn 610272\n\tif n == 27: \n\t\treturn 13127"}
{"ID": 969, "source": "MBPP:6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\t", "predict": "<s> \"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"\ndef differ_At_One_Bit_Pos(a,b): \n\treturn bin(a^b).count('1') == 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"ID": 971, "source": "MBPP:8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\t", "predict": "<s> \"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(map(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using list comprehension.\n\"\"\"\ndef square_nums(nums):\n\treturn [x**2 for x in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\treturn [x**2 for x in nums]\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find squares of individual elements in a list using filter() and lambda function.\n\"\"\"\ndef square_nums(nums):\n\treturn list(filter(lambda x: x**2, nums))\n"}
{"ID": 973, "source": "MBPP:10", "prompt": "\"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\t", "predict": "<s> \"\"\"\nWrite a function to get the n smallest items from a dataset.\n\"\"\"\ndef small_nnum(list1,n):\n\treturn sorted(list1)[:n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
