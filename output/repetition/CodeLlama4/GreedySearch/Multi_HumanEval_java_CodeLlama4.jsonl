{"ID": 10, "source": "Multi_HumanEval_java:HumanEval_java/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t", "predict": "<s> import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n\t\tStringBuilder sb = new StringBuilder(string);\n\t\tStringBuilder sb2 = new StringBuilder(string);\n\t\tsb2.reverse();\n\t\tString rev = sb2.toString();\n\t\tint i = 0;\n\t\twhile (i < string.length() && string.charAt(i) == rev.charAt(i)) {\n\t\t\ti++;\n\t\t}\n\t\tsb.append(rev.substring(i));\n\t\treturn sb.toString();\n    }\n\n    public static void main(String[] args) {\n\t\tString[] tests = {\n\t\t\t\"\",\n\t\t\t\"cat\",\n\t\t\t\"cata\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"c", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\t\t\t\"cat\",\n\t\t\t\"cata\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"catac\",\n\t\t\t\"c"}
{"ID": 37, "source": "Multi_HumanEval_java:HumanEval_java/39", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\t", "predict": "<s> import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n\tint a = 0;\n\tint b = 1;\n\tint c = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint[] primes = new int[1000000];\n\tint[] fibs = new int[1000000];\n\tint[] is_prime = new int[1000000];\n\tint[] is_fib = new int[1000000];\n\tint[] is_prime_fib = new int[1000000];\n\tint[] is_prime_fib_index = new int[1000000];\n\tint[] is_prime_fib_count = new int[1000000];\n\tint[] is_prime_fib_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count_", "is_repeat": true, "repeat_type": "statement_repetition", "repeat_code": "\tint[] is_prime = new int[1000000];\n\tint[] is_fib = new int[1000000];\n\tint[] is_prime_fib = new int[1000000];\n\tint[] is_prime_fib_index = new int[1000000];\n\tint[] is_prime_fib_count = new int[1000000];\n\tint[] is_prime_fib_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count_index = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count_count = new int[1000000];\n\tint[] is_prime_fib_count_count_count_count_count_"}
{"ID": 47, "source": "Multi_HumanEval_java:HumanEval_java/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\t", "predict": "<s> import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n\tint result = 1;\n\tfor (int i = 0; i < n; i++) {\n\t    result = (result * 2) % p;\n\t}\n\treturn result;\n    }\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static long modp(long n, long p) {\n\tlong result = 1;\n\tfor (long i = 0; i < n; i++) {\n\t    result = (result * 2) % p;\n\t}\n\treturn result;\n    }\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static BigInteger modp(BigInteger n, BigInteger p) {\n\tBigInteger result = BigInteger.ONE;\n\tfor (BigInteger i = BigInteger.ZERO; i.compareTo(n) < 0; i = i.add(BigInteger.ONE)) {\n\t    result = result.multiply(BigInteger.valueOf(2)).mod(p);\n\t}\n\treturn result;\n    }\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\tint result = 1;\n\tfor (int i = 0; i < n; i++) {\n\t    result = (result * 2) % p;\n\t}\n\treturn result;\n    }\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static long modp(long n, long p) {\n\tlong result = 1;\n\tfor (long i = 0; i < n; i++) {\n\t    result = (result * 2) % p;\n\t}\n\treturn result;\n    }\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)"}
{"ID": 78, "source": "Multi_HumanEval_java:HumanEval_java/81", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t", "predict": "<s> import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\t\tList<String> letterGrades = new ArrayList<String>();\n\t\tfor (Number grade : grades) {\n\t\t\tif (grade.doubleValue() >= 4.0) {\n\t\t\t\tletterGrades.add(\"A+\");\n\t\t\t} else if (grade.doubleValue() >= 3.7) {\n\t\t\t\tletterGrades.add(\"A\");\n\t\t\t} else if (grade.doubleValue() >= 3.3) {\n\t\t\t\tletterGrades.add(\"A-\");\n\t\t\t} else if (grade.doubleValue() >= 3.0) {\n\t\t\t\tletterGrades.add(\"B+\");\n\t\t\t} else if (grade.doubleValue() >= 2.7) {\n\t\t\t\tletterGrades.add(\"B\");\n\t\t\t} else if (grade.doubleValue() >= 2.3) {\n\t\t\t\tletterGrades.add(\"B-\");\n\t\t\t} else if (grade.doubleValue() >= 2.0) {\n\t\t\t\tletterGrades.add(\"C+\");\n\t\t\t} else if (grade.doubleValue() >= 1.7) {\n\t\t\t\tletterGrades.add(\"C\");\n\t\t\t} else if (grade.doubleValue() >= 1.3) {\n\t\t\t\tletterGrades.add(\"C-\");\n\t\t\t} else if (grade.doubleValue() >= 1.0) {\n\t\t\t\tletterGrades.add(\"D+\");\n\t\t\t} else if (grade.doubleValue() >= 0.7) {\n\t\t\t\tletterGrades.add(\"D\");\n\t\t\t} else if (grade.doubleValue() >= 0.0) {\n\t\t\t\tletterGrades.add(\"D-\");\n\t\t\t} else {\n\t\t\t\tletterGrades.add(\"E\");\n\t\t\t}\n\t\t}\n\t\treturn letterGrades;\n\t}\n\n    public static void main(String[] args) {\n        List<Number> grades = new ArrayList<Number>();\n        grades.add(4.0);\n        grades.add", "is_repeat": true, "repeat_type": "block_repetition", "repeat_code": "\t\t\tif (grade.doubleValue() >= 4.0) {\n\t\t\t\tletterGrades.add(\"A+\");\n\t\t\t} else if (grade.doubleValue() >= 3.7) {\n\t\t\t\tletterGrades.add(\"A\");\n\t\t\t} else if (grade.doubleValue() >= 3.3) {\n\t\t\t\tletterGrades.add(\"A-\");\n\t\t\t} else if (grade.doubleValue() >= 3.0) {\n\t\t\t\tletterGrades.add(\"B+\");\n\t\t\t} else if (grade.doubleValue() >= 2.7) {\n\t\t\t\tletterGrades.add(\"B\");\n\t\t\t} else if (grade.doubleValue() >= 2.3) {\n\t\t\t\tletterGrades.add(\"B-\");\n\t\t\t} else if (grade.doubleValue() >= 2.0) {\n\t\t\t\tletterGrades.add(\"C+\");\n\t\t\t} else if (grade.doubleValue() >= 1.7) {\n\t\t\t\tletterGrades.add(\"C\");\n\t\t\t} else if (grade.doubleValue() >= 1.3) {\n\t\t\t\tletterGrades.add(\"C-\");\n\t\t\t} else if (grade.doubleValue() >= 1.0) {\n\t\t\t\tletterGrades.add(\"D+\");\n\t\t\t} else if (grade.doubleValue() >= 0.7) {\n\t\t\t\tletterGrades.add(\"D\");\n\t\t\t} else if (grade.doubleValue() >= 0.0) {\n\t\t\t\tletterGrades.add(\"D-\");\n\t\t\t} else {\n\t\t\t\tletterGrades.add(\"E\");"}
